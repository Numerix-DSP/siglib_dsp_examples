# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# Copyright (C) 2020 Sigma Numerix Ltd.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_siglib_wrap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_siglib_wrap')
    _siglib_wrap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_siglib_wrap', [dirname(__file__)])
        except ImportError:
            import _siglib_wrap
            return _siglib_wrap
        try:
            _mod = imp.load_module('_siglib_wrap', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _siglib_wrap = swig_import_helper()
    del swig_import_helper
else:
    import _siglib_wrap
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _siglib_wrap.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _siglib_wrap.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _siglib_wrap.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _siglib_wrap.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_siglib_wrap.doubleArray_frompointer)
    else:
        frompointer = _siglib_wrap.doubleArray_frompointer
doubleArray_swigregister = _siglib_wrap.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _siglib_wrap.doubleArray_frompointer(t)
doubleArray_frompointer = _siglib_wrap.doubleArray_frompointer

class longArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _siglib_wrap.new_longArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_longArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _siglib_wrap.longArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _siglib_wrap.longArray___setitem__(self, index, value)

    def cast(self):
        return _siglib_wrap.longArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_siglib_wrap.longArray_frompointer)
    else:
        frompointer = _siglib_wrap.longArray_frompointer
longArray_swigregister = _siglib_wrap.longArray_swigregister
longArray_swigregister(longArray)

def longArray_frompointer(t):
    return _siglib_wrap.longArray_frompointer(t)
longArray_frompointer = _siglib_wrap.longArray_frompointer

SIGLIB = _siglib_wrap.SIGLIB
SIGLIB_VERSION = _siglib_wrap.SIGLIB_VERSION
SIGLIB_ENABLE_DEBUG_FPRINTF = _siglib_wrap.SIGLIB_ENABLE_DEBUG_FPRINTF
SIGLIB_FIX_DATA_SHORT = _siglib_wrap.SIGLIB_FIX_DATA_SHORT
SIGLIB_DATA_SHORT = _siglib_wrap.SIGLIB_DATA_SHORT
SIGLIB_DATA_LONG = _siglib_wrap.SIGLIB_DATA_LONG
SIGLIB_DATA_FLOAT = _siglib_wrap.SIGLIB_DATA_FLOAT
SIGLIB_INDEX_SHORT = _siglib_wrap.SIGLIB_INDEX_SHORT
SIGLIB_HUGE_ARRAYS = _siglib_wrap.SIGLIB_HUGE_ARRAYS
SIGLIB_ARRAYS_ALIGNED = _siglib_wrap.SIGLIB_ARRAYS_ALIGNED
SIGLIB_FILE_IO_SUPPORTED = _siglib_wrap.SIGLIB_FILE_IO_SUPPORTED
SIGLIB_CONSOLE_IO_SUPPORTED = _siglib_wrap.SIGLIB_CONSOLE_IO_SUPPORTED
RAND_MAX = _siglib_wrap.RAND_MAX
SIGLIB_MINUS_ONE_HUNDRED = _siglib_wrap.SIGLIB_MINUS_ONE_HUNDRED
SIGLIB_MINUS_TEN = _siglib_wrap.SIGLIB_MINUS_TEN
SIGLIB_MINUS_TWO = _siglib_wrap.SIGLIB_MINUS_TWO
SIGLIB_MINUS_ONE = _siglib_wrap.SIGLIB_MINUS_ONE
SIGLIB_MINUS_HALF = _siglib_wrap.SIGLIB_MINUS_HALF
SIGLIB_ZERO = _siglib_wrap.SIGLIB_ZERO
SIGLIB_QUARTER = _siglib_wrap.SIGLIB_QUARTER
SIGLIB_THIRD = _siglib_wrap.SIGLIB_THIRD
SIGLIB_HALF = _siglib_wrap.SIGLIB_HALF
SIGLIB_ONE = _siglib_wrap.SIGLIB_ONE
SIGLIB_ONE_AND_HALF = _siglib_wrap.SIGLIB_ONE_AND_HALF
SIGLIB_TWO = _siglib_wrap.SIGLIB_TWO
SIGLIB_THREE = _siglib_wrap.SIGLIB_THREE
SIGLIB_FOUR = _siglib_wrap.SIGLIB_FOUR
SIGLIB_FIVE = _siglib_wrap.SIGLIB_FIVE
SIGLIB_SIX = _siglib_wrap.SIGLIB_SIX
SIGLIB_SEVEN = _siglib_wrap.SIGLIB_SEVEN
SIGLIB_EIGHT = _siglib_wrap.SIGLIB_EIGHT
SIGLIB_NINE = _siglib_wrap.SIGLIB_NINE
SIGLIB_TEN = _siglib_wrap.SIGLIB_TEN
SIGLIB_SIXTEEN = _siglib_wrap.SIGLIB_SIXTEEN
SIGLIB_TWENTY = _siglib_wrap.SIGLIB_TWENTY
SIGLIB_FIFTY = _siglib_wrap.SIGLIB_FIFTY
SIGLIB_SIXTY_FOUR = _siglib_wrap.SIGLIB_SIXTY_FOUR
SIGLIB_ONE_HUNDRED = _siglib_wrap.SIGLIB_ONE_HUNDRED
SIGLIB_TWO_HUNDRED = _siglib_wrap.SIGLIB_TWO_HUNDRED
SIGLIB_THREE_SIXTY = _siglib_wrap.SIGLIB_THREE_SIXTY
SIGLIB_PI = _siglib_wrap.SIGLIB_PI
SIGLIB_TWO_PI = _siglib_wrap.SIGLIB_TWO_PI
SIGLIB_HALF_PI = _siglib_wrap.SIGLIB_HALF_PI
SIGLIB_QUARTER_PI = _siglib_wrap.SIGLIB_QUARTER_PI
SIGLIB_FOUR_PI = _siglib_wrap.SIGLIB_FOUR_PI
SIGLIB_INV_PI = _siglib_wrap.SIGLIB_INV_PI
SIGLIB_INV_TWO_PI = _siglib_wrap.SIGLIB_INV_TWO_PI
SIGLIB_SQRT_PI = _siglib_wrap.SIGLIB_SQRT_PI
SIGLIB_PI_SQUARED = _siglib_wrap.SIGLIB_PI_SQUARED
SIGLIB_INV_EIGHT = _siglib_wrap.SIGLIB_INV_EIGHT
SIGLIB_INV_SIXTEEN = _siglib_wrap.SIGLIB_INV_SIXTEEN
SIGLIB_SQRT_TWO = _siglib_wrap.SIGLIB_SQRT_TWO
SIGLIB_INV_SQRT_TWO = _siglib_wrap.SIGLIB_INV_SQRT_TWO
SIGLIB_INV_SQRT_TWO_PI = _siglib_wrap.SIGLIB_INV_SQRT_TWO_PI
SIGLIB_SQRT_HALF_LN2 = _siglib_wrap.SIGLIB_SQRT_HALF_LN2
SIGLIB_LN2 = _siglib_wrap.SIGLIB_LN2
SIGLIB_THREE_SIXTY_OVER_TWO_PI = _siglib_wrap.SIGLIB_THREE_SIXTY_OVER_TWO_PI
SIGLIB_TWO_PI_OVER_THREE_SIXTY = _siglib_wrap.SIGLIB_TWO_PI_OVER_THREE_SIXTY
SIGLIB_INV_LOG10_OF_2 = _siglib_wrap.SIGLIB_INV_LOG10_OF_2
SIGLIB_DEGREES_TO_RADIANS = _siglib_wrap.SIGLIB_DEGREES_TO_RADIANS
SIGLIB_RADIANS_TO_DEGREES = _siglib_wrap.SIGLIB_RADIANS_TO_DEGREES
class SLComplexRect_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLComplexRect_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLComplexRect_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _siglib_wrap.SLComplexRect_s_real_set
    __swig_getmethods__["real"] = _siglib_wrap.SLComplexRect_s_real_get
    if _newclass:
        real = _swig_property(_siglib_wrap.SLComplexRect_s_real_get, _siglib_wrap.SLComplexRect_s_real_set)
    __swig_setmethods__["imag"] = _siglib_wrap.SLComplexRect_s_imag_set
    __swig_getmethods__["imag"] = _siglib_wrap.SLComplexRect_s_imag_get
    if _newclass:
        imag = _swig_property(_siglib_wrap.SLComplexRect_s_imag_get, _siglib_wrap.SLComplexRect_s_imag_set)

    def __init__(self):
        this = _siglib_wrap.new_SLComplexRect_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLComplexRect_s
    __del__ = lambda self: None
SLComplexRect_s_swigregister = _siglib_wrap.SLComplexRect_s_swigregister
SLComplexRect_s_swigregister(SLComplexRect_s)

class SLComplexPolar_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLComplexPolar_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLComplexPolar_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magn"] = _siglib_wrap.SLComplexPolar_s_magn_set
    __swig_getmethods__["magn"] = _siglib_wrap.SLComplexPolar_s_magn_get
    if _newclass:
        magn = _swig_property(_siglib_wrap.SLComplexPolar_s_magn_get, _siglib_wrap.SLComplexPolar_s_magn_set)
    __swig_setmethods__["angle"] = _siglib_wrap.SLComplexPolar_s_angle_set
    __swig_getmethods__["angle"] = _siglib_wrap.SLComplexPolar_s_angle_get
    if _newclass:
        angle = _swig_property(_siglib_wrap.SLComplexPolar_s_angle_get, _siglib_wrap.SLComplexPolar_s_angle_set)

    def __init__(self):
        this = _siglib_wrap.new_SLComplexPolar_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLComplexPolar_s
    __del__ = lambda self: None
SLComplexPolar_s_swigregister = _siglib_wrap.SLComplexPolar_s_swigregister
SLComplexPolar_s_swigregister(SLComplexPolar_s)

class SLComplexRect16_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLComplexRect16_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLComplexRect16_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _siglib_wrap.SLComplexRect16_s_real_set
    __swig_getmethods__["real"] = _siglib_wrap.SLComplexRect16_s_real_get
    if _newclass:
        real = _swig_property(_siglib_wrap.SLComplexRect16_s_real_get, _siglib_wrap.SLComplexRect16_s_real_set)
    __swig_setmethods__["imag"] = _siglib_wrap.SLComplexRect16_s_imag_set
    __swig_getmethods__["imag"] = _siglib_wrap.SLComplexRect16_s_imag_get
    if _newclass:
        imag = _swig_property(_siglib_wrap.SLComplexRect16_s_imag_get, _siglib_wrap.SLComplexRect16_s_imag_set)

    def __init__(self):
        this = _siglib_wrap.new_SLComplexRect16_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLComplexRect16_s
    __del__ = lambda self: None
SLComplexRect16_s_swigregister = _siglib_wrap.SLComplexRect16_s_swigregister
SLComplexRect16_s_swigregister(SLComplexRect16_s)

class SLComplexPolar16_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLComplexPolar16_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLComplexPolar16_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magn"] = _siglib_wrap.SLComplexPolar16_s_magn_set
    __swig_getmethods__["magn"] = _siglib_wrap.SLComplexPolar16_s_magn_get
    if _newclass:
        magn = _swig_property(_siglib_wrap.SLComplexPolar16_s_magn_get, _siglib_wrap.SLComplexPolar16_s_magn_set)
    __swig_setmethods__["angle"] = _siglib_wrap.SLComplexPolar16_s_angle_set
    __swig_getmethods__["angle"] = _siglib_wrap.SLComplexPolar16_s_angle_get
    if _newclass:
        angle = _swig_property(_siglib_wrap.SLComplexPolar16_s_angle_get, _siglib_wrap.SLComplexPolar16_s_angle_set)

    def __init__(self):
        this = _siglib_wrap.new_SLComplexPolar16_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLComplexPolar16_s
    __del__ = lambda self: None
SLComplexPolar16_s_swigregister = _siglib_wrap.SLComplexPolar16_s_swigregister
SLComplexPolar16_s_swigregister(SLComplexPolar16_s)

class SLComplexRect32_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLComplexRect32_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLComplexRect32_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _siglib_wrap.SLComplexRect32_s_real_set
    __swig_getmethods__["real"] = _siglib_wrap.SLComplexRect32_s_real_get
    if _newclass:
        real = _swig_property(_siglib_wrap.SLComplexRect32_s_real_get, _siglib_wrap.SLComplexRect32_s_real_set)
    __swig_setmethods__["imag"] = _siglib_wrap.SLComplexRect32_s_imag_set
    __swig_getmethods__["imag"] = _siglib_wrap.SLComplexRect32_s_imag_get
    if _newclass:
        imag = _swig_property(_siglib_wrap.SLComplexRect32_s_imag_get, _siglib_wrap.SLComplexRect32_s_imag_set)

    def __init__(self):
        this = _siglib_wrap.new_SLComplexRect32_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLComplexRect32_s
    __del__ = lambda self: None
SLComplexRect32_s_swigregister = _siglib_wrap.SLComplexRect32_s_swigregister
SLComplexRect32_s_swigregister(SLComplexRect32_s)

class SLComplexPolar32_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLComplexPolar32_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLComplexPolar32_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magn"] = _siglib_wrap.SLComplexPolar32_s_magn_set
    __swig_getmethods__["magn"] = _siglib_wrap.SLComplexPolar32_s_magn_get
    if _newclass:
        magn = _swig_property(_siglib_wrap.SLComplexPolar32_s_magn_get, _siglib_wrap.SLComplexPolar32_s_magn_set)
    __swig_setmethods__["angle"] = _siglib_wrap.SLComplexPolar32_s_angle_set
    __swig_getmethods__["angle"] = _siglib_wrap.SLComplexPolar32_s_angle_get
    if _newclass:
        angle = _swig_property(_siglib_wrap.SLComplexPolar32_s_angle_get, _siglib_wrap.SLComplexPolar32_s_angle_set)

    def __init__(self):
        this = _siglib_wrap.new_SLComplexPolar32_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLComplexPolar32_s
    __del__ = lambda self: None
SLComplexPolar32_s_swigregister = _siglib_wrap.SLComplexPolar32_s_swigregister
SLComplexPolar32_s_swigregister(SLComplexPolar32_s)

class SLMicrophone_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLMicrophone_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLMicrophone_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xPos"] = _siglib_wrap.SLMicrophone_s_xPos_set
    __swig_getmethods__["xPos"] = _siglib_wrap.SLMicrophone_s_xPos_get
    if _newclass:
        xPos = _swig_property(_siglib_wrap.SLMicrophone_s_xPos_get, _siglib_wrap.SLMicrophone_s_xPos_set)
    __swig_setmethods__["yPos"] = _siglib_wrap.SLMicrophone_s_yPos_set
    __swig_getmethods__["yPos"] = _siglib_wrap.SLMicrophone_s_yPos_get
    if _newclass:
        yPos = _swig_property(_siglib_wrap.SLMicrophone_s_yPos_get, _siglib_wrap.SLMicrophone_s_yPos_set)
    __swig_setmethods__["delay"] = _siglib_wrap.SLMicrophone_s_delay_set
    __swig_getmethods__["delay"] = _siglib_wrap.SLMicrophone_s_delay_get
    if _newclass:
        delay = _swig_property(_siglib_wrap.SLMicrophone_s_delay_get, _siglib_wrap.SLMicrophone_s_delay_set)
    __swig_setmethods__["gain"] = _siglib_wrap.SLMicrophone_s_gain_set
    __swig_getmethods__["gain"] = _siglib_wrap.SLMicrophone_s_gain_get
    if _newclass:
        gain = _swig_property(_siglib_wrap.SLMicrophone_s_gain_get, _siglib_wrap.SLMicrophone_s_gain_set)

    def __init__(self):
        this = _siglib_wrap.new_SLMicrophone_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLMicrophone_s
    __del__ = lambda self: None
SLMicrophone_s_swigregister = _siglib_wrap.SLMicrophone_s_swigregister
SLMicrophone_s_swigregister(SLMicrophone_s)

class SLMicrophone16_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLMicrophone16_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLMicrophone16_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xPos"] = _siglib_wrap.SLMicrophone16_s_xPos_set
    __swig_getmethods__["xPos"] = _siglib_wrap.SLMicrophone16_s_xPos_get
    if _newclass:
        xPos = _swig_property(_siglib_wrap.SLMicrophone16_s_xPos_get, _siglib_wrap.SLMicrophone16_s_xPos_set)
    __swig_setmethods__["yPos"] = _siglib_wrap.SLMicrophone16_s_yPos_set
    __swig_getmethods__["yPos"] = _siglib_wrap.SLMicrophone16_s_yPos_get
    if _newclass:
        yPos = _swig_property(_siglib_wrap.SLMicrophone16_s_yPos_get, _siglib_wrap.SLMicrophone16_s_yPos_set)
    __swig_setmethods__["delay"] = _siglib_wrap.SLMicrophone16_s_delay_set
    __swig_getmethods__["delay"] = _siglib_wrap.SLMicrophone16_s_delay_get
    if _newclass:
        delay = _swig_property(_siglib_wrap.SLMicrophone16_s_delay_get, _siglib_wrap.SLMicrophone16_s_delay_set)
    __swig_setmethods__["gain"] = _siglib_wrap.SLMicrophone16_s_gain_set
    __swig_getmethods__["gain"] = _siglib_wrap.SLMicrophone16_s_gain_get
    if _newclass:
        gain = _swig_property(_siglib_wrap.SLMicrophone16_s_gain_get, _siglib_wrap.SLMicrophone16_s_gain_set)

    def __init__(self):
        this = _siglib_wrap.new_SLMicrophone16_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLMicrophone16_s
    __del__ = lambda self: None
SLMicrophone16_s_swigregister = _siglib_wrap.SLMicrophone16_s_swigregister
SLMicrophone16_s_swigregister(SLMicrophone16_s)

class SLMicrophone32_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLMicrophone32_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLMicrophone32_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xPos"] = _siglib_wrap.SLMicrophone32_s_xPos_set
    __swig_getmethods__["xPos"] = _siglib_wrap.SLMicrophone32_s_xPos_get
    if _newclass:
        xPos = _swig_property(_siglib_wrap.SLMicrophone32_s_xPos_get, _siglib_wrap.SLMicrophone32_s_xPos_set)
    __swig_setmethods__["yPos"] = _siglib_wrap.SLMicrophone32_s_yPos_set
    __swig_getmethods__["yPos"] = _siglib_wrap.SLMicrophone32_s_yPos_get
    if _newclass:
        yPos = _swig_property(_siglib_wrap.SLMicrophone32_s_yPos_get, _siglib_wrap.SLMicrophone32_s_yPos_set)
    __swig_setmethods__["delay"] = _siglib_wrap.SLMicrophone32_s_delay_set
    __swig_getmethods__["delay"] = _siglib_wrap.SLMicrophone32_s_delay_get
    if _newclass:
        delay = _swig_property(_siglib_wrap.SLMicrophone32_s_delay_get, _siglib_wrap.SLMicrophone32_s_delay_set)
    __swig_setmethods__["gain"] = _siglib_wrap.SLMicrophone32_s_gain_set
    __swig_getmethods__["gain"] = _siglib_wrap.SLMicrophone32_s_gain_get
    if _newclass:
        gain = _swig_property(_siglib_wrap.SLMicrophone32_s_gain_get, _siglib_wrap.SLMicrophone32_s_gain_set)

    def __init__(self):
        this = _siglib_wrap.new_SLMicrophone32_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siglib_wrap.delete_SLMicrophone32_s
    __del__ = lambda self: None
SLMicrophone32_s_swigregister = _siglib_wrap.SLMicrophone32_s_swigregister
SLMicrophone32_s_swigregister(SLMicrophone32_s)

SIGLIB_HANNING = _siglib_wrap.SIGLIB_HANNING
SIGLIB_HAMMING = _siglib_wrap.SIGLIB_HAMMING
SIGLIB_BLACKMAN = _siglib_wrap.SIGLIB_BLACKMAN
SIGLIB_BARTLETT_TRIANGLE_ZERO_END_POINTS = _siglib_wrap.SIGLIB_BARTLETT_TRIANGLE_ZERO_END_POINTS
SIGLIB_BARTLETT_TRIANGLE_NON_ZERO_END_POINTS = _siglib_wrap.SIGLIB_BARTLETT_TRIANGLE_NON_ZERO_END_POINTS
SIGLIB_KAISER = _siglib_wrap.SIGLIB_KAISER
SIGLIB_BMAN_HARRIS = _siglib_wrap.SIGLIB_BMAN_HARRIS
SIGLIB_RECTANGLE = _siglib_wrap.SIGLIB_RECTANGLE
SIGLIB_FLAT_TOP = _siglib_wrap.SIGLIB_FLAT_TOP
SIGLIB_SINE_WAVE = _siglib_wrap.SIGLIB_SINE_WAVE
SIGLIB_COS_WAVE = _siglib_wrap.SIGLIB_COS_WAVE
SIGLIB_WHITE_NOISE = _siglib_wrap.SIGLIB_WHITE_NOISE
SIGLIB_GAUSSIAN_NOISE = _siglib_wrap.SIGLIB_GAUSSIAN_NOISE
SIGLIB_CHIRP_LIN = _siglib_wrap.SIGLIB_CHIRP_LIN
SIGLIB_CHIRP_NL = _siglib_wrap.SIGLIB_CHIRP_NL
SIGLIB_SQUARE_WAVE = _siglib_wrap.SIGLIB_SQUARE_WAVE
SIGLIB_TRIANGLE_WAVE = _siglib_wrap.SIGLIB_TRIANGLE_WAVE
SIGLIB_IMPULSE = _siglib_wrap.SIGLIB_IMPULSE
SIGLIB_IMPULSE_STREAM = _siglib_wrap.SIGLIB_IMPULSE_STREAM
SIGLIB_STEP = _siglib_wrap.SIGLIB_STEP
SIGLIB_PN_SEQUENCE = _siglib_wrap.SIGLIB_PN_SEQUENCE
SIGLIB_DC_LEVEL = _siglib_wrap.SIGLIB_DC_LEVEL
SIGLIB_FILL = _siglib_wrap.SIGLIB_FILL
SIGLIB_ADD = _siglib_wrap.SIGLIB_ADD
SIGLIB_SIGNED_DATA = _siglib_wrap.SIGLIB_SIGNED_DATA
SIGLIB_UNSIGNED_DATA = _siglib_wrap.SIGLIB_UNSIGNED_DATA
SIGLIB_ECHO = _siglib_wrap.SIGLIB_ECHO
SIGLIB_REVERB = _siglib_wrap.SIGLIB_REVERB
SIGLIB_ROUND_UP = _siglib_wrap.SIGLIB_ROUND_UP
SIGLIB_ROUND_TO_NEAREST = _siglib_wrap.SIGLIB_ROUND_TO_NEAREST
SIGLIB_ROUND_DOWN = _siglib_wrap.SIGLIB_ROUND_DOWN
SIGLIB_ROUND_TO_ZERO = _siglib_wrap.SIGLIB_ROUND_TO_ZERO
SIGLIB_ROUND_AWAY_FROM_ZERO = _siglib_wrap.SIGLIB_ROUND_AWAY_FROM_ZERO
SIGLIB_SINGLE_SIDED_MODULO = _siglib_wrap.SIGLIB_SINGLE_SIDED_MODULO
SIGLIB_DOUBLE_SIDED_MODULO = _siglib_wrap.SIGLIB_DOUBLE_SIDED_MODULO
SIGLIB_CLIP_ABOVE = _siglib_wrap.SIGLIB_CLIP_ABOVE
SIGLIB_CLIP_BOTH = _siglib_wrap.SIGLIB_CLIP_BOTH
SIGLIB_CLIP_BELOW = _siglib_wrap.SIGLIB_CLIP_BELOW
SIGLIB_SINGLE_SIDED_THOLD = _siglib_wrap.SIGLIB_SINGLE_SIDED_THOLD
SIGLIB_DOUBLE_SIDED_THOLD = _siglib_wrap.SIGLIB_DOUBLE_SIDED_THOLD
SIGLIB_POSITIVE_LEVEL_CROSS = _siglib_wrap.SIGLIB_POSITIVE_LEVEL_CROSS
SIGLIB_NEGATIVE_LEVEL_CROSS = _siglib_wrap.SIGLIB_NEGATIVE_LEVEL_CROSS
SIGLIB_ALL_LEVEL_CROSS = _siglib_wrap.SIGLIB_ALL_LEVEL_CROSS
SIGLIB_ARB_FFT_DO_CZT = _siglib_wrap.SIGLIB_ARB_FFT_DO_CZT
SIGLIB_ARB_FFT_DO_FFT = _siglib_wrap.SIGLIB_ARB_FFT_DO_FFT
SIGLIB_NO_PARITY = _siglib_wrap.SIGLIB_NO_PARITY
SIGLIB_EVEN_PARITY = _siglib_wrap.SIGLIB_EVEN_PARITY
SIGLIB_ODD_PARITY = _siglib_wrap.SIGLIB_ODD_PARITY
SIGLIB_ELG_TRIGGER_START = _siglib_wrap.SIGLIB_ELG_TRIGGER_START
SIGLIB_ELG_TRIGGER_MIDDLE = _siglib_wrap.SIGLIB_ELG_TRIGGER_MIDDLE
SIGLIB_COSTAS_LOOP_MULTIPLY_LOOP = _siglib_wrap.SIGLIB_COSTAS_LOOP_MULTIPLY_LOOP
SIGLIB_COSTAS_LOOP_POLARITY_LOOP = _siglib_wrap.SIGLIB_COSTAS_LOOP_POLARITY_LOOP
SIGLIB_COSTAS_LOOP_HARD_LIMITED_LOOP = _siglib_wrap.SIGLIB_COSTAS_LOOP_HARD_LIMITED_LOOP
SIGLIB_BUTTERWORTH_IIR_NORM_COEFFS = _siglib_wrap.SIGLIB_BUTTERWORTH_IIR_NORM_COEFFS
SIGLIB_BESSEL_IIR_NORM_COEFFS = _siglib_wrap.SIGLIB_BESSEL_IIR_NORM_COEFFS
SIGLIB_EDGE_ENHANCEMENT = _siglib_wrap.SIGLIB_EDGE_ENHANCEMENT
SIGLIB_HORIZONTAL_EDGE = _siglib_wrap.SIGLIB_HORIZONTAL_EDGE
SIGLIB_VERTICAL_EDGE = _siglib_wrap.SIGLIB_VERTICAL_EDGE
SIGLIB_SIGNAL_COHERENT = _siglib_wrap.SIGLIB_SIGNAL_COHERENT
SIGLIB_SIGNAL_INCOHERENT = _siglib_wrap.SIGLIB_SIGNAL_INCOHERENT
SIGLIB_FIND_GREATER_THAN_ZERO = _siglib_wrap.SIGLIB_FIND_GREATER_THAN_ZERO
SIGLIB_FIND_GREATER_THAN_OR_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_GREATER_THAN_OR_EQUAL_TO_ZERO
SIGLIB_FIND_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_EQUAL_TO_ZERO
SIGLIB_FIND_LESS_THAN_ZERO = _siglib_wrap.SIGLIB_FIND_LESS_THAN_ZERO
SIGLIB_FIND_LESS_THAN_OR_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_LESS_THAN_OR_EQUAL_TO_ZERO
SIGLIB_FIND_NOT_EQUAL_TO_ZERO = _siglib_wrap.SIGLIB_FIND_NOT_EQUAL_TO_ZERO
SIGLIB_NOT_EQUAL = _siglib_wrap.SIGLIB_NOT_EQUAL
SIGLIB_EQUAL = _siglib_wrap.SIGLIB_EQUAL
SIGLIB_DEGLITCH_ABOVE = _siglib_wrap.SIGLIB_DEGLITCH_ABOVE
SIGLIB_DEGLITCH_BOTH = _siglib_wrap.SIGLIB_DEGLITCH_BOTH
SIGLIB_DEGLITCH_BELOW = _siglib_wrap.SIGLIB_DEGLITCH_BELOW
SIGLIB_ALIGN_EXTEND = _siglib_wrap.SIGLIB_ALIGN_EXTEND
SIGLIB_ALIGN_CROP = _siglib_wrap.SIGLIB_ALIGN_CROP

def SUF_SiglibVersion():
    return _siglib_wrap.SUF_SiglibVersion()
SUF_SiglibVersion = _siglib_wrap.SUF_SiglibVersion

def SUF_PrintArray(arg1, arg2):
    return _siglib_wrap.SUF_PrintArray(arg1, arg2)
SUF_PrintArray = _siglib_wrap.SUF_PrintArray

def SUF_PrintComplexArray(arg1, arg2, arg3):
    return _siglib_wrap.SUF_PrintComplexArray(arg1, arg2, arg3)
SUF_PrintComplexArray = _siglib_wrap.SUF_PrintComplexArray

def SUF_PrintMatrix(arg1, arg2, arg3):
    return _siglib_wrap.SUF_PrintMatrix(arg1, arg2, arg3)
SUF_PrintMatrix = _siglib_wrap.SUF_PrintMatrix

def SUF_PrintPolar(arg1):
    return _siglib_wrap.SUF_PrintPolar(arg1)
SUF_PrintPolar = _siglib_wrap.SUF_PrintPolar

def SUF_PrintRectangular(arg1):
    return _siglib_wrap.SUF_PrintRectangular(arg1)
SUF_PrintRectangular = _siglib_wrap.SUF_PrintRectangular

def SUF_PrintIIRCoefficients(arg1, arg2):
    return _siglib_wrap.SUF_PrintIIRCoefficients(arg1, arg2)
SUF_PrintIIRCoefficients = _siglib_wrap.SUF_PrintIIRCoefficients

def SUF_ClearDebugfprintf():
    return _siglib_wrap.SUF_ClearDebugfprintf()
SUF_ClearDebugfprintf = _siglib_wrap.SUF_ClearDebugfprintf

def SUF_Debugfprintf(ArgumentType):
    return _siglib_wrap.SUF_Debugfprintf(ArgumentType)
SUF_Debugfprintf = _siglib_wrap.SUF_Debugfprintf

def SUF_Debugvfprintf(format, arg2):
    return _siglib_wrap.SUF_Debugvfprintf(format, arg2)
SUF_Debugvfprintf = _siglib_wrap.SUF_Debugvfprintf

def SUF_DebugPrintArray(arg1, arg2):
    return _siglib_wrap.SUF_DebugPrintArray(arg1, arg2)
SUF_DebugPrintArray = _siglib_wrap.SUF_DebugPrintArray

def SUF_DebugPrintComplexArray(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DebugPrintComplexArray(arg1, arg2, arg3)
SUF_DebugPrintComplexArray = _siglib_wrap.SUF_DebugPrintComplexArray

def SUF_DebugPrintMatrix(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DebugPrintMatrix(arg1, arg2, arg3)
SUF_DebugPrintMatrix = _siglib_wrap.SUF_DebugPrintMatrix

def SUF_DebugPrintPolar(arg1):
    return _siglib_wrap.SUF_DebugPrintPolar(arg1)
SUF_DebugPrintPolar = _siglib_wrap.SUF_DebugPrintPolar

def SUF_DebugPrintRectangular(arg1):
    return _siglib_wrap.SUF_DebugPrintRectangular(arg1)
SUF_DebugPrintRectangular = _siglib_wrap.SUF_DebugPrintRectangular

def SUF_DebugPrintIIRCoefficients(arg1, arg2):
    return _siglib_wrap.SUF_DebugPrintIIRCoefficients(arg1, arg2)
SUF_DebugPrintIIRCoefficients = _siglib_wrap.SUF_DebugPrintIIRCoefficients

def SUF_DebugPrintCount(String):
    return _siglib_wrap.SUF_DebugPrintCount(String)
SUF_DebugPrintCount = _siglib_wrap.SUF_DebugPrintCount

def SUF_StrError(ErrNo):
    return _siglib_wrap.SUF_StrError(ErrNo)
SUF_StrError = _siglib_wrap.SUF_StrError

def SIF_Fft(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fft(arg1, arg2, arg3)
SIF_Fft = _siglib_wrap.SIF_Fft

def SDA_Rfft(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Rfft(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Rfft = _siglib_wrap.SDA_Rfft

def SDA_Cfft(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Cfft(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Cfft = _siglib_wrap.SDA_Cfft

def SDA_Cifft(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Cifft(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Cifft = _siglib_wrap.SDA_Cifft

def SDA_BitReverseReorder(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_BitReverseReorder(arg1, arg2, arg3, arg4)
SDA_BitReverseReorder = _siglib_wrap.SDA_BitReverseReorder

def SDA_IndexBitReverseReorder(arg1, arg2, arg3):
    return _siglib_wrap.SDA_IndexBitReverseReorder(arg1, arg2, arg3)
SDA_IndexBitReverseReorder = _siglib_wrap.SDA_IndexBitReverseReorder

def SIF_FastBitReverseReorder(arg1, arg2):
    return _siglib_wrap.SIF_FastBitReverseReorder(arg1, arg2)
SIF_FastBitReverseReorder = _siglib_wrap.SIF_FastBitReverseReorder

def SDA_RealRealCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_RealRealCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_RealRealCepstrum = _siglib_wrap.SDA_RealRealCepstrum

def SDA_RealComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_RealComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_RealComplexCepstrum = _siglib_wrap.SDA_RealComplexCepstrum

def SDA_ComplexComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ComplexComplexCepstrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_ComplexComplexCepstrum = _siglib_wrap.SDA_ComplexComplexCepstrum

def SIF_FftTone(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FftTone(arg1, arg2, arg3)
SIF_FftTone = _siglib_wrap.SIF_FftTone

def SDA_RfftTone(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_RfftTone(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_RfftTone = _siglib_wrap.SDA_RfftTone

def SIF_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SIF_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SIF_ZoomFft = _siglib_wrap.SIF_ZoomFft

def SDA_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31):
    return _siglib_wrap.SDA_ZoomFft(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31)
SDA_ZoomFft = _siglib_wrap.SDA_ZoomFft

def SIF_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SIF_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SIF_ZoomFftSimple = _siglib_wrap.SIF_ZoomFftSimple

def SDA_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_ZoomFftSimple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
SDA_ZoomFftSimple = _siglib_wrap.SDA_ZoomFftSimple

def SIF_FdHilbert(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FdHilbert(arg1, arg2, arg3, arg4)
SIF_FdHilbert = _siglib_wrap.SIF_FdHilbert

def SDA_FdHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_FdHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_FdHilbert = _siglib_wrap.SDA_FdHilbert

def SIF_FdAnalytic(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FdAnalytic(arg1, arg2, arg3, arg4)
SIF_FdAnalytic = _siglib_wrap.SIF_FdAnalytic

def SDA_FdAnalytic(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_FdAnalytic(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_FdAnalytic = _siglib_wrap.SDA_FdAnalytic

def SDA_InstantFreq(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_InstantFreq(arg1, arg2, arg3, arg4)
SDA_InstantFreq = _siglib_wrap.SDA_InstantFreq

def SDA_Rft(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Rft(arg1, arg2, arg3, arg4)
SDA_Rft = _siglib_wrap.SDA_Rft

def SDA_Rift(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Rift(arg1, arg2, arg3, arg4)
SDA_Rift = _siglib_wrap.SDA_Rift

def SDA_Cft(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Cft(arg1, arg2, arg3, arg4, arg5)
SDA_Cft = _siglib_wrap.SDA_Cft

def SDA_Cift(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Cift(arg1, arg2, arg3, arg4, arg5)
SDA_Cift = _siglib_wrap.SDA_Cift

def SDA_FftShift(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FftShift(arg1, arg2, arg3)
SDA_FftShift = _siglib_wrap.SDA_FftShift

def SDA_CfftShift(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_CfftShift(arg1, arg2, arg3, arg4, arg5)
SDA_CfftShift = _siglib_wrap.SDA_CfftShift

def SDA_FftExtend(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FftExtend(arg1, arg2, arg3, arg4)
SDA_FftExtend = _siglib_wrap.SDA_FftExtend

def SDA_CfftExtend(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CfftExtend(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_CfftExtend = _siglib_wrap.SDA_CfftExtend

def SIF_FftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SIF_FftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
SIF_FftArb = _siglib_wrap.SIF_FftArb

def SUF_FftArbAllocLength(arg1):
    return _siglib_wrap.SUF_FftArbAllocLength(arg1)
SUF_FftArbAllocLength = _siglib_wrap.SUF_FftArbAllocLength

def SDA_RfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_RfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
SDA_RfftArb = _siglib_wrap.SDA_RfftArb

def SDA_CfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_CfftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SDA_CfftArb = _siglib_wrap.SDA_CfftArb

def SDA_CifftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_CifftArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDA_CifftArb = _siglib_wrap.SDA_CifftArb

def SIF_FastAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FastAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4)
SIF_FastAutoCrossPowerSpectrum = _siglib_wrap.SIF_FastAutoCrossPowerSpectrum

def SDA_FastAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FastAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_FastAutoPowerSpectrum = _siglib_wrap.SDA_FastAutoPowerSpectrum

def SDA_FastCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FastCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_FastCrossPowerSpectrum = _siglib_wrap.SDA_FastCrossPowerSpectrum

def SIF_ArbAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SIF_ArbAutoCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
SIF_ArbAutoCrossPowerSpectrum = _siglib_wrap.SIF_ArbAutoCrossPowerSpectrum

def SDA_ArbAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_ArbAutoPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDA_ArbAutoPowerSpectrum = _siglib_wrap.SDA_ArbAutoPowerSpectrum

def SDA_ArbCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_ArbCrossPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SDA_ArbCrossPowerSpectrum = _siglib_wrap.SDA_ArbCrossPowerSpectrum

def SIF_WelchPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIF_WelchPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SIF_WelchPowerSpectrum = _siglib_wrap.SIF_WelchPowerSpectrum

def SDA_WelchRealPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_WelchRealPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
SDA_WelchRealPowerSpectrum = _siglib_wrap.SDA_WelchRealPowerSpectrum

def SDA_WelchComplexPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_WelchComplexPowerSpectrum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDA_WelchComplexPowerSpectrum = _siglib_wrap.SDA_WelchComplexPowerSpectrum

def SIF_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4)
SIF_MagnitudeSquaredCoherence = _siglib_wrap.SIF_MagnitudeSquaredCoherence

def SDA_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_MagnitudeSquaredCoherence(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_MagnitudeSquaredCoherence = _siglib_wrap.SDA_MagnitudeSquaredCoherence

def SIF_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIF_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SIF_FirOverlapAdd = _siglib_wrap.SIF_FirOverlapAdd

def SDA_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_FirOverlapAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_FirOverlapAdd = _siglib_wrap.SDA_FirOverlapAdd

def SIF_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIF_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SIF_FirOverlapSave = _siglib_wrap.SIF_FirOverlapSave

def SDA_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_FirOverlapSave(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_FirOverlapSave = _siglib_wrap.SDA_FirOverlapSave

def SIF_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SIF_FftConvolvePre = _siglib_wrap.SIF_FftConvolvePre

def SDA_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftConvolvePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_FftConvolvePre = _siglib_wrap.SDA_FftConvolvePre

def SDA_FftConvolveArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftConvolveArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_FftConvolveArb = _siglib_wrap.SDA_FftConvolveArb

def SIF_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SIF_FftCorrelatePre = _siglib_wrap.SIF_FftCorrelatePre

def SDA_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftCorrelatePre(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_FftCorrelatePre = _siglib_wrap.SDA_FftCorrelatePre

def SDA_FftCorrelateArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_FftCorrelateArb(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_FftCorrelateArb = _siglib_wrap.SDA_FftCorrelateArb

def SIF_Czt(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SIF_Czt(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
SIF_Czt = _siglib_wrap.SIF_Czt

def SIF_Awn(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_Awn(arg1, arg2, arg3, arg4, arg5, arg6)
SIF_Awn = _siglib_wrap.SIF_Awn

def SIF_Vl(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_Vl(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SIF_Vl = _siglib_wrap.SIF_Vl

def SIF_Wm(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_Wm(arg1, arg2, arg3, arg4, arg5)
SIF_Wm = _siglib_wrap.SIF_Wm

def SIF_Window(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Window(arg1, arg2, arg3, arg4)
SIF_Window = _siglib_wrap.SIF_Window

def SIF_TableTopWindow(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_TableTopWindow(arg1, arg2, arg3, arg4, arg5)
SIF_TableTopWindow = _siglib_wrap.SIF_TableTopWindow

def SDA_Window(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Window(arg1, arg2, arg3, arg4)
SDA_Window = _siglib_wrap.SDA_Window

def SDA_ComplexWindow(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ComplexWindow(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_ComplexWindow = _siglib_wrap.SDA_ComplexWindow

def SDA_WindowInverseCoherentGain(arg1, arg2):
    return _siglib_wrap.SDA_WindowInverseCoherentGain(arg1, arg2)
SDA_WindowInverseCoherentGain = _siglib_wrap.SDA_WindowInverseCoherentGain

def SDS_I0Bessel(arg1):
    return _siglib_wrap.SDS_I0Bessel(arg1)
SDS_I0Bessel = _siglib_wrap.SDS_I0Bessel

def SIF_Fir(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fir(arg1, arg2, arg3)
SIF_Fir = _siglib_wrap.SIF_Fir

def SDS_Fir(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Fir(arg1, arg2, arg3, arg4, arg5)
SDS_Fir = _siglib_wrap.SDS_Fir

def SDA_Fir(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Fir(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Fir = _siglib_wrap.SDA_Fir

def SDS_FirAddSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FirAddSample(arg1, arg2, arg3, arg4)
SDS_FirAddSample = _siglib_wrap.SDS_FirAddSample

def SDA_FirAddSamples(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FirAddSamples(arg1, arg2, arg3, arg4, arg5)
SDA_FirAddSamples = _siglib_wrap.SDA_FirAddSamples

def SIF_Comb(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Comb(arg1, arg2, arg3, arg4)
SIF_Comb = _siglib_wrap.SIF_Comb

def SDS_Comb(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Comb(arg1, arg2, arg3, arg4, arg5)
SDS_Comb = _siglib_wrap.SDS_Comb

def SDA_Comb(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Comb(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Comb = _siglib_wrap.SDA_Comb

def SIF_FirComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirComplex(arg1, arg2, arg3, arg4)
SIF_FirComplex = _siglib_wrap.SIF_FirComplex

def SDS_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDS_FirComplex = _siglib_wrap.SDS_FirComplex

def SDA_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _siglib_wrap.SDA_FirComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
SDA_FirComplex = _siglib_wrap.SDA_FirComplex

def SIF_FirWithStore(arg1, arg2):
    return _siglib_wrap.SIF_FirWithStore(arg1, arg2)
SIF_FirWithStore = _siglib_wrap.SIF_FirWithStore

def SDS_FirWithStore(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FirWithStore(arg1, arg2, arg3, arg4)
SDS_FirWithStore = _siglib_wrap.SDS_FirWithStore

def SDA_FirWithStore(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FirWithStore(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_FirWithStore = _siglib_wrap.SDA_FirWithStore

def SIF_FirComplexWithStore(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FirComplexWithStore(arg1, arg2, arg3)
SIF_FirComplexWithStore = _siglib_wrap.SIF_FirComplexWithStore

def SDS_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDS_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDS_FirComplexWithStore = _siglib_wrap.SDS_FirComplexWithStore

def SDA_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_FirComplexWithStore(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_FirComplexWithStore = _siglib_wrap.SDA_FirComplexWithStore

def SDS_FirWithStoreAddSample(arg1, arg2, arg3):
    return _siglib_wrap.SDS_FirWithStoreAddSample(arg1, arg2, arg3)
SDS_FirWithStoreAddSample = _siglib_wrap.SDS_FirWithStoreAddSample

def SDA_FirWithStoreAddSamples(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FirWithStoreAddSamples(arg1, arg2, arg3, arg4)
SDA_FirWithStoreAddSamples = _siglib_wrap.SDA_FirWithStoreAddSamples

def SIF_FirExtendedArray(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_FirExtendedArray(arg1, arg2, arg3, arg4, arg5)
SIF_FirExtendedArray = _siglib_wrap.SIF_FirExtendedArray

def SDS_FirExtendedArray(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_FirExtendedArray(arg1, arg2, arg3, arg4, arg5)
SDS_FirExtendedArray = _siglib_wrap.SDS_FirExtendedArray

def SDA_FirExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FirExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_FirExtendedArray = _siglib_wrap.SDA_FirExtendedArray

def SIF_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SIF_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SIF_FirComplexExtendedArray = _siglib_wrap.SIF_FirComplexExtendedArray

def SDS_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDS_FirComplexExtendedArray = _siglib_wrap.SDS_FirComplexExtendedArray

def SDA_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _siglib_wrap.SDA_FirComplexExtendedArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
SDA_FirComplexExtendedArray = _siglib_wrap.SDA_FirComplexExtendedArray

def SDS_FirExtendedArrayAddSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FirExtendedArrayAddSample(arg1, arg2, arg3, arg4)
SDS_FirExtendedArrayAddSample = _siglib_wrap.SDS_FirExtendedArrayAddSample

def SDA_FirExtendedArrayAddSamples(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FirExtendedArrayAddSamples(arg1, arg2, arg3, arg4, arg5)
SDA_FirExtendedArrayAddSamples = _siglib_wrap.SDA_FirExtendedArrayAddSamples

def SIF_FirLowPassFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirLowPassFilter(arg1, arg2, arg3, arg4)
SIF_FirLowPassFilter = _siglib_wrap.SIF_FirLowPassFilter

def SIF_FirHighPassFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirHighPassFilter(arg1, arg2, arg3, arg4)
SIF_FirHighPassFilter = _siglib_wrap.SIF_FirHighPassFilter

def SIF_FirBandPassFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_FirBandPassFilter(arg1, arg2, arg3, arg4, arg5)
SIF_FirBandPassFilter = _siglib_wrap.SIF_FirBandPassFilter

def SIF_FirLowPassFilterWindow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirLowPassFilterWindow(arg1, arg2, arg3, arg4)
SIF_FirLowPassFilterWindow = _siglib_wrap.SIF_FirLowPassFilterWindow

def SIF_FirHighPassFilterWindow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FirHighPassFilterWindow(arg1, arg2, arg3, arg4)
SIF_FirHighPassFilterWindow = _siglib_wrap.SIF_FirHighPassFilterWindow

def SIF_FirBandPassFilterWindow(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_FirBandPassFilterWindow(arg1, arg2, arg3, arg4, arg5)
SIF_FirBandPassFilterWindow = _siglib_wrap.SIF_FirBandPassFilterWindow

def SUF_FirKaiserApproximation(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_FirKaiserApproximation(arg1, arg2, arg3, arg4, arg5)
SUF_FirKaiserApproximation = _siglib_wrap.SUF_FirKaiserApproximation

def SIF_FirMatchedFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FirMatchedFilter(arg1, arg2, arg3)
SIF_FirMatchedFilter = _siglib_wrap.SIF_FirMatchedFilter

def SDA_FirFilterInverseCoherentGain(arg1, arg2):
    return _siglib_wrap.SDA_FirFilterInverseCoherentGain(arg1, arg2)
SDA_FirFilterInverseCoherentGain = _siglib_wrap.SDA_FirFilterInverseCoherentGain

def SIF_TappedDelayLine(arg1, arg2, arg3):
    return _siglib_wrap.SIF_TappedDelayLine(arg1, arg2, arg3)
SIF_TappedDelayLine = _siglib_wrap.SIF_TappedDelayLine

def SDS_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDS_TappedDelayLine = _siglib_wrap.SDS_TappedDelayLine

def SDA_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_TappedDelayLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_TappedDelayLine = _siglib_wrap.SDA_TappedDelayLine

def SIF_TappedDelayLineComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_TappedDelayLineComplex(arg1, arg2, arg3, arg4)
SIF_TappedDelayLineComplex = _siglib_wrap.SIF_TappedDelayLineComplex

def SDS_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDS_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDS_TappedDelayLineComplex = _siglib_wrap.SDS_TappedDelayLineComplex

def SDA_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_TappedDelayLineComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_TappedDelayLineComplex = _siglib_wrap.SDA_TappedDelayLineComplex

def SIF_TappedDelayLineIQ(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_TappedDelayLineIQ(arg1, arg2, arg3, arg4)
SIF_TappedDelayLineIQ = _siglib_wrap.SIF_TappedDelayLineIQ

def SDS_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDS_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDS_TappedDelayLineIQ = _siglib_wrap.SDS_TappedDelayLineIQ

def SDA_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_TappedDelayLineIQ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_TappedDelayLineIQ = _siglib_wrap.SDA_TappedDelayLineIQ

def SIF_FirPolyPhaseGenerate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_FirPolyPhaseGenerate(arg1, arg2, arg3, arg4, arg5, arg6)
SIF_FirPolyPhaseGenerate = _siglib_wrap.SIF_FirPolyPhaseGenerate

def SIF_Iir(arg1, arg2):
    return _siglib_wrap.SIF_Iir(arg1, arg2)
SIF_Iir = _siglib_wrap.SIF_Iir

def SDS_Iir(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Iir(arg1, arg2, arg3, arg4)
SDS_Iir = _siglib_wrap.SDS_Iir

def SDA_Iir(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Iir(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Iir = _siglib_wrap.SDA_Iir

def SDS_IirMac(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_IirMac(arg1, arg2, arg3, arg4)
SDS_IirMac = _siglib_wrap.SDS_IirMac

def SDA_IirMac(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirMac(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_IirMac = _siglib_wrap.SDA_IirMac

def SIF_IirOrderN(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirOrderN(arg1, arg2, arg3)
SIF_IirOrderN = _siglib_wrap.SIF_IirOrderN

def SDS_IirOrderN(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_IirOrderN(arg1, arg2, arg3, arg4, arg5)
SDS_IirOrderN = _siglib_wrap.SDS_IirOrderN

def SDA_IirOrderN(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_IirOrderN(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_IirOrderN = _siglib_wrap.SDA_IirOrderN

def SIF_IirNc(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNc(arg1, arg2, arg3)
SIF_IirNc = _siglib_wrap.SIF_IirNc

def SDA_IirNc(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_IirNc(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_IirNc = _siglib_wrap.SDA_IirNc

def SDA_BilinearTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_BilinearTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_BilinearTransform = _siglib_wrap.SDA_BilinearTransform

def SDS_PreWarp(arg1, arg2):
    return _siglib_wrap.SDS_PreWarp(arg1, arg2)
SDS_PreWarp = _siglib_wrap.SDS_PreWarp

def SDA_MatchedZTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_MatchedZTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_MatchedZTransform = _siglib_wrap.SDA_MatchedZTransform

def SDA_IirZplaneToCoeffs(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IirZplaneToCoeffs(arg1, arg2, arg3, arg4, arg5)
SDA_IirZplaneToCoeffs = _siglib_wrap.SDA_IirZplaneToCoeffs

def SDA_IirZplanePolarToCoeffs(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IirZplanePolarToCoeffs(arg1, arg2, arg3, arg4, arg5)
SDA_IirZplanePolarToCoeffs = _siglib_wrap.SDA_IirZplanePolarToCoeffs

def SDA_IirZplaneLpfToLpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_IirZplaneLpfToLpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_IirZplaneLpfToLpf = _siglib_wrap.SDA_IirZplaneLpfToLpf

def SDA_IirZplaneLpfToHpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_IirZplaneLpfToHpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_IirZplaneLpfToHpf = _siglib_wrap.SDA_IirZplaneLpfToHpf

def SDA_IirZplaneLpfToBpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_IirZplaneLpfToBpf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_IirZplaneLpfToBpf = _siglib_wrap.SDA_IirZplaneLpfToBpf

def SDA_IirZplaneLpfToBsf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_IirZplaneLpfToBsf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_IirZplaneLpfToBsf = _siglib_wrap.SDA_IirZplaneLpfToBsf

def SDA_IirModifyFilterGain(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IirModifyFilterGain(arg1, arg2, arg3, arg4, arg5)
SDA_IirModifyFilterGain = _siglib_wrap.SDA_IirModifyFilterGain

def SIF_IirLowPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirLowPassFilter(arg1, arg2, arg3)
SIF_IirLowPassFilter = _siglib_wrap.SIF_IirLowPassFilter

def SIF_IirHighPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirHighPassFilter(arg1, arg2, arg3)
SIF_IirHighPassFilter = _siglib_wrap.SIF_IirHighPassFilter

def SIF_IirAllPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirAllPassFilter(arg1, arg2, arg3)
SIF_IirAllPassFilter = _siglib_wrap.SIF_IirAllPassFilter

def SIF_IirBandPassFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirBandPassFilter(arg1, arg2, arg3)
SIF_IirBandPassFilter = _siglib_wrap.SIF_IirBandPassFilter

def SIF_IirNotchFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNotchFilter(arg1, arg2, arg3)
SIF_IirNotchFilter = _siglib_wrap.SIF_IirNotchFilter

def SIF_IirPeakingFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirPeakingFilter(arg1, arg2, arg3, arg4)
SIF_IirPeakingFilter = _siglib_wrap.SIF_IirPeakingFilter

def SIF_IirLowShelfFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirLowShelfFilter(arg1, arg2, arg3, arg4)
SIF_IirLowShelfFilter = _siglib_wrap.SIF_IirLowShelfFilter

def SIF_IirHighShelfFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirHighShelfFilter(arg1, arg2, arg3, arg4)
SIF_IirHighShelfFilter = _siglib_wrap.SIF_IirHighShelfFilter

def SDS_IirRemoveDC(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_IirRemoveDC(arg1, arg2, arg3, arg4)
SDS_IirRemoveDC = _siglib_wrap.SDS_IirRemoveDC

def SDA_IirRemoveDC(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirRemoveDC(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_IirRemoveDC = _siglib_wrap.SDA_IirRemoveDC

def SIF_OnePole(arg1):
    return _siglib_wrap.SIF_OnePole(arg1)
SIF_OnePole = _siglib_wrap.SIF_OnePole

def SDS_OnePole(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePole(arg1, arg2, arg3)
SDS_OnePole = _siglib_wrap.SDS_OnePole

def SDA_OnePole(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePole(arg1, arg2, arg3, arg4, arg5)
SDA_OnePole = _siglib_wrap.SDA_OnePole

def SDS_OnePoleNormalized(arg1, arg2, arg3):
    return _siglib_wrap.SDS_OnePoleNormalized(arg1, arg2, arg3)
SDS_OnePoleNormalized = _siglib_wrap.SDS_OnePoleNormalized

def SDA_OnePoleNormalized(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePoleNormalized(arg1, arg2, arg3, arg4, arg5)
SDA_OnePoleNormalized = _siglib_wrap.SDA_OnePoleNormalized

def SDA_OnePolePerSample(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OnePolePerSample(arg1, arg2, arg3, arg4, arg5)
SDA_OnePolePerSample = _siglib_wrap.SDA_OnePolePerSample

def SDS_OnePoleTimeConstantToFilterCoeff(arg1, arg2):
    return _siglib_wrap.SDS_OnePoleTimeConstantToFilterCoeff(arg1, arg2)
SDS_OnePoleTimeConstantToFilterCoeff = _siglib_wrap.SDS_OnePoleTimeConstantToFilterCoeff

def SDS_OnePoleCutOffFrequencyToFilterCoeff(arg1, arg2):
    return _siglib_wrap.SDS_OnePoleCutOffFrequencyToFilterCoeff(arg1, arg2)
SDS_OnePoleCutOffFrequencyToFilterCoeff = _siglib_wrap.SDS_OnePoleCutOffFrequencyToFilterCoeff

def SIF_AllPole(arg1, arg2, arg3):
    return _siglib_wrap.SIF_AllPole(arg1, arg2, arg3)
SIF_AllPole = _siglib_wrap.SIF_AllPole

def SDS_AllPole(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_AllPole(arg1, arg2, arg3, arg4, arg5)
SDS_AllPole = _siglib_wrap.SDS_AllPole

def SDA_AllPole(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AllPole(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_AllPole = _siglib_wrap.SDA_AllPole

def SDA_ZDomainCoefficientReorg(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ZDomainCoefficientReorg(arg1, arg2, arg3, arg4)
SDA_ZDomainCoefficientReorg = _siglib_wrap.SDA_ZDomainCoefficientReorg

def SIF_IirNotchFilter2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_IirNotchFilter2(arg1, arg2, arg3, arg4)
SIF_IirNotchFilter2 = _siglib_wrap.SIF_IirNotchFilter2

def SIF_IirNormalizedCoefficients(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNormalizedCoefficients(arg1, arg2, arg3)
SIF_IirNormalizedCoefficients = _siglib_wrap.SIF_IirNormalizedCoefficients

def SIF_IirNormalizedSPlaneCoefficients(arg1, arg2, arg3):
    return _siglib_wrap.SIF_IirNormalizedSPlaneCoefficients(arg1, arg2, arg3)
SIF_IirNormalizedSPlaneCoefficients = _siglib_wrap.SIF_IirNormalizedSPlaneCoefficients

def SDA_TranslateSPlaneCutOffFrequency(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_TranslateSPlaneCutOffFrequency(arg1, arg2, arg3, arg4)
SDA_TranslateSPlaneCutOffFrequency = _siglib_wrap.SDA_TranslateSPlaneCutOffFrequency

def SDA_IirLpLpShift(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirLpLpShift(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_IirLpLpShift = _siglib_wrap.SDA_IirLpLpShift

def SDA_IirLpHpShift(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_IirLpHpShift(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_IirLpHpShift = _siglib_wrap.SDA_IirLpHpShift

def SIF_Iir2PoleLpf(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Iir2PoleLpf(arg1, arg2, arg3, arg4)
SIF_Iir2PoleLpf = _siglib_wrap.SIF_Iir2PoleLpf

def SDS_Iir2Pole(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Iir2Pole(arg1, arg2, arg3)
SDS_Iir2Pole = _siglib_wrap.SDS_Iir2Pole

def SDA_Iir2Pole(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Iir2Pole(arg1, arg2, arg3, arg4, arg5)
SDA_Iir2Pole = _siglib_wrap.SDA_Iir2Pole

def SDA_IirNegateAlphaCoeffs(arg1, arg2, arg3):
    return _siglib_wrap.SDA_IirNegateAlphaCoeffs(arg1, arg2, arg3)
SDA_IirNegateAlphaCoeffs = _siglib_wrap.SDA_IirNegateAlphaCoeffs

def SDA_Integrate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Integrate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Integrate = _siglib_wrap.SDA_Integrate

def SDA_Differentiate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Differentiate(arg1, arg2, arg3, arg4)
SDA_Differentiate = _siglib_wrap.SDA_Differentiate

def SIF_LeakyIntegrator(arg1):
    return _siglib_wrap.SIF_LeakyIntegrator(arg1)
SIF_LeakyIntegrator = _siglib_wrap.SIF_LeakyIntegrator

def SDS_LeakyIntegrator1(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LeakyIntegrator1(arg1, arg2, arg3, arg4)
SDS_LeakyIntegrator1 = _siglib_wrap.SDS_LeakyIntegrator1

def SDS_LeakyIntegrator2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LeakyIntegrator2(arg1, arg2, arg3, arg4)
SDS_LeakyIntegrator2 = _siglib_wrap.SDS_LeakyIntegrator2

def SIF_HilbertTransformer(arg1, arg2):
    return _siglib_wrap.SIF_HilbertTransformer(arg1, arg2)
SIF_HilbertTransformer = _siglib_wrap.SIF_HilbertTransformer

def SIF_GoertzelFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_GoertzelFilter(arg1, arg2, arg3)
SIF_GoertzelFilter = _siglib_wrap.SIF_GoertzelFilter

def SDA_GoertzelFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_GoertzelFilter(arg1, arg2, arg3, arg4, arg5)
SDA_GoertzelFilter = _siglib_wrap.SDA_GoertzelFilter

def SDS_GoertzelFilter(arg1, arg2, arg3):
    return _siglib_wrap.SDS_GoertzelFilter(arg1, arg2, arg3)
SDS_GoertzelFilter = _siglib_wrap.SDS_GoertzelFilter

def SIF_GoertzelDetect(arg1, arg2):
    return _siglib_wrap.SIF_GoertzelDetect(arg1, arg2)
SIF_GoertzelDetect = _siglib_wrap.SIF_GoertzelDetect

def SDA_GoertzelDetect(arg1, arg2, arg3):
    return _siglib_wrap.SDA_GoertzelDetect(arg1, arg2, arg3)
SDA_GoertzelDetect = _siglib_wrap.SDA_GoertzelDetect

def SIF_GoertzelDetectComplex(arg1, arg2):
    return _siglib_wrap.SIF_GoertzelDetectComplex(arg1, arg2)
SIF_GoertzelDetectComplex = _siglib_wrap.SIF_GoertzelDetectComplex

def SDA_GoertzelDetectComplex(arg1, arg2, arg3):
    return _siglib_wrap.SDA_GoertzelDetectComplex(arg1, arg2, arg3)
SDA_GoertzelDetectComplex = _siglib_wrap.SDA_GoertzelDetectComplex

def SIF_GaussianFilter(arg1, arg2, arg3):
    return _siglib_wrap.SIF_GaussianFilter(arg1, arg2, arg3)
SIF_GaussianFilter = _siglib_wrap.SIF_GaussianFilter

def SIF_GaussianFilter2(arg1, arg2, arg3):
    return _siglib_wrap.SIF_GaussianFilter2(arg1, arg2, arg3)
SIF_GaussianFilter2 = _siglib_wrap.SIF_GaussianFilter2

def SIF_RaisedCosineFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_RaisedCosineFilter(arg1, arg2, arg3, arg4)
SIF_RaisedCosineFilter = _siglib_wrap.SIF_RaisedCosineFilter

def SIF_RootRaisedCosineFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_RootRaisedCosineFilter(arg1, arg2, arg3, arg4)
SIF_RootRaisedCosineFilter = _siglib_wrap.SIF_RootRaisedCosineFilter

def SDS_ZTransform(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_ZTransform(arg1, arg2, arg3, arg4, arg5)
SDS_ZTransform = _siglib_wrap.SDS_ZTransform

def SDS_ZTransformDB(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_ZTransformDB(arg1, arg2, arg3, arg4, arg5)
SDS_ZTransformDB = _siglib_wrap.SDS_ZTransformDB

def SUF_EstimateBPFilterLength(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SUF_EstimateBPFilterLength(arg1, arg2, arg3, arg4)
SUF_EstimateBPFilterLength = _siglib_wrap.SUF_EstimateBPFilterLength

def SUF_EstimateBPFilterError(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SUF_EstimateBPFilterError(arg1, arg2, arg3, arg4, arg5)
SUF_EstimateBPFilterError = _siglib_wrap.SUF_EstimateBPFilterError

def SDA_LinearMicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_LinearMicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_LinearMicrophoneArrayBeamPattern = _siglib_wrap.SDA_LinearMicrophoneArrayBeamPattern

def SDA_LinearMicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_LinearMicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_LinearMicrophoneArrayBeamPatternLinear = _siglib_wrap.SDA_LinearMicrophoneArrayBeamPatternLinear

def SDA_MicrophoneArrayCalculateDelays(arg1, arg2, arg3):
    return _siglib_wrap.SDA_MicrophoneArrayCalculateDelays(arg1, arg2, arg3)
SDA_MicrophoneArrayCalculateDelays = _siglib_wrap.SDA_MicrophoneArrayCalculateDelays

def SDA_MicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_MicrophoneArrayBeamPattern(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_MicrophoneArrayBeamPattern = _siglib_wrap.SDA_MicrophoneArrayBeamPattern

def SDA_MicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_MicrophoneArrayBeamPatternLinear(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_MicrophoneArrayBeamPatternLinear = _siglib_wrap.SDA_MicrophoneArrayBeamPatternLinear

def SIF_Lms(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_Lms(arg1, arg2, arg3, arg4, arg5)
SIF_Lms = _siglib_wrap.SIF_Lms

def SDS_Lms(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Lms(arg1, arg2, arg3, arg4, arg5)
SDS_Lms = _siglib_wrap.SDS_Lms

def SDA_LmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_LmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_LmsUpdate = _siglib_wrap.SDA_LmsUpdate

def SDA_LeakyLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_LeakyLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_LeakyLmsUpdate = _siglib_wrap.SDA_LeakyLmsUpdate

def SDA_NormalizedLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_NormalizedLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_NormalizedLmsUpdate = _siglib_wrap.SDA_NormalizedLmsUpdate

def SDA_SignErrorLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignErrorLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_SignErrorLmsUpdate = _siglib_wrap.SDA_SignErrorLmsUpdate

def SDA_SignDataLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignDataLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_SignDataLmsUpdate = _siglib_wrap.SDA_SignDataLmsUpdate

def SDA_SignSignLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignSignLmsUpdate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_SignSignLmsUpdate = _siglib_wrap.SDA_SignSignLmsUpdate

def SDA_ConvolveLinear(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ConvolveLinear(arg1, arg2, arg3, arg4, arg5)
SDA_ConvolveLinear = _siglib_wrap.SDA_ConvolveLinear

def SDA_ConvolvePartial(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ConvolvePartial(arg1, arg2, arg3, arg4, arg5)
SDA_ConvolvePartial = _siglib_wrap.SDA_ConvolvePartial

def SDA_ConvolveCircular(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ConvolveCircular(arg1, arg2, arg3, arg4)
SDA_ConvolveCircular = _siglib_wrap.SDA_ConvolveCircular

def SDA_ConvolveLinearComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ConvolveLinearComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_ConvolveLinearComplex = _siglib_wrap.SDA_ConvolveLinearComplex

def SDA_ConvolvePartialComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ConvolvePartialComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_ConvolvePartialComplex = _siglib_wrap.SDA_ConvolvePartialComplex

def SDA_ConvolveCircularComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ConvolveCircularComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_ConvolveCircularComplex = _siglib_wrap.SDA_ConvolveCircularComplex

def SDA_Deconvolution(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Deconvolution(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_Deconvolution = _siglib_wrap.SDA_Deconvolution

def SDA_CorrelateLinear(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CorrelateLinear(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_CorrelateLinear = _siglib_wrap.SDA_CorrelateLinear

def SDA_CorrelatePartial(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_CorrelatePartial(arg1, arg2, arg3, arg4, arg5)
SDA_CorrelatePartial = _siglib_wrap.SDA_CorrelatePartial

def SDA_CorrelateCircular(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_CorrelateCircular(arg1, arg2, arg3, arg4)
SDA_CorrelateCircular = _siglib_wrap.SDA_CorrelateCircular

def SDA_Covariance(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Covariance(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_Covariance = _siglib_wrap.SDA_Covariance

def SDA_CovariancePartial(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CovariancePartial(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_CovariancePartial = _siglib_wrap.SDA_CovariancePartial

def SDA_CorrelateLinearReturnPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CorrelateLinearReturnPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_CorrelateLinearReturnPeak = _siglib_wrap.SDA_CorrelateLinearReturnPeak

def SIF_FixedDelay(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FixedDelay(arg1, arg2, arg3)
SIF_FixedDelay = _siglib_wrap.SIF_FixedDelay

def SDS_FixedDelay(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FixedDelay(arg1, arg2, arg3, arg4)
SDS_FixedDelay = _siglib_wrap.SDS_FixedDelay

def SDA_FixedDelay(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FixedDelay(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_FixedDelay = _siglib_wrap.SDA_FixedDelay

def SIF_FixedDelayComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FixedDelayComplex(arg1, arg2, arg3, arg4)
SIF_FixedDelayComplex = _siglib_wrap.SIF_FixedDelayComplex

def SDS_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDS_FixedDelayComplex = _siglib_wrap.SDS_FixedDelayComplex

def SDA_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FixedDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_FixedDelayComplex = _siglib_wrap.SDA_FixedDelayComplex

def SDA_ShortFixedDelay(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ShortFixedDelay(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_ShortFixedDelay = _siglib_wrap.SDA_ShortFixedDelay

def SIF_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6)
SIF_VariableDelay = _siglib_wrap.SIF_VariableDelay

def SDS_VariableDelay(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_VariableDelay(arg1, arg2, arg3, arg4, arg5)
SDS_VariableDelay = _siglib_wrap.SDS_VariableDelay

def SDA_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_VariableDelay(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_VariableDelay = _siglib_wrap.SDA_VariableDelay

def SIF_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SIF_VariableDelayComplex = _siglib_wrap.SIF_VariableDelayComplex

def SDS_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDS_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDS_VariableDelayComplex = _siglib_wrap.SDS_VariableDelayComplex

def SDA_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_VariableDelayComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_VariableDelayComplex = _siglib_wrap.SDA_VariableDelayComplex

def SUF_IncreaseVariableDelay(arg1, arg2, arg3):
    return _siglib_wrap.SUF_IncreaseVariableDelay(arg1, arg2, arg3)
SUF_IncreaseVariableDelay = _siglib_wrap.SUF_IncreaseVariableDelay

def SUF_DecreaseVariableDelay(arg1, arg2, arg3):
    return _siglib_wrap.SUF_DecreaseVariableDelay(arg1, arg2, arg3)
SUF_DecreaseVariableDelay = _siglib_wrap.SUF_DecreaseVariableDelay

def SDA_Align(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Align(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Align = _siglib_wrap.SDA_Align

def SIM_Fft2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SIM_Fft2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SIM_Fft2d = _siglib_wrap.SIM_Fft2d

def SIF_Fft2d(arg1, arg2, arg3):
    return _siglib_wrap.SIF_Fft2d(arg1, arg2, arg3)
SIF_Fft2d = _siglib_wrap.SIF_Fft2d

def SIM_Conv3x3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIM_Conv3x3(arg1, arg2, arg3, arg4, arg5)
SIM_Conv3x3 = _siglib_wrap.SIM_Conv3x3

def SIM_Sobel3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_Sobel3x3(arg1, arg2, arg3, arg4)
SIM_Sobel3x3 = _siglib_wrap.SIM_Sobel3x3

def SIM_SobelVertical3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_SobelVertical3x3(arg1, arg2, arg3, arg4)
SIM_SobelVertical3x3 = _siglib_wrap.SIM_SobelVertical3x3

def SIM_SobelHorizontal3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_SobelHorizontal3x3(arg1, arg2, arg3, arg4)
SIM_SobelHorizontal3x3 = _siglib_wrap.SIM_SobelHorizontal3x3

def SIM_Median3x3(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIM_Median3x3(arg1, arg2, arg3, arg4)
SIM_Median3x3 = _siglib_wrap.SIM_Median3x3

def SIF_ConvCoefficients3x3(arg1, arg2):
    return _siglib_wrap.SIF_ConvCoefficients3x3(arg1, arg2)
SIF_ConvCoefficients3x3 = _siglib_wrap.SIF_ConvCoefficients3x3

def SIM_Max(arg1, arg2):
    return _siglib_wrap.SIM_Max(arg1, arg2)
SIM_Max = _siglib_wrap.SIM_Max

def SIM_Min(arg1, arg2):
    return _siglib_wrap.SIM_Min(arg1, arg2)
SIM_Min = _siglib_wrap.SIM_Min

def SIF_Dct8x8():
    return _siglib_wrap.SIF_Dct8x8()
SIF_Dct8x8 = _siglib_wrap.SIF_Dct8x8

def SIM_Dct8x8(arg1, arg2):
    return _siglib_wrap.SIM_Dct8x8(arg1, arg2)
SIM_Dct8x8 = _siglib_wrap.SIM_Dct8x8

def SIM_Idct8x8(arg1, arg2):
    return _siglib_wrap.SIM_Idct8x8(arg1, arg2)
SIM_Idct8x8 = _siglib_wrap.SIM_Idct8x8

def SIM_ZigZagScan(arg1, arg2, arg3):
    return _siglib_wrap.SIM_ZigZagScan(arg1, arg2, arg3)
SIM_ZigZagScan = _siglib_wrap.SIM_ZigZagScan

def SIM_ZigZagDescan(arg1, arg2, arg3):
    return _siglib_wrap.SIM_ZigZagDescan(arg1, arg2, arg3)
SIM_ZigZagDescan = _siglib_wrap.SIM_ZigZagDescan

def SDA_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _siglib_wrap.SDA_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
SDA_SignalGenerate = _siglib_wrap.SDA_SignalGenerate

def SDS_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_SignalGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDS_SignalGenerate = _siglib_wrap.SDS_SignalGenerate

def SIF_Resonator(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_Resonator(arg1, arg2, arg3, arg4)
SIF_Resonator = _siglib_wrap.SIF_Resonator

def SDA_Resonator(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Resonator(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Resonator = _siglib_wrap.SDA_Resonator

def SIF_Resonator1(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_Resonator1(arg1, arg2, arg3, arg4, arg5)
SIF_Resonator1 = _siglib_wrap.SIF_Resonator1

def SDA_Resonator1(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Resonator1(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Resonator1 = _siglib_wrap.SDA_Resonator1

def SDA_Resonator1Add(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Resonator1Add(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Resonator1Add = _siglib_wrap.SDA_Resonator1Add

def SDA_SignalGeneratePolarWhiteNoise(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SignalGeneratePolarWhiteNoise(arg1, arg2, arg3, arg4)
SDA_SignalGeneratePolarWhiteNoise = _siglib_wrap.SDA_SignalGeneratePolarWhiteNoise

def SDS_SignalGeneratePolarWhiteNoise(arg1):
    return _siglib_wrap.SDS_SignalGeneratePolarWhiteNoise(arg1)
SDS_SignalGeneratePolarWhiteNoise = _siglib_wrap.SDS_SignalGeneratePolarWhiteNoise

def SDA_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_SignalGeneratePolarGaussianNoise = _siglib_wrap.SDA_SignalGeneratePolarGaussianNoise

def SDS_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3):
    return _siglib_wrap.SDS_SignalGeneratePolarGaussianNoise(arg1, arg2, arg3)
SDS_SignalGeneratePolarGaussianNoise = _siglib_wrap.SDS_SignalGeneratePolarGaussianNoise

def SDA_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_SignalAddPolarJitterAndGaussianNoise = _siglib_wrap.SDA_SignalAddPolarJitterAndGaussianNoise

def SDS_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_SignalAddPolarJitterAndGaussianNoise(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDS_SignalAddPolarJitterAndGaussianNoise = _siglib_wrap.SDS_SignalAddPolarJitterAndGaussianNoise

def SDA_BitErrorRate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_BitErrorRate(arg1, arg2, arg3, arg4)
SDA_BitErrorRate = _siglib_wrap.SDA_BitErrorRate

def SDA_Interleave(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Interleave(arg1, arg2, arg3, arg4)
SDA_Interleave = _siglib_wrap.SDA_Interleave

def SDA_Deinterleave(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Deinterleave(arg1, arg2, arg3, arg4)
SDA_Deinterleave = _siglib_wrap.SDA_Deinterleave

def SCV_EuclideanDistance(arg1, arg2):
    return _siglib_wrap.SCV_EuclideanDistance(arg1, arg2)
SCV_EuclideanDistance = _siglib_wrap.SCV_EuclideanDistance

def SCV_EuclideanDistanceSquared(arg1, arg2):
    return _siglib_wrap.SCV_EuclideanDistanceSquared(arg1, arg2)
SCV_EuclideanDistanceSquared = _siglib_wrap.SCV_EuclideanDistanceSquared

def SDS_ManchesterEncode(arg1):
    return _siglib_wrap.SDS_ManchesterEncode(arg1)
SDS_ManchesterEncode = _siglib_wrap.SDS_ManchesterEncode

def SDS_ManchesterDecode(arg1):
    return _siglib_wrap.SDS_ManchesterDecode(arg1)
SDS_ManchesterDecode = _siglib_wrap.SDS_ManchesterDecode

def SDS_ManchesterEncodeByte(arg1):
    return _siglib_wrap.SDS_ManchesterEncodeByte(arg1)
SDS_ManchesterEncodeByte = _siglib_wrap.SDS_ManchesterEncodeByte

def SDS_ManchesterDecodeByte(arg1):
    return _siglib_wrap.SDS_ManchesterDecodeByte(arg1)
SDS_ManchesterDecodeByte = _siglib_wrap.SDS_ManchesterDecodeByte

def SIF_DetectNumericalWordSequence(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_DetectNumericalWordSequence(arg1, arg2, arg3, arg4)
SIF_DetectNumericalWordSequence = _siglib_wrap.SIF_DetectNumericalWordSequence

def SDS_DetectNumericalWordSequence(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_DetectNumericalWordSequence(arg1, arg2, arg3, arg4, arg5)
SDS_DetectNumericalWordSequence = _siglib_wrap.SDS_DetectNumericalWordSequence

def SIF_DetectNumericalBitSequence(arg1, arg2, arg3):
    return _siglib_wrap.SIF_DetectNumericalBitSequence(arg1, arg2, arg3)
SIF_DetectNumericalBitSequence = _siglib_wrap.SIF_DetectNumericalBitSequence

def SDS_DetectNumericalBitSequence(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_DetectNumericalBitSequence(arg1, arg2, arg3, arg4, arg5)
SDS_DetectNumericalBitSequence = _siglib_wrap.SDS_DetectNumericalBitSequence

def SIF_DetectCharacterSequence(arg1, arg2):
    return _siglib_wrap.SIF_DetectCharacterSequence(arg1, arg2)
SIF_DetectCharacterSequence = _siglib_wrap.SIF_DetectCharacterSequence

def SDS_DetectCharacterSequence(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_DetectCharacterSequence(arg1, arg2, arg3, arg4)
SDS_DetectCharacterSequence = _siglib_wrap.SDS_DetectCharacterSequence

def SDS_ErrorVector(arg1, arg2):
    return _siglib_wrap.SDS_ErrorVector(arg1, arg2)
SDS_ErrorVector = _siglib_wrap.SDS_ErrorVector

def SDS_ErrorVectorMagnitudePercent(arg1, arg2):
    return _siglib_wrap.SDS_ErrorVectorMagnitudePercent(arg1, arg2)
SDS_ErrorVectorMagnitudePercent = _siglib_wrap.SDS_ErrorVectorMagnitudePercent

def SDS_ErrorVectorMagnitudeDecibels(arg1, arg2):
    return _siglib_wrap.SDS_ErrorVectorMagnitudeDecibels(arg1, arg2)
SDS_ErrorVectorMagnitudeDecibels = _siglib_wrap.SDS_ErrorVectorMagnitudeDecibels

def SDS_ReverseDiBits(arg1):
    return _siglib_wrap.SDS_ReverseDiBits(arg1)
SDS_ReverseDiBits = _siglib_wrap.SDS_ReverseDiBits

def SDS_QpskBitErrorCount(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_QpskBitErrorCount(arg1, arg2, arg3, arg4)
SDS_QpskBitErrorCount = _siglib_wrap.SDS_QpskBitErrorCount

def SDS_BitErrorRate(arg1, arg2):
    return _siglib_wrap.SDS_BitErrorRate(arg1, arg2)
SDS_BitErrorRate = _siglib_wrap.SDS_BitErrorRate

def SIF_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SIF_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SIF_PhaseLockedLoop = _siglib_wrap.SIF_PhaseLockedLoop

def SDS_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SDS_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SDS_PhaseLockedLoop = _siglib_wrap.SDS_PhaseLockedLoop

def SDA_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_PhaseLockedLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
SDA_PhaseLockedLoop = _siglib_wrap.SDA_PhaseLockedLoop

def SIF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SIF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SIF_CostasLoop = _siglib_wrap.SIF_CostasLoop

def SDS_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDS_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
SDS_CostasLoop = _siglib_wrap.SDS_CostasLoop

def SDA_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDA_CostasLoop = _siglib_wrap.SDA_CostasLoop

def SRF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SRF_CostasLoop(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SRF_CostasLoop = _siglib_wrap.SRF_CostasLoop

def SIF_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SIF_180DegreePhaseDetect = _siglib_wrap.SIF_180DegreePhaseDetect

def SDA_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_180DegreePhaseDetect(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_180DegreePhaseDetect = _siglib_wrap.SDA_180DegreePhaseDetect

def SIF_TriggerReverberator(arg1, arg2, arg3):
    return _siglib_wrap.SIF_TriggerReverberator(arg1, arg2, arg3)
SIF_TriggerReverberator = _siglib_wrap.SIF_TriggerReverberator

def SDA_TriggerReverberator(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_TriggerReverberator(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_TriggerReverberator = _siglib_wrap.SDA_TriggerReverberator

def SDS_TriggerReverberator(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_TriggerReverberator(arg1, arg2, arg3, arg4, arg5)
SDS_TriggerReverberator = _siglib_wrap.SDS_TriggerReverberator

def SDA_TriggerSelector(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_TriggerSelector(arg1, arg2, arg3, arg4)
SDA_TriggerSelector = _siglib_wrap.SDA_TriggerSelector

def SIF_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SIF_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SIF_EarlyLateGate = _siglib_wrap.SIF_EarlyLateGate

def SDA_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SDA_EarlyLateGate = _siglib_wrap.SDA_EarlyLateGate

def SDA_EarlyLateGateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22):
    return _siglib_wrap.SDA_EarlyLateGateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22)
SDA_EarlyLateGateDebug = _siglib_wrap.SDA_EarlyLateGateDebug

def SDS_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDS_EarlyLateGate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDS_EarlyLateGate = _siglib_wrap.SDS_EarlyLateGate

def SIF_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SIF_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
SIF_EarlyLateGateSquarePulse = _siglib_wrap.SIF_EarlyLateGateSquarePulse

def SDA_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SDA_EarlyLateGateSquarePulse = _siglib_wrap.SDA_EarlyLateGateSquarePulse

def SDA_EarlyLateGateSquarePulseDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22):
    return _siglib_wrap.SDA_EarlyLateGateSquarePulseDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22)
SDA_EarlyLateGateSquarePulseDebug = _siglib_wrap.SDA_EarlyLateGateSquarePulseDebug

def SDS_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDS_EarlyLateGateSquarePulse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDS_EarlyLateGateSquarePulse = _siglib_wrap.SDS_EarlyLateGateSquarePulse

def SDS_ConvEncoderK3(arg1, arg2):
    return _siglib_wrap.SDS_ConvEncoderK3(arg1, arg2)
SDS_ConvEncoderK3 = _siglib_wrap.SDS_ConvEncoderK3

def SIF_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SIF_ViterbiDecoderK3 = _siglib_wrap.SIF_ViterbiDecoderK3

def SDS_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_ViterbiDecoderK3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDS_ViterbiDecoderK3 = _siglib_wrap.SDS_ViterbiDecoderK3

def SDS_ConvEncoderV32(arg1, arg2, arg3):
    return _siglib_wrap.SDS_ConvEncoderV32(arg1, arg2, arg3)
SDS_ConvEncoderV32 = _siglib_wrap.SDS_ConvEncoderV32

def SIF_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5)
SIF_ViterbiDecoderV32 = _siglib_wrap.SIF_ViterbiDecoderV32

def SDS_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_ViterbiDecoderV32(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDS_ViterbiDecoderV32 = _siglib_wrap.SDS_ViterbiDecoderV32

def SIF_AmplitudeModulate(arg1, arg2, arg3):
    return _siglib_wrap.SIF_AmplitudeModulate(arg1, arg2, arg3)
SIF_AmplitudeModulate = _siglib_wrap.SIF_AmplitudeModulate

def SDA_AmplitudeModulate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_AmplitudeModulate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_AmplitudeModulate = _siglib_wrap.SDA_AmplitudeModulate

def SDS_AmplitudeModulate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_AmplitudeModulate(arg1, arg2, arg3, arg4)
SDS_AmplitudeModulate = _siglib_wrap.SDS_AmplitudeModulate

def SIF_AmplitudeModulate2(arg1, arg2, arg3):
    return _siglib_wrap.SIF_AmplitudeModulate2(arg1, arg2, arg3)
SIF_AmplitudeModulate2 = _siglib_wrap.SIF_AmplitudeModulate2

def SDA_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_AmplitudeModulate2 = _siglib_wrap.SDA_AmplitudeModulate2

def SDS_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_AmplitudeModulate2(arg1, arg2, arg3, arg4, arg5)
SDS_AmplitudeModulate2 = _siglib_wrap.SDS_AmplitudeModulate2

def SIF_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SIF_ComplexShift = _siglib_wrap.SIF_ComplexShift

def SDA_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_ComplexShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_ComplexShift = _siglib_wrap.SDA_ComplexShift

def SIF_FrequencyModulate(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FrequencyModulate(arg1, arg2, arg3)
SIF_FrequencyModulate = _siglib_wrap.SIF_FrequencyModulate

def SDS_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_FrequencyModulate = _siglib_wrap.SDS_FrequencyModulate

def SDA_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_FrequencyModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_FrequencyModulate = _siglib_wrap.SDA_FrequencyModulate

def SDA_FrequencyDemodulate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FrequencyDemodulate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_FrequencyDemodulate = _siglib_wrap.SDA_FrequencyDemodulate

def SIF_FrequencyModulateComplex(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FrequencyModulateComplex(arg1, arg2, arg3)
SIF_FrequencyModulateComplex = _siglib_wrap.SIF_FrequencyModulateComplex

def SDS_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDS_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDS_FrequencyModulateComplex = _siglib_wrap.SDS_FrequencyModulateComplex

def SDA_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FrequencyModulateComplex(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_FrequencyModulateComplex = _siglib_wrap.SDA_FrequencyModulateComplex

def SDA_DeltaModulate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DeltaModulate(arg1, arg2, arg3, arg4, arg5)
SDA_DeltaModulate = _siglib_wrap.SDA_DeltaModulate

def SDA_DeltaDemodulate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_DeltaDemodulate(arg1, arg2, arg3, arg4)
SDA_DeltaDemodulate = _siglib_wrap.SDA_DeltaDemodulate

def SDA_DeltaModulate2(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DeltaModulate2(arg1, arg2, arg3, arg4, arg5)
SDA_DeltaModulate2 = _siglib_wrap.SDA_DeltaModulate2

def SIF_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33):
    return _siglib_wrap.SIF_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33)
SIF_CostasQamDemodulate = _siglib_wrap.SIF_CostasQamDemodulate

def SDS_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39):
    return _siglib_wrap.SDS_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39)
SDS_CostasQamDemodulate = _siglib_wrap.SDS_CostasQamDemodulate

def SDS_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43):
    return _siglib_wrap.SDS_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43)
SDS_CostasQamDemodulateDebug = _siglib_wrap.SDS_CostasQamDemodulateDebug

def SDA_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40):
    return _siglib_wrap.SDA_CostasQamDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40)
SDA_CostasQamDemodulate = _siglib_wrap.SDA_CostasQamDemodulate

def SDA_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43):
    return _siglib_wrap.SDA_CostasQamDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43)
SDA_CostasQamDemodulateDebug = _siglib_wrap.SDA_CostasQamDemodulateDebug

def SIF_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SIF_QpskModulate = _siglib_wrap.SIF_QpskModulate

def SDA_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_QpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
SDA_QpskModulate = _siglib_wrap.SDA_QpskModulate

def SIF_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SIF_QpskDemodulate = _siglib_wrap.SIF_QpskDemodulate

def SDA_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SDA_QpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SDA_QpskDemodulate = _siglib_wrap.SDA_QpskDemodulate

def SDA_QpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_QpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
SDA_QpskDemodulateDebug = _siglib_wrap.SDA_QpskDemodulateDebug

def SDA_QpskDifferentialEncode(arg1, arg2):
    return _siglib_wrap.SDA_QpskDifferentialEncode(arg1, arg2)
SDA_QpskDifferentialEncode = _siglib_wrap.SDA_QpskDifferentialEncode

def SDA_QpskDifferentialDecode(arg1, arg2):
    return _siglib_wrap.SDA_QpskDifferentialDecode(arg1, arg2)
SDA_QpskDifferentialDecode = _siglib_wrap.SDA_QpskDifferentialDecode

def SIF_FskModulate(arg1, arg2, arg3):
    return _siglib_wrap.SIF_FskModulate(arg1, arg2, arg3)
SIF_FskModulate = _siglib_wrap.SIF_FskModulate

def SDA_FskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_FskModulateByte = _siglib_wrap.SDA_FskModulateByte

def SDA_FskDemodulateByte(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FskDemodulateByte(arg1, arg2, arg3, arg4, arg5)
SDA_FskDemodulateByte = _siglib_wrap.SDA_FskDemodulateByte

def SDA_CpfskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_CpfskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_CpfskModulateByte = _siglib_wrap.SDA_CpfskModulateByte

def SDA_FskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_FskModulate = _siglib_wrap.SDA_FskModulate

def SDA_FskDemodulate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FskDemodulate(arg1, arg2, arg3, arg4, arg5)
SDA_FskDemodulate = _siglib_wrap.SDA_FskDemodulate

def SDA_CpfskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_CpfskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_CpfskModulate = _siglib_wrap.SDA_CpfskModulate

def SIF_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SIF_Qam16Modulate = _siglib_wrap.SIF_Qam16Modulate

def SDA_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SDA_Qam16Modulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
SDA_Qam16Modulate = _siglib_wrap.SDA_Qam16Modulate

def SIF_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SIF_Qam16Demodulate = _siglib_wrap.SIF_Qam16Demodulate

def SDA_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SDA_Qam16Demodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SDA_Qam16Demodulate = _siglib_wrap.SDA_Qam16Demodulate

def SDA_Qam16DemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_Qam16DemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
SDA_Qam16DemodulateDebug = _siglib_wrap.SDA_Qam16DemodulateDebug

def SDA_Qam16DifferentialEncode(arg1, arg2):
    return _siglib_wrap.SDA_Qam16DifferentialEncode(arg1, arg2)
SDA_Qam16DifferentialEncode = _siglib_wrap.SDA_Qam16DifferentialEncode

def SDA_Qam16DifferentialDecode(arg1, arg2):
    return _siglib_wrap.SDA_Qam16DifferentialDecode(arg1, arg2)
SDA_Qam16DifferentialDecode = _siglib_wrap.SDA_Qam16DifferentialDecode

def SIF_BpskModulate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_BpskModulate(arg1, arg2, arg3, arg4)
SIF_BpskModulate = _siglib_wrap.SIF_BpskModulate

def SDA_BpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_BpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_BpskModulate = _siglib_wrap.SDA_BpskModulate

def SDA_BpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_BpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_BpskModulateByte = _siglib_wrap.SDA_BpskModulateByte

def SIF_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _siglib_wrap.SIF_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
SIF_BpskDemodulate = _siglib_wrap.SIF_BpskDemodulate

def SDA_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _siglib_wrap.SDA_BpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
SDA_BpskDemodulate = _siglib_wrap.SDA_BpskDemodulate

def SDA_BpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_BpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
SDA_BpskDemodulateDebug = _siglib_wrap.SDA_BpskDemodulateDebug

def SIF_DpskModulate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SIF_DpskModulate(arg1, arg2, arg3, arg4, arg5)
SIF_DpskModulate = _siglib_wrap.SIF_DpskModulate

def SDA_DpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_DpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_DpskModulate = _siglib_wrap.SDA_DpskModulate

def SDA_DpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_DpskModulateByte(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_DpskModulateByte = _siglib_wrap.SDA_DpskModulateByte

def SIF_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _siglib_wrap.SIF_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
SIF_DpskDemodulate = _siglib_wrap.SIF_DpskDemodulate

def SDA_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _siglib_wrap.SDA_DpskDemodulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
SDA_DpskDemodulate = _siglib_wrap.SDA_DpskDemodulate

def SDA_DpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _siglib_wrap.SDA_DpskDemodulateDebug(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
SDA_DpskDemodulateDebug = _siglib_wrap.SDA_DpskDemodulateDebug

def SIF_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _siglib_wrap.SIF_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
SIF_PiByFourDQpskModulate = _siglib_wrap.SIF_PiByFourDQpskModulate

def SDA_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _siglib_wrap.SDA_PiByFourDQpskModulate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
SDA_PiByFourDQpskModulate = _siglib_wrap.SDA_PiByFourDQpskModulate

def SDS_ChannelizationCode(arg1, arg2, arg3):
    return _siglib_wrap.SDS_ChannelizationCode(arg1, arg2, arg3)
SDS_ChannelizationCode = _siglib_wrap.SDS_ChannelizationCode

def SDA_ComplexQPSKSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ComplexQPSKSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_ComplexQPSKSpread = _siglib_wrap.SDA_ComplexQPSKSpread

def SDA_ComplexQPSKDeSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ComplexQPSKDeSpread(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_ComplexQPSKDeSpread = _siglib_wrap.SDA_ComplexQPSKDeSpread

def SUF_AsyncCharacterLength(arg1, arg2, arg3):
    return _siglib_wrap.SUF_AsyncCharacterLength(arg1, arg2, arg3)
SUF_AsyncCharacterLength = _siglib_wrap.SUF_AsyncCharacterLength

def SDA_SyncToAsyncConverter(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_SyncToAsyncConverter(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_SyncToAsyncConverter = _siglib_wrap.SDA_SyncToAsyncConverter

def SDA_AsyncToSyncConverter(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_AsyncToSyncConverter(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_AsyncToSyncConverter = _siglib_wrap.SDA_AsyncToSyncConverter

def SIF_AsyncAddRemoveStopBits(arg1):
    return _siglib_wrap.SIF_AsyncAddRemoveStopBits(arg1)
SIF_AsyncAddRemoveStopBits = _siglib_wrap.SIF_AsyncAddRemoveStopBits

def SDA_AsyncRemoveStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AsyncRemoveStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_AsyncRemoveStopBits = _siglib_wrap.SDA_AsyncRemoveStopBits

def SDA_AsyncAddStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_AsyncAddStopBits(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_AsyncAddStopBits = _siglib_wrap.SDA_AsyncAddStopBits

def SDA_DecreaseWordLength(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DecreaseWordLength(arg1, arg2, arg3, arg4, arg5)
SDA_DecreaseWordLength = _siglib_wrap.SDA_DecreaseWordLength

def SDA_IncreaseWordLength(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_IncreaseWordLength(arg1, arg2, arg3, arg4, arg5)
SDA_IncreaseWordLength = _siglib_wrap.SDA_IncreaseWordLength

def SDS_Scrambler1417(arg1, arg2):
    return _siglib_wrap.SDS_Scrambler1417(arg1, arg2)
SDS_Scrambler1417 = _siglib_wrap.SDS_Scrambler1417

def SDS_Descrambler1417(arg1, arg2):
    return _siglib_wrap.SDS_Descrambler1417(arg1, arg2)
SDS_Descrambler1417 = _siglib_wrap.SDS_Descrambler1417

def SDS_Scrambler1417WithInversion(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Scrambler1417WithInversion(arg1, arg2, arg3, arg4)
SDS_Scrambler1417WithInversion = _siglib_wrap.SDS_Scrambler1417WithInversion

def SDS_Descrambler1417WithInversion(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Descrambler1417WithInversion(arg1, arg2, arg3, arg4)
SDS_Descrambler1417WithInversion = _siglib_wrap.SDS_Descrambler1417WithInversion

def SDS_Scrambler1823(arg1, arg2):
    return _siglib_wrap.SDS_Scrambler1823(arg1, arg2)
SDS_Scrambler1823 = _siglib_wrap.SDS_Scrambler1823

def SDS_Descrambler1823(arg1, arg2):
    return _siglib_wrap.SDS_Descrambler1823(arg1, arg2)
SDS_Descrambler1823 = _siglib_wrap.SDS_Descrambler1823

def SDS_Scrambler523(arg1, arg2):
    return _siglib_wrap.SDS_Scrambler523(arg1, arg2)
SDS_Scrambler523 = _siglib_wrap.SDS_Scrambler523

def SDS_Descrambler523(arg1, arg2):
    return _siglib_wrap.SDS_Descrambler523(arg1, arg2)
SDS_Descrambler523 = _siglib_wrap.SDS_Descrambler523

def SDS_ScramblerDescramblerPN9(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblerPN9(arg1, arg2)
SDS_ScramblerDescramblerPN9 = _siglib_wrap.SDS_ScramblerDescramblerPN9

def SDS_SequenceGeneratorPN9(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorPN9(arg1)
SDS_SequenceGeneratorPN9 = _siglib_wrap.SDS_SequenceGeneratorPN9

def SDS_ScramblerDescramblerPN15(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblerPN15(arg1, arg2)
SDS_ScramblerDescramblerPN15 = _siglib_wrap.SDS_ScramblerDescramblerPN15

def SDS_SequenceGeneratorPN15(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorPN15(arg1)
SDS_SequenceGeneratorPN15 = _siglib_wrap.SDS_SequenceGeneratorPN15

def SDS_ScramblerDescramblergCRC24(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC24(arg1, arg2)
SDS_ScramblerDescramblergCRC24 = _siglib_wrap.SDS_ScramblerDescramblergCRC24

def SDS_SequenceGeneratorgCRC24(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC24(arg1)
SDS_SequenceGeneratorgCRC24 = _siglib_wrap.SDS_SequenceGeneratorgCRC24

def SDS_ScramblerDescramblergCRC16(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC16(arg1, arg2)
SDS_ScramblerDescramblergCRC16 = _siglib_wrap.SDS_ScramblerDescramblergCRC16

def SDS_SequenceGeneratorgCRC16(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC16(arg1)
SDS_SequenceGeneratorgCRC16 = _siglib_wrap.SDS_SequenceGeneratorgCRC16

def SDS_ScramblerDescramblergCRC12(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC12(arg1, arg2)
SDS_ScramblerDescramblergCRC12 = _siglib_wrap.SDS_ScramblerDescramblergCRC12

def SDS_SequenceGeneratorgCRC12(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC12(arg1)
SDS_SequenceGeneratorgCRC12 = _siglib_wrap.SDS_SequenceGeneratorgCRC12

def SDS_ScramblerDescramblergCRC8(arg1, arg2):
    return _siglib_wrap.SDS_ScramblerDescramblergCRC8(arg1, arg2)
SDS_ScramblerDescramblergCRC8 = _siglib_wrap.SDS_ScramblerDescramblergCRC8

def SDS_SequenceGeneratorgCRC8(arg1):
    return _siglib_wrap.SDS_SequenceGeneratorgCRC8(arg1)
SDS_SequenceGeneratorgCRC8 = _siglib_wrap.SDS_SequenceGeneratorgCRC8

def SDS_LongCodeGenerator3GPPDL(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LongCodeGenerator3GPPDL(arg1, arg2, arg3, arg4)
SDS_LongCodeGenerator3GPPDL = _siglib_wrap.SDS_LongCodeGenerator3GPPDL

def SDS_LongCodeGenerator3GPPUL(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_LongCodeGenerator3GPPUL(arg1, arg2, arg3, arg4)
SDS_LongCodeGenerator3GPPUL = _siglib_wrap.SDS_LongCodeGenerator3GPPUL

def SDA_Multiplex(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Multiplex(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Multiplex = _siglib_wrap.SDA_Multiplex

def SDA_Demultiplex(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Demultiplex(arg1, arg2, arg3, arg4, arg5)
SDA_Demultiplex = _siglib_wrap.SDA_Demultiplex

def SDA_Mux2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Mux2(arg1, arg2, arg3, arg4)
SDA_Mux2 = _siglib_wrap.SDA_Mux2

def SDA_Demux2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Demux2(arg1, arg2, arg3, arg4)
SDA_Demux2 = _siglib_wrap.SDA_Demux2

def SDA_Mux3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Mux3(arg1, arg2, arg3, arg4, arg5)
SDA_Mux3 = _siglib_wrap.SDA_Mux3

def SDA_Demux3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Demux3(arg1, arg2, arg3, arg4, arg5)
SDA_Demux3 = _siglib_wrap.SDA_Demux3

def SDA_Mux4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Mux4(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Mux4 = _siglib_wrap.SDA_Mux4

def SDA_Demux4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Demux4(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Demux4 = _siglib_wrap.SDA_Demux4

def SDA_Mux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Mux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Mux5 = _siglib_wrap.SDA_Mux5

def SDA_Demux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Demux5(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Demux5 = _siglib_wrap.SDA_Demux5

def SDA_Mux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Mux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_Mux6 = _siglib_wrap.SDA_Mux6

def SDA_Demux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_Demux6(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_Demux6 = _siglib_wrap.SDA_Demux6

def SDA_Mux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Mux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_Mux7 = _siglib_wrap.SDA_Mux7

def SDA_Demux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Demux7(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_Demux7 = _siglib_wrap.SDA_Demux7

def SDA_Mux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_Mux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_Mux8 = _siglib_wrap.SDA_Mux8

def SDA_Demux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_Demux8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_Demux8 = _siglib_wrap.SDA_Demux8

def SIF_Decimate(arg1):
    return _siglib_wrap.SIF_Decimate(arg1)
SIF_Decimate = _siglib_wrap.SIF_Decimate

def SDA_Decimate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Decimate(arg1, arg2, arg3, arg4, arg5)
SDA_Decimate = _siglib_wrap.SDA_Decimate

def SIF_Interpolate(arg1):
    return _siglib_wrap.SIF_Interpolate(arg1)
SIF_Interpolate = _siglib_wrap.SIF_Interpolate

def SDA_Interpolate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Interpolate(arg1, arg2, arg3, arg4, arg5)
SDA_Interpolate = _siglib_wrap.SDA_Interpolate

def SIF_FilterAndDecimate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_FilterAndDecimate(arg1, arg2, arg3, arg4)
SIF_FilterAndDecimate = _siglib_wrap.SIF_FilterAndDecimate

def SDA_FilterAndDecimate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_FilterAndDecimate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_FilterAndDecimate = _siglib_wrap.SDA_FilterAndDecimate

def SIF_InterpolateAndFilter(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_InterpolateAndFilter(arg1, arg2, arg3, arg4)
SIF_InterpolateAndFilter = _siglib_wrap.SIF_InterpolateAndFilter

def SDA_InterpolateAndFilter(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_InterpolateAndFilter(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_InterpolateAndFilter = _siglib_wrap.SDA_InterpolateAndFilter

def SDA_ResampleLinear(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ResampleLinear(arg1, arg2, arg3, arg4)
SDA_ResampleLinear = _siglib_wrap.SDA_ResampleLinear

def SDA_ResampleLinearNSamples(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ResampleLinearNSamples(arg1, arg2, arg3, arg4, arg5)
SDA_ResampleLinearNSamples = _siglib_wrap.SDA_ResampleLinearNSamples

def SDA_InterpolateLinear1D(arg1, arg2, arg3):
    return _siglib_wrap.SDA_InterpolateLinear1D(arg1, arg2, arg3)
SDA_InterpolateLinear1D = _siglib_wrap.SDA_InterpolateLinear1D

def SDA_InterpolateLinear2D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_InterpolateLinear2D(arg1, arg2, arg3, arg4)
SDA_InterpolateLinear2D = _siglib_wrap.SDA_InterpolateLinear2D

def SIF_ResampleSinc(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_ResampleSinc(arg1, arg2, arg3, arg4)
SIF_ResampleSinc = _siglib_wrap.SIF_ResampleSinc

def SIF_ResampleWindowedSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_ResampleWindowedSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SIF_ResampleWindowedSinc = _siglib_wrap.SIF_ResampleWindowedSinc

def SDA_ResampleSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ResampleSinc(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_ResampleSinc = _siglib_wrap.SDA_ResampleSinc

def SDA_ResampleSincNSamples(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_ResampleSincNSamples(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_ResampleSincNSamples = _siglib_wrap.SDA_ResampleSincNSamples

def SIF_InterpolateSinc1D(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_InterpolateSinc1D(arg1, arg2, arg3, arg4)
SIF_InterpolateSinc1D = _siglib_wrap.SIF_InterpolateSinc1D

def SIF_InterpolateWindowedSinc1D(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_InterpolateWindowedSinc1D(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SIF_InterpolateWindowedSinc1D = _siglib_wrap.SIF_InterpolateWindowedSinc1D

def SDA_InterpolateSinc1D(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_InterpolateSinc1D(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_InterpolateSinc1D = _siglib_wrap.SDA_InterpolateSinc1D

def SIF_ResampleLinearContiguous(arg1, arg2):
    return _siglib_wrap.SIF_ResampleLinearContiguous(arg1, arg2)
SIF_ResampleLinearContiguous = _siglib_wrap.SIF_ResampleLinearContiguous

def SDA_ResampleLinearContiguous(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ResampleLinearContiguous(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_ResampleLinearContiguous = _siglib_wrap.SDA_ResampleLinearContiguous

def SIF_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SIF_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6)
SIF_ResampleSincContiguous = _siglib_wrap.SIF_ResampleSincContiguous

def SIF_ResampleWindowedSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_ResampleWindowedSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SIF_ResampleWindowedSincContiguous = _siglib_wrap.SIF_ResampleWindowedSincContiguous

def SDA_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_ResampleSincContiguous(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_ResampleSincContiguous = _siglib_wrap.SDA_ResampleSincContiguous

def SIF_DtmfGenerate(arg1, arg2):
    return _siglib_wrap.SIF_DtmfGenerate(arg1, arg2)
SIF_DtmfGenerate = _siglib_wrap.SIF_DtmfGenerate

def SDA_DtmfGenerate(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DtmfGenerate(arg1, arg2, arg3, arg4, arg5)
SDA_DtmfGenerate = _siglib_wrap.SDA_DtmfGenerate

def SIF_DtmfDetect(arg1, arg2):
    return _siglib_wrap.SIF_DtmfDetect(arg1, arg2)
SIF_DtmfDetect = _siglib_wrap.SIF_DtmfDetect

def SDA_DtmfDetect(arg1, arg2):
    return _siglib_wrap.SDA_DtmfDetect(arg1, arg2)
SDA_DtmfDetect = _siglib_wrap.SDA_DtmfDetect

def SDA_DtmfDetectAndValidate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_DtmfDetectAndValidate(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_DtmfDetectAndValidate = _siglib_wrap.SDA_DtmfDetectAndValidate

def SUF_AsciiToKeyCode(arg1):
    return _siglib_wrap.SUF_AsciiToKeyCode(arg1)
SUF_AsciiToKeyCode = _siglib_wrap.SUF_AsciiToKeyCode

def SUF_KeyCodeToAscii(arg1):
    return _siglib_wrap.SUF_KeyCodeToAscii(arg1)
SUF_KeyCodeToAscii = _siglib_wrap.SUF_KeyCodeToAscii

def SIF_PreEmphasisFilter(arg1):
    return _siglib_wrap.SIF_PreEmphasisFilter(arg1)
SIF_PreEmphasisFilter = _siglib_wrap.SIF_PreEmphasisFilter

def SDA_PreEmphasisFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_PreEmphasisFilter(arg1, arg2, arg3, arg4, arg5)
SDA_PreEmphasisFilter = _siglib_wrap.SDA_PreEmphasisFilter

def SIF_DeEmphasisFilter(arg1):
    return _siglib_wrap.SIF_DeEmphasisFilter(arg1)
SIF_DeEmphasisFilter = _siglib_wrap.SIF_DeEmphasisFilter

def SDA_DeEmphasisFilter(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_DeEmphasisFilter(arg1, arg2, arg3, arg4, arg5)
SDA_DeEmphasisFilter = _siglib_wrap.SDA_DeEmphasisFilter

def SDA_AdpcmEncoder(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AdpcmEncoder(arg1, arg2, arg3)
SDA_AdpcmEncoder = _siglib_wrap.SDA_AdpcmEncoder

def SDA_AdpcmEncoderDebug(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_AdpcmEncoderDebug(arg1, arg2, arg3, arg4)
SDA_AdpcmEncoderDebug = _siglib_wrap.SDA_AdpcmEncoderDebug

def SDA_AdpcmDecoder(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AdpcmDecoder(arg1, arg2, arg3)
SDA_AdpcmDecoder = _siglib_wrap.SDA_AdpcmDecoder

def SDA_Max(arg1, arg2):
    return _siglib_wrap.SDA_Max(arg1, arg2)
SDA_Max = _siglib_wrap.SDA_Max

def SDA_AbsMax(arg1, arg2):
    return _siglib_wrap.SDA_AbsMax(arg1, arg2)
SDA_AbsMax = _siglib_wrap.SDA_AbsMax

def SDA_Min(arg1, arg2):
    return _siglib_wrap.SDA_Min(arg1, arg2)
SDA_Min = _siglib_wrap.SDA_Min

def SDA_AbsMin(arg1, arg2):
    return _siglib_wrap.SDA_AbsMin(arg1, arg2)
SDA_AbsMin = _siglib_wrap.SDA_AbsMin

def SDA_Middle(arg1, arg2):
    return _siglib_wrap.SDA_Middle(arg1, arg2)
SDA_Middle = _siglib_wrap.SDA_Middle

def SDA_Range(arg1, arg2):
    return _siglib_wrap.SDA_Range(arg1, arg2)
SDA_Range = _siglib_wrap.SDA_Range

def SDA_MaxPos(arg1, arg2):
    return _siglib_wrap.SDA_MaxPos(arg1, arg2)
SDA_MaxPos = _siglib_wrap.SDA_MaxPos

def SDA_AbsMaxPos(arg1, arg2):
    return _siglib_wrap.SDA_AbsMaxPos(arg1, arg2)
SDA_AbsMaxPos = _siglib_wrap.SDA_AbsMaxPos

def SDA_MinPos(arg1, arg2):
    return _siglib_wrap.SDA_MinPos(arg1, arg2)
SDA_MinPos = _siglib_wrap.SDA_MinPos

def SDA_AbsMinPos(arg1, arg2):
    return _siglib_wrap.SDA_AbsMinPos(arg1, arg2)
SDA_AbsMinPos = _siglib_wrap.SDA_AbsMinPos

def SDS_Max(arg1, arg2):
    return _siglib_wrap.SDS_Max(arg1, arg2)
SDS_Max = _siglib_wrap.SDS_Max

def SDS_AbsMax(arg1, arg2):
    return _siglib_wrap.SDS_AbsMax(arg1, arg2)
SDS_AbsMax = _siglib_wrap.SDS_AbsMax

def SDS_Min(arg1, arg2):
    return _siglib_wrap.SDS_Min(arg1, arg2)
SDS_Min = _siglib_wrap.SDS_Min

def SDS_AbsMin(arg1, arg2):
    return _siglib_wrap.SDS_AbsMin(arg1, arg2)
SDS_AbsMin = _siglib_wrap.SDS_AbsMin

def SDA_LocalMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalMax(arg1, arg2, arg3, arg4)
SDA_LocalMax = _siglib_wrap.SDA_LocalMax

def SDA_LocalAbsMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalAbsMax(arg1, arg2, arg3, arg4)
SDA_LocalAbsMax = _siglib_wrap.SDA_LocalAbsMax

def SDA_LocalMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalMin(arg1, arg2, arg3, arg4)
SDA_LocalMin = _siglib_wrap.SDA_LocalMin

def SDA_LocalAbsMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LocalAbsMin(arg1, arg2, arg3, arg4)
SDA_LocalAbsMin = _siglib_wrap.SDA_LocalAbsMin

def SDA_Max2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Max2(arg1, arg2, arg3, arg4)
SDA_Max2 = _siglib_wrap.SDA_Max2

def SDA_AbsMax2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_AbsMax2(arg1, arg2, arg3, arg4)
SDA_AbsMax2 = _siglib_wrap.SDA_AbsMax2

def SDA_SignedAbsMax2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SignedAbsMax2(arg1, arg2, arg3, arg4)
SDA_SignedAbsMax2 = _siglib_wrap.SDA_SignedAbsMax2

def SDA_Min2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Min2(arg1, arg2, arg3, arg4)
SDA_Min2 = _siglib_wrap.SDA_Min2

def SDA_AbsMin2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_AbsMin2(arg1, arg2, arg3, arg4)
SDA_AbsMin2 = _siglib_wrap.SDA_AbsMin2

def SDA_SignedAbsMin2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SignedAbsMin2(arg1, arg2, arg3, arg4)
SDA_SignedAbsMin2 = _siglib_wrap.SDA_SignedAbsMin2

def SDA_PeakHold(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_PeakHold(arg1, arg2, arg3, arg4, arg5)
SDA_PeakHold = _siglib_wrap.SDA_PeakHold

def SDA_PeakHoldPerSample(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PeakHoldPerSample(arg1, arg2, arg3, arg4)
SDA_PeakHoldPerSample = _siglib_wrap.SDA_PeakHoldPerSample

def SDA_DetectFirstPeakOverThreshold(arg1, arg2, arg3):
    return _siglib_wrap.SDA_DetectFirstPeakOverThreshold(arg1, arg2, arg3)
SDA_DetectFirstPeakOverThreshold = _siglib_wrap.SDA_DetectFirstPeakOverThreshold

def SDS_Round(arg1, arg2):
    return _siglib_wrap.SDS_Round(arg1, arg2)
SDS_Round = _siglib_wrap.SDS_Round

def SDA_Round(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Round(arg1, arg2, arg3, arg4)
SDA_Round = _siglib_wrap.SDA_Round

def SDA_Clip(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Clip(arg1, arg2, arg3, arg4, arg5)
SDA_Clip = _siglib_wrap.SDA_Clip

def SDA_Threshold(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Threshold(arg1, arg2, arg3, arg4, arg5)
SDA_Threshold = _siglib_wrap.SDA_Threshold

def SDA_SoftThreshold(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SoftThreshold(arg1, arg2, arg3, arg4)
SDA_SoftThreshold = _siglib_wrap.SDA_SoftThreshold

def SDA_ThresholdAndClamp(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ThresholdAndClamp(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_ThresholdAndClamp = _siglib_wrap.SDA_ThresholdAndClamp

def SDA_TestOverThreshold(arg1, arg2, arg3):
    return _siglib_wrap.SDA_TestOverThreshold(arg1, arg2, arg3)
SDA_TestOverThreshold = _siglib_wrap.SDA_TestOverThreshold

def SDA_TestAbsOverThreshold(arg1, arg2, arg3):
    return _siglib_wrap.SDA_TestAbsOverThreshold(arg1, arg2, arg3)
SDA_TestAbsOverThreshold = _siglib_wrap.SDA_TestAbsOverThreshold

def SDA_Clamp(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Clamp(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Clamp = _siglib_wrap.SDA_Clamp

def SDA_SelectMax(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SelectMax(arg1, arg2, arg3, arg4)
SDA_SelectMax = _siglib_wrap.SDA_SelectMax

def SDA_SelectMin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SelectMin(arg1, arg2, arg3, arg4)
SDA_SelectMin = _siglib_wrap.SDA_SelectMin

def SDA_SelectMagnitudeSquaredMax(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_SelectMagnitudeSquaredMax(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_SelectMagnitudeSquaredMax = _siglib_wrap.SDA_SelectMagnitudeSquaredMax

def SDA_SelectMagnitudeSquaredMin(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_SelectMagnitudeSquaredMin(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_SelectMagnitudeSquaredMin = _siglib_wrap.SDA_SelectMagnitudeSquaredMin

def SDA_SetMinValue(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SetMinValue(arg1, arg2, arg3, arg4)
SDA_SetMinValue = _siglib_wrap.SDA_SetMinValue

def SDA_PeakToAverageRatio(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PeakToAverageRatio(arg1, arg2, arg3)
SDA_PeakToAverageRatio = _siglib_wrap.SDA_PeakToAverageRatio

def SDA_PeakToAveragePowerRatio(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PeakToAveragePowerRatio(arg1, arg2, arg3)
SDA_PeakToAveragePowerRatio = _siglib_wrap.SDA_PeakToAveragePowerRatio

def SDA_PeakToAveragePowerRatioDB(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PeakToAveragePowerRatioDB(arg1, arg2, arg3)
SDA_PeakToAveragePowerRatioDB = _siglib_wrap.SDA_PeakToAveragePowerRatioDB

def SDA_PeakToAverageRatioComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PeakToAverageRatioComplex(arg1, arg2, arg3, arg4)
SDA_PeakToAverageRatioComplex = _siglib_wrap.SDA_PeakToAverageRatioComplex

def SDA_PeakToAveragePowerRatioComplex(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PeakToAveragePowerRatioComplex(arg1, arg2, arg3, arg4)
SDA_PeakToAveragePowerRatioComplex = _siglib_wrap.SDA_PeakToAveragePowerRatioComplex

def SDA_PeakToAveragePowerRatioComplexDB(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PeakToAveragePowerRatioComplexDB(arg1, arg2, arg3, arg4)
SDA_PeakToAveragePowerRatioComplexDB = _siglib_wrap.SDA_PeakToAveragePowerRatioComplexDB

def SDA_MovePeakTowardsDeadBand(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MovePeakTowardsDeadBand(arg1, arg2, arg3, arg4, arg5)
SDA_MovePeakTowardsDeadBand = _siglib_wrap.SDA_MovePeakTowardsDeadBand

def SIF_Envelope(arg1):
    return _siglib_wrap.SIF_Envelope(arg1)
SIF_Envelope = _siglib_wrap.SIF_Envelope

def SDS_Envelope(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_Envelope(arg1, arg2, arg3, arg4)
SDS_Envelope = _siglib_wrap.SDS_Envelope

def SDA_Envelope(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Envelope(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Envelope = _siglib_wrap.SDA_Envelope

def SIF_EnvelopeRMS(arg1):
    return _siglib_wrap.SIF_EnvelopeRMS(arg1)
SIF_EnvelopeRMS = _siglib_wrap.SIF_EnvelopeRMS

def SDS_EnvelopeRMS(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_EnvelopeRMS(arg1, arg2, arg3, arg4)
SDS_EnvelopeRMS = _siglib_wrap.SDS_EnvelopeRMS

def SDA_EnvelopeRMS(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_EnvelopeRMS(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_EnvelopeRMS = _siglib_wrap.SDA_EnvelopeRMS

def SIF_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SIF_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SIF_EnvelopeHilbert = _siglib_wrap.SIF_EnvelopeHilbert

def SDS_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDS_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDS_EnvelopeHilbert = _siglib_wrap.SDS_EnvelopeHilbert

def SDA_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SDA_EnvelopeHilbert(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SDA_EnvelopeHilbert = _siglib_wrap.SDA_EnvelopeHilbert

def SDS_InterpolateThreePointQuadraticVertexMagnitude(arg1, arg2, arg3):
    return _siglib_wrap.SDS_InterpolateThreePointQuadraticVertexMagnitude(arg1, arg2, arg3)
SDS_InterpolateThreePointQuadraticVertexMagnitude = _siglib_wrap.SDS_InterpolateThreePointQuadraticVertexMagnitude

def SDS_InterpolateThreePointQuadraticVertexLocation(arg1, arg2, arg3):
    return _siglib_wrap.SDS_InterpolateThreePointQuadraticVertexLocation(arg1, arg2, arg3)
SDS_InterpolateThreePointQuadraticVertexLocation = _siglib_wrap.SDS_InterpolateThreePointQuadraticVertexLocation

def SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude = _siglib_wrap.SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude

def SDS_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_InterpolateArbitraryThreePointQuadraticVertexLocation = _siglib_wrap.SDS_InterpolateArbitraryThreePointQuadraticVertexLocation

def SDA_InterpolateThreePointQuadraticVertexMagnitude(arg1):
    return _siglib_wrap.SDA_InterpolateThreePointQuadraticVertexMagnitude(arg1)
SDA_InterpolateThreePointQuadraticVertexMagnitude = _siglib_wrap.SDA_InterpolateThreePointQuadraticVertexMagnitude

def SDA_InterpolateThreePointQuadraticVertexLocation(arg1):
    return _siglib_wrap.SDA_InterpolateThreePointQuadraticVertexLocation(arg1)
SDA_InterpolateThreePointQuadraticVertexLocation = _siglib_wrap.SDA_InterpolateThreePointQuadraticVertexLocation

def SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2):
    return _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1, arg2)
SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude = _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude

def SDA_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2):
    return _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1, arg2)
SDA_InterpolateArbitraryThreePointQuadraticVertexLocation = _siglib_wrap.SDA_InterpolateArbitraryThreePointQuadraticVertexLocation

def SDA_Divide(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Divide(arg1, arg2, arg3, arg4)
SDA_Divide = _siglib_wrap.SDA_Divide

def SDA_Divide2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Divide2(arg1, arg2, arg3, arg4)
SDA_Divide2 = _siglib_wrap.SDA_Divide2

def SDA_Multiply(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Multiply(arg1, arg2, arg3, arg4)
SDA_Multiply = _siglib_wrap.SDA_Multiply

def SDA_Multiply2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Multiply2(arg1, arg2, arg3, arg4)
SDA_Multiply2 = _siglib_wrap.SDA_Multiply2

def SDS_ComplexMultiply(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_ComplexMultiply(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_ComplexMultiply = _siglib_wrap.SDS_ComplexMultiply

def SDS_ComplexInverse(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_ComplexInverse(arg1, arg2, arg3, arg4)
SDS_ComplexInverse = _siglib_wrap.SDS_ComplexInverse

def SDS_ComplexDivide(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_ComplexDivide(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_ComplexDivide = _siglib_wrap.SDS_ComplexDivide

def SDA_ComplexScalarMultiply(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ComplexScalarMultiply(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_ComplexScalarMultiply = _siglib_wrap.SDA_ComplexScalarMultiply

def SDA_ComplexMultiply2(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ComplexMultiply2(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_ComplexMultiply2 = _siglib_wrap.SDA_ComplexMultiply2

def SDA_ComplexScalarDivide(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ComplexScalarDivide(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_ComplexScalarDivide = _siglib_wrap.SDA_ComplexScalarDivide

def SDA_ComplexDivide2(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ComplexDivide2(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_ComplexDivide2 = _siglib_wrap.SDA_ComplexDivide2

def SDA_RealDotProduct(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RealDotProduct(arg1, arg2, arg3)
SDA_RealDotProduct = _siglib_wrap.SDA_RealDotProduct

def SDA_ComplexDotProduct(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ComplexDotProduct(arg1, arg2, arg3, arg4, arg5)
SDA_ComplexDotProduct = _siglib_wrap.SDA_ComplexDotProduct

def SDA_Add2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Add2(arg1, arg2, arg3, arg4)
SDA_Add2 = _siglib_wrap.SDA_Add2

def SDA_Add3(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Add3(arg1, arg2, arg3, arg4, arg5)
SDA_Add3 = _siglib_wrap.SDA_Add3

def SDA_Add4(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Add4(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Add4 = _siglib_wrap.SDA_Add4

def SDA_Add5(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_Add5(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_Add5 = _siglib_wrap.SDA_Add5

def SDA_WeightedSum(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_WeightedSum(arg1, arg2, arg3, arg4, arg5)
SDA_WeightedSum = _siglib_wrap.SDA_WeightedSum

def SDA_Subtract2(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Subtract2(arg1, arg2, arg3, arg4)
SDA_Subtract2 = _siglib_wrap.SDA_Subtract2

def SDA_Offset(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Offset(arg1, arg2, arg3, arg4)
SDA_Offset = _siglib_wrap.SDA_Offset

def SDA_PositiveOffset(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PositiveOffset(arg1, arg2, arg3)
SDA_PositiveOffset = _siglib_wrap.SDA_PositiveOffset

def SDA_NegativeOffset(arg1, arg2, arg3):
    return _siglib_wrap.SDA_NegativeOffset(arg1, arg2, arg3)
SDA_NegativeOffset = _siglib_wrap.SDA_NegativeOffset

def SDA_Negate(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Negate(arg1, arg2, arg3)
SDA_Negate = _siglib_wrap.SDA_Negate

def SDA_Inverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Inverse(arg1, arg2, arg3)
SDA_Inverse = _siglib_wrap.SDA_Inverse

def SDA_Square(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Square(arg1, arg2, arg3)
SDA_Square = _siglib_wrap.SDA_Square

def SDA_Sqrt(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sqrt(arg1, arg2, arg3)
SDA_Sqrt = _siglib_wrap.SDA_Sqrt

def SDA_Difference(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Difference(arg1, arg2, arg3, arg4)
SDA_Difference = _siglib_wrap.SDA_Difference

def SDA_SumOfDifferences(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SumOfDifferences(arg1, arg2, arg3)
SDA_SumOfDifferences = _siglib_wrap.SDA_SumOfDifferences

def SDS_Roots(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_Roots(arg1, arg2, arg3, arg4, arg5)
SDS_Roots = _siglib_wrap.SDS_Roots

def SDS_Factorial(arg1):
    return _siglib_wrap.SDS_Factorial(arg1)
SDS_Factorial = _siglib_wrap.SDS_Factorial

def SDS_Permutations(n, k):
    return _siglib_wrap.SDS_Permutations(n, k)
SDS_Permutations = _siglib_wrap.SDS_Permutations

def SDS_Combinations(n, k):
    return _siglib_wrap.SDS_Combinations(n, k)
SDS_Combinations = _siglib_wrap.SDS_Combinations

def SIF_OverlapAndAddLinear(arg1, arg2):
    return _siglib_wrap.SIF_OverlapAndAddLinear(arg1, arg2)
SIF_OverlapAndAddLinear = _siglib_wrap.SIF_OverlapAndAddLinear

def SDA_OverlapAndAddLinear(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OverlapAndAddLinear(arg1, arg2, arg3, arg4, arg5)
SDA_OverlapAndAddLinear = _siglib_wrap.SDA_OverlapAndAddLinear

def SDA_OverlapAndAddLinearWithClip(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_OverlapAndAddLinearWithClip(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_OverlapAndAddLinearWithClip = _siglib_wrap.SDA_OverlapAndAddLinearWithClip

def SDA_OverlapAndAddArbitrary(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_OverlapAndAddArbitrary(arg1, arg2, arg3, arg4, arg5)
SDA_OverlapAndAddArbitrary = _siglib_wrap.SDA_OverlapAndAddArbitrary

def SDA_OverlapAndAddArbitraryWithClip(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_OverlapAndAddArbitraryWithClip(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_OverlapAndAddArbitraryWithClip = _siglib_wrap.SDA_OverlapAndAddArbitraryWithClip

def SDS_DegreesToRadians(arg1):
    return _siglib_wrap.SDS_DegreesToRadians(arg1)
SDS_DegreesToRadians = _siglib_wrap.SDS_DegreesToRadians

def SDA_DegreesToRadians(arg1, arg2, arg3):
    return _siglib_wrap.SDA_DegreesToRadians(arg1, arg2, arg3)
SDA_DegreesToRadians = _siglib_wrap.SDA_DegreesToRadians

def SDS_RadiansToDegrees(arg1):
    return _siglib_wrap.SDS_RadiansToDegrees(arg1)
SDS_RadiansToDegrees = _siglib_wrap.SDS_RadiansToDegrees

def SDA_RadiansToDegrees(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RadiansToDegrees(arg1, arg2, arg3)
SDA_RadiansToDegrees = _siglib_wrap.SDA_RadiansToDegrees

def SDA_Rotate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Rotate(arg1, arg2, arg3, arg4)
SDA_Rotate = _siglib_wrap.SDA_Rotate

def SDA_Reverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Reverse(arg1, arg2, arg3)
SDA_Reverse = _siglib_wrap.SDA_Reverse

def SDA_Scale(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Scale(arg1, arg2, arg3, arg4)
SDA_Scale = _siglib_wrap.SDA_Scale

def SDA_MeanSquare(arg1, arg2):
    return _siglib_wrap.SDA_MeanSquare(arg1, arg2)
SDA_MeanSquare = _siglib_wrap.SDA_MeanSquare

def SDA_MeanSquareError(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_MeanSquareError(arg1, arg2, arg3, arg4)
SDA_MeanSquareError = _siglib_wrap.SDA_MeanSquareError

def SDA_RootMeanSquare(arg1, arg2):
    return _siglib_wrap.SDA_RootMeanSquare(arg1, arg2)
SDA_RootMeanSquare = _siglib_wrap.SDA_RootMeanSquare

def SDA_Magnitude(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Magnitude(arg1, arg2, arg3, arg4)
SDA_Magnitude = _siglib_wrap.SDA_Magnitude

def SDA_MagnitudeSquared(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_MagnitudeSquared(arg1, arg2, arg3, arg4)
SDA_MagnitudeSquared = _siglib_wrap.SDA_MagnitudeSquared

def SDS_Magnitude(arg1, arg2):
    return _siglib_wrap.SDS_Magnitude(arg1, arg2)
SDS_Magnitude = _siglib_wrap.SDS_Magnitude

def SDS_MagnitudeSquared(arg1, arg2):
    return _siglib_wrap.SDS_MagnitudeSquared(arg1, arg2)
SDS_MagnitudeSquared = _siglib_wrap.SDS_MagnitudeSquared

def SDS_Phase(arg1, arg2):
    return _siglib_wrap.SDS_Phase(arg1, arg2)
SDS_Phase = _siglib_wrap.SDS_Phase

def SDA_PhaseWrapped(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PhaseWrapped(arg1, arg2, arg3, arg4)
SDA_PhaseWrapped = _siglib_wrap.SDA_PhaseWrapped

def SDA_PhaseUnWrapped(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PhaseUnWrapped(arg1, arg2, arg3, arg4)
SDA_PhaseUnWrapped = _siglib_wrap.SDA_PhaseUnWrapped

def SDA_MagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5)
SDA_MagnitudeAndPhaseWrapped = _siglib_wrap.SDA_MagnitudeAndPhaseWrapped

def SDA_MagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5)
SDA_MagnitudeAndPhaseUnWrapped = _siglib_wrap.SDA_MagnitudeAndPhaseUnWrapped

def SDA_MagnitudeSquaredAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeSquaredAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5)
SDA_MagnitudeSquaredAndPhaseWrapped = _siglib_wrap.SDA_MagnitudeSquaredAndPhaseWrapped

def SDA_MagnitudeSquaredAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_MagnitudeSquaredAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5)
SDA_MagnitudeSquaredAndPhaseUnWrapped = _siglib_wrap.SDA_MagnitudeSquaredAndPhaseUnWrapped

def SDA_PhaseWrap(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PhaseWrap(arg1, arg2, arg3)
SDA_PhaseWrap = _siglib_wrap.SDA_PhaseWrap

def SDA_PhaseUnWrap(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PhaseUnWrap(arg1, arg2, arg3)
SDA_PhaseUnWrap = _siglib_wrap.SDA_PhaseUnWrap

def SDS_Log2(arg1):
    return _siglib_wrap.SDS_Log2(arg1)
SDS_Log2 = _siglib_wrap.SDS_Log2

def SDA_Copy(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Copy(arg1, arg2, arg3)
SDA_Copy = _siglib_wrap.SDA_Copy

def SDA_CopyWithStride(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_CopyWithStride(arg1, arg2, arg3, arg4, arg5)
SDA_CopyWithStride = _siglib_wrap.SDA_CopyWithStride

def SIF_CopyWithOverlap(arg1):
    return _siglib_wrap.SIF_CopyWithOverlap(arg1)
SIF_CopyWithOverlap = _siglib_wrap.SIF_CopyWithOverlap

def SDA_CopyWithOverlap(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_CopyWithOverlap(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_CopyWithOverlap = _siglib_wrap.SDA_CopyWithOverlap

def SDA_20Log10(arg1, arg2, arg3):
    return _siglib_wrap.SDA_20Log10(arg1, arg2, arg3)
SDA_20Log10 = _siglib_wrap.SDA_20Log10

def SDA_10Log10(arg1, arg2, arg3):
    return _siglib_wrap.SDA_10Log10(arg1, arg2, arg3)
SDA_10Log10 = _siglib_wrap.SDA_10Log10

def SDA_LogMagnitude(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LogMagnitude(arg1, arg2, arg3, arg4)
SDA_LogMagnitude = _siglib_wrap.SDA_LogMagnitude

def SDA_LogMagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_LogMagnitudeAndPhaseWrapped(arg1, arg2, arg3, arg4, arg5)
SDA_LogMagnitudeAndPhaseWrapped = _siglib_wrap.SDA_LogMagnitudeAndPhaseWrapped

def SDA_LogMagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_LogMagnitudeAndPhaseUnWrapped(arg1, arg2, arg3, arg4, arg5)
SDA_LogMagnitudeAndPhaseUnWrapped = _siglib_wrap.SDA_LogMagnitudeAndPhaseUnWrapped

def SDA_Lengthen(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Lengthen(arg1, arg2, arg3, arg4)
SDA_Lengthen = _siglib_wrap.SDA_Lengthen

def SDA_Shorten(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Shorten(arg1, arg2, arg3)
SDA_Shorten = _siglib_wrap.SDA_Shorten

def SIF_ReSize(arg1):
    return _siglib_wrap.SIF_ReSize(arg1)
SIF_ReSize = _siglib_wrap.SIF_ReSize

def SDA_ReSize(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_ReSize(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_ReSize = _siglib_wrap.SDA_ReSize

def SDA_ReSizeInput(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ReSizeInput(arg1, arg2, arg3, arg4)
SDA_ReSizeInput = _siglib_wrap.SDA_ReSizeInput

def SDA_ReSizeOutput(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ReSizeOutput(arg1, arg2, arg3, arg4)
SDA_ReSizeOutput = _siglib_wrap.SDA_ReSizeOutput

def SDA_Fill(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Fill(arg1, arg2, arg3)
SDA_Fill = _siglib_wrap.SDA_Fill

def SDA_Clear(arg1, arg2):
    return _siglib_wrap.SDA_Clear(arg1, arg2)
SDA_Clear = _siglib_wrap.SDA_Clear

def SDA_Histogram(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Histogram(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Histogram = _siglib_wrap.SDA_Histogram

def SDA_HistogramCumulative(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_HistogramCumulative(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_HistogramCumulative = _siglib_wrap.SDA_HistogramCumulative

def SDA_HistogramExtended(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_HistogramExtended(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_HistogramExtended = _siglib_wrap.SDA_HistogramExtended

def SDA_HistogramExtendedCumulative(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_HistogramExtendedCumulative(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_HistogramExtendedCumulative = _siglib_wrap.SDA_HistogramExtendedCumulative

def SIF_Histogram(arg1, arg2):
    return _siglib_wrap.SIF_Histogram(arg1, arg2)
SIF_Histogram = _siglib_wrap.SIF_Histogram

def SDA_HistogramEqualize(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_HistogramEqualize(arg1, arg2, arg3, arg4)
SDA_HistogramEqualize = _siglib_wrap.SDA_HistogramEqualize

def SDA_Quantize(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Quantize(arg1, arg2, arg3, arg4, arg5)
SDA_Quantize = _siglib_wrap.SDA_Quantize

def SDS_Quantize(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Quantize(arg1, arg2, arg3)
SDS_Quantize = _siglib_wrap.SDS_Quantize

def SDA_Quantize_N(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Quantize_N(arg1, arg2, arg3, arg4)
SDA_Quantize_N = _siglib_wrap.SDA_Quantize_N

def SDS_Quantise_N(arg1, arg2):
    return _siglib_wrap.SDS_Quantise_N(arg1, arg2)
SDS_Quantise_N = _siglib_wrap.SDS_Quantise_N

def SDA_Abs(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Abs(arg1, arg2, arg3)
SDA_Abs = _siglib_wrap.SDA_Abs

def SDS_PeakValueToBits(arg1, arg2):
    return _siglib_wrap.SDS_PeakValueToBits(arg1, arg2)
SDS_PeakValueToBits = _siglib_wrap.SDS_PeakValueToBits

def SDS_BitsToPeakValue(arg1, arg2):
    return _siglib_wrap.SDS_BitsToPeakValue(arg1, arg2)
SDS_BitsToPeakValue = _siglib_wrap.SDS_BitsToPeakValue

def SDS_LinearTodBm(arg1, arg2):
    return _siglib_wrap.SDS_LinearTodBm(arg1, arg2)
SDS_LinearTodBm = _siglib_wrap.SDS_LinearTodBm

def SDA_LinearTodBm(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LinearTodBm(arg1, arg2, arg3, arg4)
SDA_LinearTodBm = _siglib_wrap.SDA_LinearTodBm

def SDS_dBmToLinear(arg1, arg2):
    return _siglib_wrap.SDS_dBmToLinear(arg1, arg2)
SDS_dBmToLinear = _siglib_wrap.SDS_dBmToLinear

def SDA_dBmToLinear(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_dBmToLinear(arg1, arg2, arg3, arg4)
SDA_dBmToLinear = _siglib_wrap.SDA_dBmToLinear

def SDS_Compare(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Compare(arg1, arg2, arg3)
SDS_Compare = _siglib_wrap.SDS_Compare

def SDA_Compare(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Compare(arg1, arg2, arg3, arg4)
SDA_Compare = _siglib_wrap.SDA_Compare

def SDS_CompareComplex(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDS_CompareComplex(arg1, arg2, arg3, arg4, arg5)
SDS_CompareComplex = _siglib_wrap.SDS_CompareComplex

def SDA_CompareComplex(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_CompareComplex(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_CompareComplex = _siglib_wrap.SDA_CompareComplex

def SDS_Int(arg1):
    return _siglib_wrap.SDS_Int(arg1)
SDS_Int = _siglib_wrap.SDS_Int

def SDS_Frac(arg1):
    return _siglib_wrap.SDS_Frac(arg1)
SDS_Frac = _siglib_wrap.SDS_Frac

def SDS_AbsFrac(arg1):
    return _siglib_wrap.SDS_AbsFrac(arg1)
SDS_AbsFrac = _siglib_wrap.SDS_AbsFrac

def SDA_Int(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Int(arg1, arg2, arg3)
SDA_Int = _siglib_wrap.SDA_Int

def SDA_Frac(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Frac(arg1, arg2, arg3)
SDA_Frac = _siglib_wrap.SDA_Frac

def SDA_AbsFrac(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AbsFrac(arg1, arg2, arg3)
SDA_AbsFrac = _siglib_wrap.SDA_AbsFrac

def SDA_SetRange(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SetRange(arg1, arg2, arg3, arg4, arg5)
SDA_SetRange = _siglib_wrap.SDA_SetRange

def SDA_SetMean(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SetMean(arg1, arg2, arg3, arg4, arg5)
SDA_SetMean = _siglib_wrap.SDA_SetMean

def SDA_RealSpectralInverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RealSpectralInverse(arg1, arg2, arg3)
SDA_RealSpectralInverse = _siglib_wrap.SDA_RealSpectralInverse

def SDA_ComplexSpectralInverse(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ComplexSpectralInverse(arg1, arg2, arg3, arg4, arg5)
SDA_ComplexSpectralInverse = _siglib_wrap.SDA_ComplexSpectralInverse

def SDA_FdInterpolate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FdInterpolate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_FdInterpolate = _siglib_wrap.SDA_FdInterpolate

def SDA_FdInterpolate2(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FdInterpolate2(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_FdInterpolate2 = _siglib_wrap.SDA_FdInterpolate2

def SDS_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDS_TdPitchShift = _siglib_wrap.SDS_TdPitchShift

def SDA_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_TdPitchShift(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_TdPitchShift = _siglib_wrap.SDA_TdPitchShift

def SDS_EchoGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_EchoGenerate(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDS_EchoGenerate = _siglib_wrap.SDS_EchoGenerate

def SDA_Power(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Power(arg1, arg2, arg3, arg4)
SDA_Power = _siglib_wrap.SDA_Power

def SDS_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDS_Polynomial = _siglib_wrap.SDS_Polynomial

def SDA_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SDA_Polynomial(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SDA_Polynomial = _siglib_wrap.SDA_Polynomial

def SDS_Modulo(arg1, arg2, arg3):
    return _siglib_wrap.SDS_Modulo(arg1, arg2, arg3)
SDS_Modulo = _siglib_wrap.SDS_Modulo

def SDA_Modulo(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Modulo(arg1, arg2, arg3, arg4, arg5)
SDA_Modulo = _siglib_wrap.SDA_Modulo

def SDA_AgcPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _siglib_wrap.SDA_AgcPeak(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
SDA_AgcPeak = _siglib_wrap.SDA_AgcPeak

def SIF_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SIF_AgcMeanAbs = _siglib_wrap.SIF_AgcMeanAbs

def SDA_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_AgcMeanAbs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_AgcMeanAbs = _siglib_wrap.SDA_AgcMeanAbs

def SIF_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SIF_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SIF_AgcMeanSquared = _siglib_wrap.SIF_AgcMeanSquared

def SDA_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _siglib_wrap.SDA_AgcMeanSquared(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
SDA_AgcMeanSquared = _siglib_wrap.SDA_AgcMeanSquared

def SDA_GroupDelay(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_GroupDelay(arg1, arg2, arg3, arg4)
SDA_GroupDelay = _siglib_wrap.SDA_GroupDelay

def SDA_ZeroCrossingDetect(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_ZeroCrossingDetect(arg1, arg2, arg3, arg4, arg5)
SDA_ZeroCrossingDetect = _siglib_wrap.SDA_ZeroCrossingDetect

def SDS_ZeroCrossingDetect(arg1, arg2, arg3):
    return _siglib_wrap.SDS_ZeroCrossingDetect(arg1, arg2, arg3)
SDS_ZeroCrossingDetect = _siglib_wrap.SDS_ZeroCrossingDetect

def SDA_FirstZeroCrossingLocation(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_FirstZeroCrossingLocation(arg1, arg2, arg3, arg4)
SDA_FirstZeroCrossingLocation = _siglib_wrap.SDA_FirstZeroCrossingLocation

def SDA_ZeroCrossingCount(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ZeroCrossingCount(arg1, arg2, arg3, arg4)
SDA_ZeroCrossingCount = _siglib_wrap.SDA_ZeroCrossingCount

def SDA_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4, arg5, arg6)
SDA_LevelCrossingDetect = _siglib_wrap.SDA_LevelCrossingDetect

def SDS_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4):
    return _siglib_wrap.SDS_LevelCrossingDetect(arg1, DetectionLevel, arg3, arg4)
SDS_LevelCrossingDetect = _siglib_wrap.SDS_LevelCrossingDetect

def SDA_FirstLevelCrossingLocation(arg1, DetectionLevel, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FirstLevelCrossingLocation(arg1, DetectionLevel, arg3, arg4, arg5)
SDA_FirstLevelCrossingLocation = _siglib_wrap.SDA_FirstLevelCrossingLocation

def SDA_LevelCrossingCount(arg1, DetectionLevel, arg3, arg4, arg5):
    return _siglib_wrap.SDA_LevelCrossingCount(arg1, DetectionLevel, arg3, arg4, arg5)
SDA_LevelCrossingCount = _siglib_wrap.SDA_LevelCrossingCount

def SDA_Trigger(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Trigger(arg1, arg2, arg3, arg4, arg5)
SDA_Trigger = _siglib_wrap.SDA_Trigger

def SDA_ClearLocation(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ClearLocation(arg1, arg2, arg3)
SDA_ClearLocation = _siglib_wrap.SDA_ClearLocation

def SDA_SetLocation(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SetLocation(arg1, arg2, arg3, arg4)
SDA_SetLocation = _siglib_wrap.SDA_SetLocation

def SDA_SortMinToMax(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SortMinToMax(arg1, arg2, arg3)
SDA_SortMinToMax = _siglib_wrap.SDA_SortMinToMax

def SDA_SortMaxToMin(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SortMaxToMin(arg1, arg2, arg3)
SDA_SortMaxToMin = _siglib_wrap.SDA_SortMaxToMin

def SDS_CountOneBits(arg1):
    return _siglib_wrap.SDS_CountOneBits(arg1)
SDS_CountOneBits = _siglib_wrap.SDS_CountOneBits

def SDS_CountZeroBits(arg1):
    return _siglib_wrap.SDS_CountZeroBits(arg1)
SDS_CountZeroBits = _siglib_wrap.SDS_CountZeroBits

def SDS_CountLeadingOneBits(arg1):
    return _siglib_wrap.SDS_CountLeadingOneBits(arg1)
SDS_CountLeadingOneBits = _siglib_wrap.SDS_CountLeadingOneBits

def SDS_CountLeadingZeroBits(arg1):
    return _siglib_wrap.SDS_CountLeadingZeroBits(arg1)
SDS_CountLeadingZeroBits = _siglib_wrap.SDS_CountLeadingZeroBits

def SDA_Sign(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sign(arg1, arg2, arg3)
SDA_Sign = _siglib_wrap.SDA_Sign

def SDA_Swap(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Swap(arg1, arg2, arg3)
SDA_Swap = _siglib_wrap.SDA_Swap

def SUF_ModuloIncrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_ModuloIncrement(arg1, arg2, arg3)
SUF_ModuloIncrement = _siglib_wrap.SUF_ModuloIncrement

def SUF_ModuloDecrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_ModuloDecrement(arg1, arg2, arg3)
SUF_ModuloDecrement = _siglib_wrap.SUF_ModuloDecrement

def SUF_IndexModuloIncrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_IndexModuloIncrement(arg1, arg2, arg3)
SUF_IndexModuloIncrement = _siglib_wrap.SUF_IndexModuloIncrement

def SUF_IndexModuloDecrement(arg1, arg2, arg3):
    return _siglib_wrap.SUF_IndexModuloDecrement(arg1, arg2, arg3)
SUF_IndexModuloDecrement = _siglib_wrap.SUF_IndexModuloDecrement

def SDA_Find(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_Find(arg1, arg2, arg3, arg4, arg5)
SDA_Find = _siglib_wrap.SDA_Find

def SDA_FindValue(arg1, DesiredValue, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FindValue(arg1, DesiredValue, arg3, arg4, arg5, arg6)
SDA_FindValue = _siglib_wrap.SDA_FindValue

def SIF_DeGlitch(arg1, arg2, arg3):
    return _siglib_wrap.SIF_DeGlitch(arg1, arg2, arg3)
SIF_DeGlitch = _siglib_wrap.SIF_DeGlitch

def SDS_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_DeGlitch = _siglib_wrap.SDS_DeGlitch

def SDA_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _siglib_wrap.SDA_DeGlitch(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
SDA_DeGlitch = _siglib_wrap.SDA_DeGlitch

def SDA_RemoveDuplicates(arg1, arg2, arg3):
    return _siglib_wrap.SDA_RemoveDuplicates(arg1, arg2, arg3)
SDA_RemoveDuplicates = _siglib_wrap.SDA_RemoveDuplicates

def SDA_FindAllDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindAllDuplicates(arg1, arg2, arg3, arg4, arg5)
SDA_FindAllDuplicates = _siglib_wrap.SDA_FindAllDuplicates

def SDA_FindFirstDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindFirstDuplicates(arg1, arg2, arg3, arg4, arg5)
SDA_FindFirstDuplicates = _siglib_wrap.SDA_FindFirstDuplicates

def SDA_FindSortAllDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindSortAllDuplicates(arg1, arg2, arg3, arg4, arg5)
SDA_FindSortAllDuplicates = _siglib_wrap.SDA_FindSortAllDuplicates

def SDA_FindSortFirstDuplicates(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_FindSortFirstDuplicates(arg1, arg2, arg3, arg4, arg5)
SDA_FindSortFirstDuplicates = _siglib_wrap.SDA_FindSortFirstDuplicates

def SDA_SigLibDataToFix(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToFix(arg1, arg2, arg3)
SDA_SigLibDataToFix = _siglib_wrap.SDA_SigLibDataToFix

def SDA_FixToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FixToSigLibData(arg1, arg2, arg3)
SDA_FixToSigLibData = _siglib_wrap.SDA_FixToSigLibData

def SDA_SigLibDataToImageData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToImageData(arg1, arg2, arg3)
SDA_SigLibDataToImageData = _siglib_wrap.SDA_SigLibDataToImageData

def SDA_ImageDataToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ImageDataToSigLibData(arg1, arg2, arg3)
SDA_ImageDataToSigLibData = _siglib_wrap.SDA_ImageDataToSigLibData

def SDA_SigLibDataToFix16(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToFix16(arg1, arg2, arg3)
SDA_SigLibDataToFix16 = _siglib_wrap.SDA_SigLibDataToFix16

def SDA_Fix16ToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Fix16ToSigLibData(arg1, arg2, arg3)
SDA_Fix16ToSigLibData = _siglib_wrap.SDA_Fix16ToSigLibData

def SDA_SigLibDataToFix32(arg1, arg2, arg3):
    return _siglib_wrap.SDA_SigLibDataToFix32(arg1, arg2, arg3)
SDA_SigLibDataToFix32 = _siglib_wrap.SDA_SigLibDataToFix32

def SDA_Fix32ToSigLibData(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Fix32ToSigLibData(arg1, arg2, arg3)
SDA_Fix32ToSigLibData = _siglib_wrap.SDA_Fix32ToSigLibData

def SDS_SigLibDataToQFormatInteger(x, arg2, arg3):
    return _siglib_wrap.SDS_SigLibDataToQFormatInteger(x, arg2, arg3)
SDS_SigLibDataToQFormatInteger = _siglib_wrap.SDS_SigLibDataToQFormatInteger

def SDS_QFormatIntegerToSigLibData(arg1, arg2):
    return _siglib_wrap.SDS_QFormatIntegerToSigLibData(arg1, arg2)
SDS_QFormatIntegerToSigLibData = _siglib_wrap.SDS_QFormatIntegerToSigLibData

def SDA_SigLibDataToQFormatInteger(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SigLibDataToQFormatInteger(arg1, arg2, arg3, arg4, arg5)
SDA_SigLibDataToQFormatInteger = _siglib_wrap.SDA_SigLibDataToQFormatInteger

def SDA_QFormatIntegerToSigLibData(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_QFormatIntegerToSigLibData(arg1, arg2, arg3, arg4)
SDA_QFormatIntegerToSigLibData = _siglib_wrap.SDA_QFormatIntegerToSigLibData

def SDS_Pid(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDS_Pid(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDS_Pid = _siglib_wrap.SDS_Pid

def SDA_Pwm(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_Pwm(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_Pwm = _siglib_wrap.SDA_Pwm

def SDA_ExtractOrder(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_ExtractOrder(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_ExtractOrder = _siglib_wrap.SDA_ExtractOrder

def SDA_SumLevel(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SumLevel(arg1, arg2, arg3, arg4)
SDA_SumLevel = _siglib_wrap.SDA_SumLevel

def SDA_SumLevelWholeSpectrum(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_SumLevelWholeSpectrum(arg1, arg2, arg3, arg4, arg5)
SDA_SumLevelWholeSpectrum = _siglib_wrap.SDA_SumLevelWholeSpectrum

def SIF_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _siglib_wrap.SIF_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
SIF_OrderAnalysis = _siglib_wrap.SIF_OrderAnalysis

def SDA_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26):
    return _siglib_wrap.SDA_OrderAnalysis(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26)
SDA_OrderAnalysis = _siglib_wrap.SDA_OrderAnalysis

def SDA_Sum(arg1, arg2):
    return _siglib_wrap.SDA_Sum(arg1, arg2)
SDA_Sum = _siglib_wrap.SDA_Sum

def SDA_AbsSum(arg1, arg2):
    return _siglib_wrap.SDA_AbsSum(arg1, arg2)
SDA_AbsSum = _siglib_wrap.SDA_AbsSum

def SDA_SumOfSquares(arg1, arg2):
    return _siglib_wrap.SDA_SumOfSquares(arg1, arg2)
SDA_SumOfSquares = _siglib_wrap.SDA_SumOfSquares

def SDA_Mean(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Mean(arg1, arg2, arg3)
SDA_Mean = _siglib_wrap.SDA_Mean

def SDA_AbsMean(arg1, arg2, arg3):
    return _siglib_wrap.SDA_AbsMean(arg1, arg2, arg3)
SDA_AbsMean = _siglib_wrap.SDA_AbsMean

def SDA_SubtractMean(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_SubtractMean(arg1, arg2, arg3, arg4)
SDA_SubtractMean = _siglib_wrap.SDA_SubtractMean

def SDA_SampleSd(arg1, arg2):
    return _siglib_wrap.SDA_SampleSd(arg1, arg2)
SDA_SampleSd = _siglib_wrap.SDA_SampleSd

def SDA_PopulationSd(arg1, arg2):
    return _siglib_wrap.SDA_PopulationSd(arg1, arg2)
SDA_PopulationSd = _siglib_wrap.SDA_PopulationSd

def SDA_UnbiasedVariance(arg1, arg2):
    return _siglib_wrap.SDA_UnbiasedVariance(arg1, arg2)
SDA_UnbiasedVariance = _siglib_wrap.SDA_UnbiasedVariance

def SDA_Median(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Median(arg1, arg2, arg3)
SDA_Median = _siglib_wrap.SDA_Median

def SDA_LinraConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LinraConstantCoeff(arg1, arg2, arg3)
SDA_LinraConstantCoeff = _siglib_wrap.SDA_LinraConstantCoeff

def SDA_LinraRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LinraRegressionCoeff(arg1, arg2, arg3)
SDA_LinraRegressionCoeff = _siglib_wrap.SDA_LinraRegressionCoeff

def SDA_LinraCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LinraCorrelationCoeff(arg1, arg2, arg3)
SDA_LinraCorrelationCoeff = _siglib_wrap.SDA_LinraCorrelationCoeff

def SDA_LinraEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LinraEstimateX(arg1, arg2, arg3, arg4)
SDA_LinraEstimateX = _siglib_wrap.SDA_LinraEstimateX

def SDA_LinraEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LinraEstimateY(arg1, arg2, arg3, arg4)
SDA_LinraEstimateY = _siglib_wrap.SDA_LinraEstimateY

def SDA_LograConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LograConstantCoeff(arg1, arg2, arg3)
SDA_LograConstantCoeff = _siglib_wrap.SDA_LograConstantCoeff

def SDA_LograRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LograRegressionCoeff(arg1, arg2, arg3)
SDA_LograRegressionCoeff = _siglib_wrap.SDA_LograRegressionCoeff

def SDA_LograCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_LograCorrelationCoeff(arg1, arg2, arg3)
SDA_LograCorrelationCoeff = _siglib_wrap.SDA_LograCorrelationCoeff

def SDA_LograEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LograEstimateX(arg1, arg2, arg3, arg4)
SDA_LograEstimateX = _siglib_wrap.SDA_LograEstimateX

def SDA_LograEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_LograEstimateY(arg1, arg2, arg3, arg4)
SDA_LograEstimateY = _siglib_wrap.SDA_LograEstimateY

def SDA_ExpraConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ExpraConstantCoeff(arg1, arg2, arg3)
SDA_ExpraConstantCoeff = _siglib_wrap.SDA_ExpraConstantCoeff

def SDA_ExpraRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ExpraRegressionCoeff(arg1, arg2, arg3)
SDA_ExpraRegressionCoeff = _siglib_wrap.SDA_ExpraRegressionCoeff

def SDA_ExpraCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ExpraCorrelationCoeff(arg1, arg2, arg3)
SDA_ExpraCorrelationCoeff = _siglib_wrap.SDA_ExpraCorrelationCoeff

def SDA_ExpraEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExpraEstimateX(arg1, arg2, arg3, arg4)
SDA_ExpraEstimateX = _siglib_wrap.SDA_ExpraEstimateX

def SDA_ExpraEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExpraEstimateY(arg1, arg2, arg3, arg4)
SDA_ExpraEstimateY = _siglib_wrap.SDA_ExpraEstimateY

def SDA_PowraConstantCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowraConstantCoeff(arg1, arg2, arg3)
SDA_PowraConstantCoeff = _siglib_wrap.SDA_PowraConstantCoeff

def SDA_PowraRegressionCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowraRegressionCoeff(arg1, arg2, arg3)
SDA_PowraRegressionCoeff = _siglib_wrap.SDA_PowraRegressionCoeff

def SDA_PowraCorrelationCoeff(arg1, arg2, arg3):
    return _siglib_wrap.SDA_PowraCorrelationCoeff(arg1, arg2, arg3)
SDA_PowraCorrelationCoeff = _siglib_wrap.SDA_PowraCorrelationCoeff

def SDA_PowraEstimateX(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PowraEstimateX(arg1, arg2, arg3, arg4)
SDA_PowraEstimateX = _siglib_wrap.SDA_PowraEstimateX

def SDA_PowraEstimateY(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_PowraEstimateY(arg1, arg2, arg3, arg4)
SDA_PowraEstimateY = _siglib_wrap.SDA_PowraEstimateY

def SDA_Detrend(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_Detrend(arg1, arg2, arg3, arg4)
SDA_Detrend = _siglib_wrap.SDA_Detrend

def SDA_ExtractTrend(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractTrend(arg1, arg2, arg3, arg4)
SDA_ExtractTrend = _siglib_wrap.SDA_ExtractTrend

def SDA_Sin(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sin(arg1, arg2, arg3)
SDA_Sin = _siglib_wrap.SDA_Sin

def SDA_Cos(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Cos(arg1, arg2, arg3)
SDA_Cos = _siglib_wrap.SDA_Cos

def SDA_Tan(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Tan(arg1, arg2, arg3)
SDA_Tan = _siglib_wrap.SDA_Tan

def SIF_FastSin(arg1, arg2):
    return _siglib_wrap.SIF_FastSin(arg1, arg2)
SIF_FastSin = _siglib_wrap.SIF_FastSin

def SDA_FastSin(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FastSin(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_FastSin = _siglib_wrap.SDA_FastSin

def SDS_FastSin(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FastSin(arg1, arg2, arg3, arg4)
SDS_FastSin = _siglib_wrap.SDS_FastSin

def SIF_FastCos(arg1, arg2):
    return _siglib_wrap.SIF_FastCos(arg1, arg2)
SIF_FastCos = _siglib_wrap.SIF_FastCos

def SDA_FastCos(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDA_FastCos(arg1, arg2, arg3, arg4, arg5, arg6)
SDA_FastCos = _siglib_wrap.SDA_FastCos

def SDS_FastCos(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDS_FastCos(arg1, arg2, arg3, arg4)
SDS_FastCos = _siglib_wrap.SDS_FastCos

def SIF_FastSinCos(arg1, arg2):
    return _siglib_wrap.SIF_FastSinCos(arg1, arg2)
SIF_FastSinCos = _siglib_wrap.SIF_FastSinCos

def SDA_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_FastSinCos = _siglib_wrap.SDA_FastSinCos

def SDS_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_FastSinCos(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_FastSinCos = _siglib_wrap.SDS_FastSinCos

def SIF_QuickSin(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickSin(arg1, arg2, arg3)
SIF_QuickSin = _siglib_wrap.SIF_QuickSin

def SDA_QuickSin(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickSin(arg1, arg2, arg3, arg4, arg5)
SDA_QuickSin = _siglib_wrap.SDA_QuickSin

def SDS_QuickSin(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickSin(arg1, arg2, arg3)
SDS_QuickSin = _siglib_wrap.SDS_QuickSin

def SIF_QuickCos(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickCos(arg1, arg2, arg3)
SIF_QuickCos = _siglib_wrap.SIF_QuickCos

def SDA_QuickCos(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickCos(arg1, arg2, arg3, arg4, arg5)
SDA_QuickCos = _siglib_wrap.SDA_QuickCos

def SDS_QuickCos(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickCos(arg1, arg2, arg3)
SDS_QuickCos = _siglib_wrap.SDS_QuickCos

def SIF_QuickSinCos(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickSinCos(arg1, arg2, arg3)
SIF_QuickSinCos = _siglib_wrap.SIF_QuickSinCos

def SDA_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SDA_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SDA_QuickSinCos = _siglib_wrap.SDA_QuickSinCos

def SDS_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SDS_QuickSinCos(arg1, arg2, arg3, arg4, arg5, arg6)
SDS_QuickSinCos = _siglib_wrap.SDS_QuickSinCos

def SIF_QuickTan(arg1, arg2, arg3):
    return _siglib_wrap.SIF_QuickTan(arg1, arg2, arg3)
SIF_QuickTan = _siglib_wrap.SIF_QuickTan

def SDA_QuickTan(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickTan(arg1, arg2, arg3, arg4, arg5)
SDA_QuickTan = _siglib_wrap.SDA_QuickTan

def SDS_QuickTan(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickTan(arg1, arg2, arg3)
SDS_QuickTan = _siglib_wrap.SDS_QuickTan

def SDA_Sinc(arg1, arg2, arg3):
    return _siglib_wrap.SDA_Sinc(arg1, arg2, arg3)
SDA_Sinc = _siglib_wrap.SDA_Sinc

def SDS_Sinc(arg1):
    return _siglib_wrap.SDS_Sinc(arg1)
SDS_Sinc = _siglib_wrap.SDS_Sinc

def SIF_QuickSinc(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SIF_QuickSinc(arg1, arg2, arg3, arg4)
SIF_QuickSinc = _siglib_wrap.SIF_QuickSinc

def SDA_QuickSinc(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_QuickSinc(arg1, arg2, arg3, arg4, arg5)
SDA_QuickSinc = _siglib_wrap.SDA_QuickSinc

def SDS_QuickSinc(arg1, arg2, arg3):
    return _siglib_wrap.SDS_QuickSinc(arg1, arg2, arg3)
SDS_QuickSinc = _siglib_wrap.SDS_QuickSinc

def SCV_Polar(arg1, arg2):
    return _siglib_wrap.SCV_Polar(arg1, arg2)
SCV_Polar = _siglib_wrap.SCV_Polar

def SCV_Rectangular(arg1, arg2):
    return _siglib_wrap.SCV_Rectangular(arg1, arg2)
SCV_Rectangular = _siglib_wrap.SCV_Rectangular

def SCV_PolarToRectangular(arg1):
    return _siglib_wrap.SCV_PolarToRectangular(arg1)
SCV_PolarToRectangular = _siglib_wrap.SCV_PolarToRectangular

def SCV_RectangularToPolar(arg1):
    return _siglib_wrap.SCV_RectangularToPolar(arg1)
SCV_RectangularToPolar = _siglib_wrap.SCV_RectangularToPolar

def SCV_Sqrt(arg1):
    return _siglib_wrap.SCV_Sqrt(arg1)
SCV_Sqrt = _siglib_wrap.SCV_Sqrt

def SCV_Inverse(arg1):
    return _siglib_wrap.SCV_Inverse(arg1)
SCV_Inverse = _siglib_wrap.SCV_Inverse

def SCV_Conjugate(arg1):
    return _siglib_wrap.SCV_Conjugate(arg1)
SCV_Conjugate = _siglib_wrap.SCV_Conjugate

def SCV_Magnitude(arg1):
    return _siglib_wrap.SCV_Magnitude(arg1)
SCV_Magnitude = _siglib_wrap.SCV_Magnitude

def SCV_MagnitudeSquared(arg1):
    return _siglib_wrap.SCV_MagnitudeSquared(arg1)
SCV_MagnitudeSquared = _siglib_wrap.SCV_MagnitudeSquared

def SCV_Phase(arg1):
    return _siglib_wrap.SCV_Phase(arg1)
SCV_Phase = _siglib_wrap.SCV_Phase

def SCV_Multiply(arg1, arg2):
    return _siglib_wrap.SCV_Multiply(arg1, arg2)
SCV_Multiply = _siglib_wrap.SCV_Multiply

def SCV_Divide(arg1, arg2):
    return _siglib_wrap.SCV_Divide(arg1, arg2)
SCV_Divide = _siglib_wrap.SCV_Divide

def SCV_Add(arg1, arg2):
    return _siglib_wrap.SCV_Add(arg1, arg2)
SCV_Add = _siglib_wrap.SCV_Add

def SCV_Subtract(arg1, arg2):
    return _siglib_wrap.SCV_Subtract(arg1, arg2)
SCV_Subtract = _siglib_wrap.SCV_Subtract

def SCV_Log(arg1):
    return _siglib_wrap.SCV_Log(arg1)
SCV_Log = _siglib_wrap.SCV_Log

def SCV_Exp(arg1):
    return _siglib_wrap.SCV_Exp(arg1)
SCV_Exp = _siglib_wrap.SCV_Exp

def SCV_Expj(arg1):
    return _siglib_wrap.SCV_Expj(arg1)
SCV_Expj = _siglib_wrap.SCV_Expj

def SCV_Pow(arg1, arg2):
    return _siglib_wrap.SCV_Pow(arg1, arg2)
SCV_Pow = _siglib_wrap.SCV_Pow

def SCV_VectorAddScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorAddScalar(arg1, arg2)
SCV_VectorAddScalar = _siglib_wrap.SCV_VectorAddScalar

def SCV_VectorSubtractScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorSubtractScalar(arg1, arg2)
SCV_VectorSubtractScalar = _siglib_wrap.SCV_VectorSubtractScalar

def SCV_VectorMultiplyScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorMultiplyScalar(arg1, arg2)
SCV_VectorMultiplyScalar = _siglib_wrap.SCV_VectorMultiplyScalar

def SCV_VectorDivideScalar(arg1, arg2):
    return _siglib_wrap.SCV_VectorDivideScalar(arg1, arg2)
SCV_VectorDivideScalar = _siglib_wrap.SCV_VectorDivideScalar

def SCV_ScalarSubtractVector(arg1, arg2):
    return _siglib_wrap.SCV_ScalarSubtractVector(arg1, arg2)
SCV_ScalarSubtractVector = _siglib_wrap.SCV_ScalarSubtractVector

def SCV_Roots(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SCV_Roots(arg1, arg2, arg3, arg4, arg5)
SCV_Roots = _siglib_wrap.SCV_Roots

def SCV_Copy(arg1):
    return _siglib_wrap.SCV_Copy(arg1)
SCV_Copy = _siglib_wrap.SCV_Copy

def SCV_Compare(arg1, arg2):
    return _siglib_wrap.SCV_Compare(arg1, arg2)
SCV_Compare = _siglib_wrap.SCV_Compare

def SDA_CreateComplexRect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_CreateComplexRect(arg1, arg2, arg3, arg4)
SDA_CreateComplexRect = _siglib_wrap.SDA_CreateComplexRect

def SDA_CreateComplexPolar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_CreateComplexPolar(arg1, arg2, arg3, arg4)
SDA_CreateComplexPolar = _siglib_wrap.SDA_CreateComplexPolar

def SDA_ExtractComplexRect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractComplexRect(arg1, arg2, arg3, arg4)
SDA_ExtractComplexRect = _siglib_wrap.SDA_ExtractComplexRect

def SDA_ExtractComplexPolar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ExtractComplexPolar(arg1, arg2, arg3, arg4)
SDA_ExtractComplexPolar = _siglib_wrap.SDA_ExtractComplexPolar

def SDA_ClearComplexRect(arg1, arg2):
    return _siglib_wrap.SDA_ClearComplexRect(arg1, arg2)
SDA_ClearComplexRect = _siglib_wrap.SDA_ClearComplexRect

def SDA_ClearComplexPolar(arg1, arg2):
    return _siglib_wrap.SDA_ClearComplexPolar(arg1, arg2)
SDA_ClearComplexPolar = _siglib_wrap.SDA_ClearComplexPolar

def SDA_FillComplexRect(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FillComplexRect(arg1, arg2, arg3)
SDA_FillComplexRect = _siglib_wrap.SDA_FillComplexRect

def SDA_FillComplexPolar(arg1, arg2, arg3):
    return _siglib_wrap.SDA_FillComplexPolar(arg1, arg2, arg3)
SDA_FillComplexPolar = _siglib_wrap.SDA_FillComplexPolar

def SDA_ComplexRectangularToPolar(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexRectangularToPolar(arg1, arg2, arg3)
SDA_ComplexRectangularToPolar = _siglib_wrap.SDA_ComplexRectangularToPolar

def SDA_ComplexPolarToRectangular(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexPolarToRectangular(arg1, arg2, arg3)
SDA_ComplexPolarToRectangular = _siglib_wrap.SDA_ComplexPolarToRectangular

def SDA_RectangularToPolar(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_RectangularToPolar(arg1, arg2, arg3, arg4, arg5)
SDA_RectangularToPolar = _siglib_wrap.SDA_RectangularToPolar

def SDA_PolarToRectangular(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SDA_PolarToRectangular(arg1, arg2, arg3, arg4, arg5)
SDA_PolarToRectangular = _siglib_wrap.SDA_PolarToRectangular

def SDA_ComplexSqrt(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexSqrt(arg1, arg2, arg3)
SDA_ComplexSqrt = _siglib_wrap.SDA_ComplexSqrt

def SDA_ComplexInverse(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexInverse(arg1, arg2, arg3)
SDA_ComplexInverse = _siglib_wrap.SDA_ComplexInverse

def SDA_ComplexConjugate(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexConjugate(arg1, arg2, arg3)
SDA_ComplexConjugate = _siglib_wrap.SDA_ComplexConjugate

def SDA_ComplexMagnitude(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexMagnitude(arg1, arg2, arg3)
SDA_ComplexMagnitude = _siglib_wrap.SDA_ComplexMagnitude

def SDA_ComplexMagnitudeSquared(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexMagnitudeSquared(arg1, arg2, arg3)
SDA_ComplexMagnitudeSquared = _siglib_wrap.SDA_ComplexMagnitudeSquared

def SDA_ComplexPhase(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexPhase(arg1, arg2, arg3)
SDA_ComplexPhase = _siglib_wrap.SDA_ComplexPhase

def SDA_ComplexMultiply(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexMultiply(arg1, arg2, arg3, arg4)
SDA_ComplexMultiply = _siglib_wrap.SDA_ComplexMultiply

def SDA_ComplexDivide(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexDivide(arg1, arg2, arg3, arg4)
SDA_ComplexDivide = _siglib_wrap.SDA_ComplexDivide

def SDA_ComplexAdd(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexAdd(arg1, arg2, arg3, arg4)
SDA_ComplexAdd = _siglib_wrap.SDA_ComplexAdd

def SDA_ComplexSubtract(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexSubtract(arg1, arg2, arg3, arg4)
SDA_ComplexSubtract = _siglib_wrap.SDA_ComplexSubtract

def SDA_ComplexLog(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexLog(arg1, arg2, arg3)
SDA_ComplexLog = _siglib_wrap.SDA_ComplexLog

def SDA_ComplexExp(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexExp(arg1, arg2, arg3)
SDA_ComplexExp = _siglib_wrap.SDA_ComplexExp

def SDA_ComplexExpj(arg1, arg2, arg3):
    return _siglib_wrap.SDA_ComplexExpj(arg1, arg2, arg3)
SDA_ComplexExpj = _siglib_wrap.SDA_ComplexExpj

def SDA_ComplexPow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexPow(arg1, arg2, arg3, arg4)
SDA_ComplexPow = _siglib_wrap.SDA_ComplexPow

def SDA_ComplexVectorAddScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexVectorAddScalar(arg1, arg2, arg3, arg4)
SDA_ComplexVectorAddScalar = _siglib_wrap.SDA_ComplexVectorAddScalar

def SDA_ComplexVectorSubtractScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexVectorSubtractScalar(arg1, arg2, arg3, arg4)
SDA_ComplexVectorSubtractScalar = _siglib_wrap.SDA_ComplexVectorSubtractScalar

def SDA_ComplexVectorMultiplyScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexVectorMultiplyScalar(arg1, arg2, arg3, arg4)
SDA_ComplexVectorMultiplyScalar = _siglib_wrap.SDA_ComplexVectorMultiplyScalar

def SDA_ComplexVectorDivideScalar(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexVectorDivideScalar(arg1, arg2, arg3, arg4)
SDA_ComplexVectorDivideScalar = _siglib_wrap.SDA_ComplexVectorDivideScalar

def SDA_ComplexScalarSubtractVector(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexScalarSubtractVector(arg1, arg2, arg3, arg4)
SDA_ComplexScalarSubtractVector = _siglib_wrap.SDA_ComplexScalarSubtractVector

def SDA_ComplexRectangularLinearInterpolate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexRectangularLinearInterpolate(arg1, arg2, arg3, arg4)
SDA_ComplexRectangularLinearInterpolate = _siglib_wrap.SDA_ComplexRectangularLinearInterpolate

def SDA_ComplexPolarLinearInterpolate(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SDA_ComplexPolarLinearInterpolate(arg1, arg2, arg3, arg4)
SDA_ComplexPolarLinearInterpolate = _siglib_wrap.SDA_ComplexPolarLinearInterpolate

def SMX_Transpose(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Transpose(arg1, arg2, arg3, arg4)
SMX_Transpose = _siglib_wrap.SMX_Transpose

def SMX_Multiply(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_Multiply(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_Multiply = _siglib_wrap.SMX_Multiply

def SMX_CreateIdentity(arg1, arg2):
    return _siglib_wrap.SMX_CreateIdentity(arg1, arg2)
SMX_CreateIdentity = _siglib_wrap.SMX_CreateIdentity

def SMX_Inverse2x2(arg1, arg2):
    return _siglib_wrap.SMX_Inverse2x2(arg1, arg2)
SMX_Inverse2x2 = _siglib_wrap.SMX_Inverse2x2

def SMX_ComplexInverse2x2(arg1, arg2):
    return _siglib_wrap.SMX_ComplexInverse2x2(arg1, arg2)
SMX_ComplexInverse2x2 = _siglib_wrap.SMX_ComplexInverse2x2

def SMX_Inverse(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SMX_Inverse(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SMX_Inverse = _siglib_wrap.SMX_Inverse

def SMX_LuDecompose(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_LuDecompose(arg1, arg2, arg3, arg4)
SMX_LuDecompose = _siglib_wrap.SMX_LuDecompose

def SMX_LuSolve(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_LuSolve(arg1, arg2, arg3, arg4)
SMX_LuSolve = _siglib_wrap.SMX_LuSolve

def SMX_Determinant(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_Determinant(arg1, arg2, arg3, arg4, arg5)
SMX_Determinant = _siglib_wrap.SMX_Determinant

def SMX_LuDeterminant(arg1, arg2, arg3):
    return _siglib_wrap.SMX_LuDeterminant(arg1, arg2, arg3)
SMX_LuDeterminant = _siglib_wrap.SMX_LuDeterminant

def SMX_RotateClockwise(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_RotateClockwise(arg1, arg2, arg3, arg4)
SMX_RotateClockwise = _siglib_wrap.SMX_RotateClockwise

def SMX_RotateAntiClockwise(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_RotateAntiClockwise(arg1, arg2, arg3, arg4)
SMX_RotateAntiClockwise = _siglib_wrap.SMX_RotateAntiClockwise

def SMX_Reflect(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Reflect(arg1, arg2, arg3, arg4)
SMX_Reflect = _siglib_wrap.SMX_Reflect

def SMX_Flip(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Flip(arg1, arg2, arg3, arg4)
SMX_Flip = _siglib_wrap.SMX_Flip

def SMX_InsertRow(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertRow(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_InsertRow = _siglib_wrap.SMX_InsertRow

def SMX_ExtractRow(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_ExtractRow(arg1, arg2, arg3, arg4)
SMX_ExtractRow = _siglib_wrap.SMX_ExtractRow

def SMX_InsertColumn(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertColumn(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_InsertColumn = _siglib_wrap.SMX_InsertColumn

def SMX_ExtractColumn(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_ExtractColumn(arg1, arg2, arg3, arg4, arg5)
SMX_ExtractColumn = _siglib_wrap.SMX_ExtractColumn

def SMX_InsertNewRow(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertNewRow(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_InsertNewRow = _siglib_wrap.SMX_InsertNewRow

def SMX_DeleteOldRow(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_DeleteOldRow(arg1, arg2, arg3, arg4, arg5)
SMX_DeleteOldRow = _siglib_wrap.SMX_DeleteOldRow

def SMX_InsertNewColumn(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_InsertNewColumn(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_InsertNewColumn = _siglib_wrap.SMX_InsertNewColumn

def SMX_DeleteOldColumn(arg1, arg2, arg3, arg4, arg5):
    return _siglib_wrap.SMX_DeleteOldColumn(arg1, arg2, arg3, arg4, arg5)
SMX_DeleteOldColumn = _siglib_wrap.SMX_DeleteOldColumn

def SMX_InsertRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _siglib_wrap.SMX_InsertRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
SMX_InsertRegion = _siglib_wrap.SMX_InsertRegion

def SMX_ExtractRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _siglib_wrap.SMX_ExtractRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
SMX_ExtractRegion = _siglib_wrap.SMX_ExtractRegion

def SMX_InsertDiagonal(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_InsertDiagonal(arg1, arg2, arg3, arg4)
SMX_InsertDiagonal = _siglib_wrap.SMX_InsertDiagonal

def SMX_ExtractDiagonal(arg1, arg2, arg3):
    return _siglib_wrap.SMX_ExtractDiagonal(arg1, arg2, arg3)
SMX_ExtractDiagonal = _siglib_wrap.SMX_ExtractDiagonal

def SMX_SwapRows(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_SwapRows(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_SwapRows = _siglib_wrap.SMX_SwapRows

def SMX_SwapColumns(arg1, arg2, arg3, arg4, arg5, arg6):
    return _siglib_wrap.SMX_SwapColumns(arg1, arg2, arg3, arg4, arg5, arg6)
SMX_SwapColumns = _siglib_wrap.SMX_SwapColumns

def SMX_Sum(arg1, arg2, arg3, arg4):
    return _siglib_wrap.SMX_Sum(arg1, arg2, arg3, arg4)
SMX_Sum = _siglib_wrap.SMX_Sum
# This file is compatible with both classic and new-style classes.



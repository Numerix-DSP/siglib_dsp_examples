unit SIGLIB;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 21/12/2020                                            }
{    Generated Time: 21:22:51                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> SIGLIB.H <=}

{+//************************************************************************* }
{-File Name : SIGLIB.H | Author : JOHN EDWARDS }
{-Siglib Library Version : 9.00 | }
{-----------------------------------------+---------------------------------- }
{-Compiler : Independent | Start Date : 13/09/1992 }
{-Options : | Latest Update : 17/11/2020 }
{---------------------------------------------------------------------------- }
{-Support for SigLib is available via EMail : support@numerix-dsp.com }

{-This file may be modified, in any way, providing that this header remains }
{-within the file and none of the header contents are removed or modified. }

{-THIS FILE MAY ONLY BE USED IN ACCORDANCE WITH THE TERMS OF THE NUMERIX LTD. }
{-END USER LICENSE AGREEMENT. }
{-DELETION OF ANY INFORMATION IN THIS HEADER IS IN VIOLATION OF YOUR LICENSE. }

{-Copyright (C) 1992 to 2020 Sigma Numerix Ltd. }
{---------------------------------------------------------------------------- }
{-Description : Header file for SigLib DSP library }

{-Update history : }
{-See history.txt for more details. }

{=*************************************************************************** }

{$IFNDEF SIGLIB // If SIGLIB not defined then declare library}

{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

const
  SIGLIB = 1; {// Indicates SigLib is being used}
const
  SIGLIB_VERSION = 9.00; {// Indicates SigLib version being used}
const
  SIGLIB_ENABLE_DEBUG_FPRINTF = 0; {// Set to 1 to enable SUF_Debugfprintf functions in some siglib functions}


{$IFNDEF SWIG}
{$INCLUDE <math.h> // Include standard math.h file}
{$INCLUDE <float.h> // Include standard float.h file}
{$INCLUDE <stdarg.h> // Include standard stdarg.h file}
{$INCLUDE <limits.h> // Include standard limits.h file}
{$INCLUDE <ctype.h> // Include standard ctype.h file}
{$INCLUDE <stdio.h> // Include standard stdio.h file}
{$INCLUDE <stdlib.h> // Include standard stdlib.h file}
{$INCLUDE <time.h> // Include standard time.h file}
{$ENDIF}

{$INCLUDE <siglib_processors.h> // Processor specific configuration information}
{$INCLUDE <siglib_constants.h> // Constant values}
{$INCLUDE <siglib_types.h> // Structure and enumerated types definitions}
{$INCLUDE <siglib_macros.h> // Macro definitions}

{$ELSE // _HP_VEE is defined}

const
  SLData_t = double;
const
  SLFixData_t = long;
const
  SLImageData_t = unsigned int;
const
  SLArrayIndex_t = long;
const
  SLError_t = long;
const
  SLStatus_t = long;
const
  SLBool_t = long;
{$DEFINE const}
{$DEFINE unsigned}
const
  enum = int;
{$DEFINE SLArbitraryFFT_t}
const
  SLComplexRect_s = double;
const
  SLComplexPolar_s = double;
const
  SLUInt8_t = unsigned char;
const
  SLUInt16_t = unsigned short;
const
  SLUInt32_t = unsigned int;
const
  SLUInt64_t = unsigned long long;
const
  SLInt8_t = int;
const
  SLInt16_t = short;
const
  SLInt32_t = int;
const
  SLInt64_t = long long;
const
  SLChar_t = int;
const
  SIGLIB_FUNC_DECL = _stdcall;
const
  SIGLIB_HUGE_ARRAYS = 0;
{$DEFINE SIGLIB_HUGE_DECL}

{$ENDIF // End of #ifndef _HP_VEE}


{/// Function declarations }

{$IFDEF __cplusplus // Declaration for C++ program calls}
{$ENDIF}

{/// SigLib utility functions }
{/// siglib.c }
var
  SUF_SiglibVersion: function: SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}
var
  SUF_PrintArray: procedure(const _1: PSLDATA_T;
                            const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintFixedPointArray: procedure(const _1: PSLARRAYINDEX_T;
                                      const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintComplexArray: procedure(const _1: PSLDATA_T;
                                   const _2: PSLDATA_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintMatrix: procedure(const _1: PSLDATA_T;
                             const _2: SLARRAYINDEX_T;
                             const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintPolar: procedure(const _1: SLCOMPLEXPOLAR_S) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintRectangular: procedure(const _1: SLCOMPLEXRECT_S) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintIIRCoefficients: procedure(const _1: PSLDATA_T;
                                      _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintCount: procedure(const _1: PChar) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintHigher: procedure(const _1: SLDATA_T;
                             const _2: SLDATA_T;
                             const _3: PChar) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_PrintLower: procedure(const _1: SLDATA_T;
                            const _2: SLDATA_T;
                            const _3: PChar) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_ClearDebugfprintf: function: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_Debugfprintf: function(const ArgumentType: PChar;
                             _2: ...): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_Debugvfprintf: function(const format: PChar;
                              _2: VA_LIST): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintArray: function(const _1: PSLDATA_T;
                                const _2: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintFixedPointArray: function(const _1: PSLARRAYINDEX_T;
                                          const _2: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintComplexArray: function(const _1: PSLDATA_T;
                                       const _2: PSLDATA_T;
                                       const _3: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintMatrix: function(const _1: PSLDATA_T;
                                 const _2: SLARRAYINDEX_T;
                                 const _3: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintPolar: function(const _1: SLCOMPLEXPOLAR_S): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintRectangular: function(const _1: SLCOMPLEXRECT_S): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintIIRCoefficients: function(const _1: PSLDATA_T;
                                          _2: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintCount: function(const String: PChar): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintHigher: function(const _1: SLDATA_T;
                                 const _2: SLDATA_T;
                                 const _3: PChar): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_DebugPrintLower: function(const _1: SLDATA_T;
                                const _2: SLDATA_T;
                                const _3: PChar): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
const
  SUF_DebugPrintInfo() = SUF_Debugfprintf('SigLib Version : %2.2lf\n', SIGLIB_VERSION);;
const
  SUF_DebugPrintLine() = SUF_Debugfprintf('SigLib Debug - File : %s, Line # : %d\n', __FILE__, __LINE__);;
const
  SUF_DebugPrintTime() =; {time_t aclock; time( &aclock ); SUF_Debugfprintf('SigLib Debug - Time : %s\n', asctime(localtime(&aclock)));}
var
  SUF_StrError: function(const ErrNo: SLERROR_T): PCONST CHAR cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// file_io.c }
var
  SUF_BinReadData: function(var SIGLIB_OUTPUT_PTR_DECL*: SLDATA_T SIGLIB_OUTPUT_PTR_DECL;
                            var _2: FILE;
                            const _3: Char;
                            const _4: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_BinWriteData: procedure(const SIGLIB_INPUT_PTR_DECL*: PSLDATA_T SIGLIB_INPUT_PTR_DECL;
                              var _2: FILE;
                              const _3: Char;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_CsvReadData: function(var SIGLIB_OUTPUT_PTR_DECL*: SLDATA_T SIGLIB_OUTPUT_PTR_DECL;
                            var _2: FILE;
                            const _3: SLDATA_T;
                            const _4: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_CsvWriteData: function(const SIGLIB_INPUT_PTR_DECL*: PSLDATA_T SIGLIB_INPUT_PTR_DECL;
                             var _2: FILE;
                             const _3: SLDATA_T;
                             const _4: SLARRAYINDEX_T;
                             const _5: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
type
  SLFileReadFirstRowFlag_t, SLArrayIndex_t*, SLArrayIndex_t* );= (
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_DatReadData (SLData_t SIGLIB_OUTPUT_PTR_DECL*,
    FILE*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_DatWriteData (const SLData_t SIGLIB_INPUT_PTR_DECL*,
    FILE*,
    const SLData_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SUF_DatReadHeader (FILE* );,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_DatWriteHeader (FILE*,
    const SLData_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_SigReadData (SLData_t SIGLIB_OUTPUT_PTR_DECL*,
    FILE*,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SUF_SigWriteData (const SLData_t SIGLIB_INPUT_PTR_DECL*,
    FILE*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_SigReadFile (SLData_t SIGLIB_OUTPUT_PTR_DECL*,
    const char* );,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_SigWriteFile (const SLData_t SIGLIB_INPUT_PTR_DECL*,
    char*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WavReadData (SLData_t SIGLIB_OUTPUT_PTR_DECL*,
    FILE*,
    const SLWavFileInfo_s,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SUF_WavWriteData (const SLData_t SIGLIB_INPUT_PTR_DECL*,
    FILE*,
    const SLWavFileInfo_s,
    const SLArrayIndex_t);,
    short SIGLIB_FUNC_DECL SUF_WavReadWord (FILE* );,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WavReadInt (FILE* );,
    void SIGLIB_FUNC_DECL SUF_WavWriteWord (const short,
    FILE* );,
    void SIGLIB_FUNC_DECL SUF_WavWriteInt (const SLArrayIndex_t,
    FILE* );,
    SLWavFileInfo_s SIGLIB_FUNC_DECL SUF_WavReadHeader (FILE* );,
    void SIGLIB_FUNC_DECL SUF_WavWriteHeader (FILE*,
    const SLWavFileInfo_s);,
    void SIGLIB_FUNC_DECL SUF_WavDisplayInfo (const SLWavFileInfo_s);,
    SLWavFileInfo_s SIGLIB_FUNC_DECL SUF_WavSetInfo (const SLArrayIndex_t,
    const SLArrayIndex_t,
    const short,
    const short,
    const short,
    const short);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WavFileLength (const char* );,
    SLWavFileInfo_s SIGLIB_FUNC_DECL SUF_WavReadFile (SLData_t SIGLIB_OUTPUT_PTR_DECL*,
    const char* );,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WavWriteFile (const SLData_t SIGLIB_INPUT_PTR_DECL*,
    char*,
    const SLWavFileInfo_s,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WavWriteFileScaled (const SLData_t SIGLIB_INPUT_PTR_DECL*,
    char*,
    const SLWavFileInfo_s,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_XmtReadData (SLData_t*,
    FILE*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WriteWeightsIntegerCFile (const char*,
    const SLData_t SIGLIB_INPUT_PTR_DECL*,
    const SLData_t SIGLIB_INPUT_PTR_DECL*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_WriteWeightsFloatCFile (const char*,
    const SLData_t SIGLIB_INPUT_PTR_DECL*,
    const SLData_t SIGLIB_INPUT_PTR_DECL*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    int SIGLIB_FUNC_DECL SUF_WriteWeightsBinaryFile (const char*,
    const SLData_t SIGLIB_INPUT_PTR_DECL*,
    const SLData_t SIGLIB_INPUT_PTR_DECL*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SUF_ReadWeightsBinaryFile (const char*,
    SLData_t SIGLIB_OUTPUT_PTR_DECL*,
    SLData_t SIGLIB_OUTPUT_PTR_DECL* );,
    {$ENDIF );

{$IFDEF CLOCKS_PER_SEC}
var
  SUF_MSDelay: procedure(const Delay: SLFIXDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{$ENDIF}


{/// Parameter description }

{/// Fast Fourier Transform Functions - ffourier.c }

var
  SIF_Fft: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Rfft: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                      const _5: SLARRAYINDEX_T;
                      const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Cfft: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                      const _5: SLARRAYINDEX_T;
                      const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Cifft: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                       const _5: SLARRAYINDEX_T;
                       const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_BitReverseReorder: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IndexBitReverseReorder: procedure(const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                        const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FastBitReverseReorder: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                       const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_RealRealCepstrum: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                  const _6: SLARRAYINDEX_T;
                                  )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_RealComplexCepstrum: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                     const _6: SLARRAYINDEX;
                                     )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ComplexComplexCepstrum: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLI: PSLARRAYINDEX_T;
                                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FftTone: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_RfftTone: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                          var _6: SLARRAYINDEX_T;
                          _7: SLDATA_;
                          )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{/// Generic Fourier Transform Functions - fourier.c }

var
  SIF_ZoomFft: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ZoomFft: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         _7: SLDATA_T;
                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_ZoomFftSimple: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ZoomFftSimple: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               _7: SL;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FdHilbert: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                           var _3: SLDATA_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FdHilbert: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                           const _6: SLDATA_T;
                           _7: CONST;
                           )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FdAnalytic: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                            var _3: SLDATA_T;
                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FdAnalytic: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                            const _6: SLDATA_T;
                            _7: CONS;
                            )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_InstantFreq: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Rft: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Rift: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Cft: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Cift: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FftShift: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CfftShift: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FftExtend: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _3: SLARRAYINDEX_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CfftExtend: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const _5: SLARRAYINDEX_T;
                            const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Arbitrary Length Fast Fourier Transform Functions - arbfft.c }

var
  SIF_FftArb: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var S: SLDATA_T;
                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_FftArbAllocLength: function(const _1: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_RfftArb: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         _7: CO;
                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_CfftArb: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         _7: CO;
                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_CifftArb: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                          _7: C;
                          )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{/// Power spectrum functions - pspect.c }

var
  SIF_FastAutoCrossPowerSpectrum: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                            var _3: SLDATA_T;
                                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FastAutoPowerSpectrum: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                       const _5: SLARRAYINDEX_T;
                                       const _6: SLARRAYINDEX_T;
                                       _7: CONST;
                                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FastCrossPowerSpectrum: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_: PSLARRAYINDEX_T;
                                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_ArbAutoCrossPowerSpectrum: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR: SLDATA_T;
                                           )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ArbAutoPowerSpectrum: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const SIGLIB_INPUT_PT: PSLDATA_T;
                                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ArbCrossPowerSpectrum: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       _7: CO;
                                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
type
  SLWindow_t, const SLData_t, SLData_t* SIGLIB_OUTPUT_PTR_DECL, SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL, SLData_t*, const SLArrayIndex_t,= (
    void SIGLIB_FUNC_DECL SDA_WelchRealPowerSpectrum (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t*,
    SLArrayInd,
    void SIGLIB_FUNC_DECL SDA_WelchComplexPowerSpectrum (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_IN,
    void SIGLIB_FUNC_DECL SIF_MagnitudeSquaredCoherence (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_MagnitudeSquaredCoherence (SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    {/// Frequency domain filtering functions - fdfilter.c  );

var
  SIF_FirOverlapAdd: procedure(const SIGLIB_OUTPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR: SLARRAYINDEX_T;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FirOverlapAdd: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PT: SLDATA_T;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FirOverlapSave: procedure(const SIGLIB_OUTPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PT: SLARRAYINDEX_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FirOverlapSave: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INOUT_P: SLDATA_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FftConvolvePre: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLARRAYINDEX_T;
                                const _6: SLARRAYINDEX_T;
                                _7: CONST;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FftConvolvePre: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const SIGLIB_INPUT_P: PSLDATA_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FftConvolveArb: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                _7: CO;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FftCorrelatePre: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLARRAYINDEX_T;
                                 const _6: SLARRAYINDEX_T;
                                 _7: CONS;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FftCorrelatePre: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 _7: C;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FftCorrelateArb: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 _7: C;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Chirp z-transform functions - chirpz.c }

var
  SIF_Czt: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGL: SLDATA_T;
                     )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

{/// Chirp z-transform functions - chirpz.c }
{/// Generate complex window coeffs }
var
  SIF_Awn: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _3: SLCOMPLEXRECT_S;
                     const _4: SLCOMPLEXRECT_S;
                     const _5: SLCOMPLEXRECT_S;
                     const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Generate contour definition coeffs }
var
  SIF_Vl: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                    const _3: SLCOMPLEXRECT_S;
                    const _4: SLCOMPLEXRECT_S;
                    const _5: SLARRAYINDEX_T;
                    const _6: SLARRAYINDEX_T;
                    const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Generate weighting coeffs }
var
  SIF_Wm: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                    const _3: SLCOMPLEXRECT_S;
                    const _4: SLCOMPLEXRECT_S;
                    const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{$ENDIF // End of #ifndef _HP_VEE}


{/// Windowing functions - window.c }

type
  SLWindow_t, const SLData_t, const SLArrayIndex_t);= (
    SLError_t SIGLIB_FUNC_DECL SIF_TableTopWindow (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLWindow_t,
    const SLData_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_Window (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_ComplexWindow (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_I,
    SLData_t SIGLIB_FUNC_DECL SDA_WindowInverseCoherentGain (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_I0Bessel (const SLData_t);,
    {/// Filtering functions - firfilt.c  );

var
  SIF_Fir: procedure(SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                     var _2: SLARRAYINDEX_T;
                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Fir: function(const _1: SLDATA_T;
                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                    var _4: SLARRAYINDEX_T;
                    const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Fir: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var _5: SLARRAYINDEX_T;
                     const _6: SLARRAYINDEX_T;
                     const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FirAddSample: procedure(const _1: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var _3: SLARRAYINDEX_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FirAddSamples: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var _3: SLARRAYINDEX_T;
                               const _4: SLARRAYINDEX_T;
                               const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_Comb: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      var _2: SLARRAYINDEX_T;
                      var _3: SLDATA_T;
                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Comb: function(const _1: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                     var _3: SLARRAYINDEX_T;
                     var _4: SLDATA_T;
                     const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Comb: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                      var _4: SLARRAYINDEX_T;
                      var _5: SLDATA_T;
                      const _6: SLARRAYINDEX_T;
                      const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FirComplex: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var _3: SLARRAYINDEX_T;
                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FirComplex: procedure(const _1: SLDATA_T;
                            const _2: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            _8: CONST;
                            )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FirComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FirWithStore: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FirWithStore: function(const _1: SLDATA_T;
                             var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FirWithStore: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const _5: SLARRAYINDEX_T;
                              const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FirComplexWithStore: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FirComplexWithStore: procedure(const _1: SLDATA_T;
                                     const _2: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     const SIGLIB_INPUT_PTR_DEC: PSLDATA_T;
                                     )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FirComplexWithStore: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_INOUT_P: SLDATA_T;
                                     )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_FirWithStoreAddSample: procedure(const _1: SLDATA_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FirWithStoreAddSamples: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                        const _3: SLARRAYINDEX_T;
                                        const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FirExtendedArray: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                  var _4: SLARRAYINDEX_T;
                                  const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FirExtendedArray: function(const _1: SLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var _4: SLARRAYINDEX_T;
                                 const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FirExtendedArray: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var _5: SLARRAYINDEX_T;
                                  const _6: SLARRAYINDEX_T;
                                  const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FirComplexExtendedArray: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_INO: SLDATA_T;
                                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_FirComplexExtendedArray: procedure(const _1: SLDATA_T;
                                         const _2: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         const SIGLIB_INPUT_PTR: PSLDATA_T;
                                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FirComplexExtendedArray: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_INO: SLDATA_T;
                                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_FirExtendedArrayAddSample: procedure(const _1: SLDATA_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                           var _3: SLARRAYINDEX_T;
                                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FirExtendedArrayAddSamples: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                            var _3: SLARRAYINDEX_T;
                                            const _4: SLARRAYINDEX_T;
                                            const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLWindow_t, const SLArrayIndex_t);= (
    SLError_t SIGLIB_FUNC_DECL SIF_FirHighPassFilter (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const enum SLWindow_t,
    const SLArrayIndex_t);,
    SLError_t SIGLIB_FUNC_DECL SIF_FirBandPassFilter (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const enum SLWindow_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_FirLowPassFilterWindow (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_FirHighPassFilterWindow (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_FirBandPassFilterWindow (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SUF_FirKaiserApproximation (SLData_t,
    SLData_t,
    SLData_t,
    SLData_t,
    SLData_t);,
    void SIGLIB_FUNC_DECL SIF_FirMatchedFilter (SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_FirFilterInverseCoherentGain (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_TappedDelayLine (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_TappedDelayLine (const SLData_t,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_INOUT_PTR_DECL,
    const SLArrayIndex_t* SIGLIB_INOUT_PTR_DECL,
    const SLData_t* SIGLIB_INOUT_PTR_DECL,
    const SLArrayIndex_t,
    const SL,
    void SIGLIB_FUNC_DECL SDA_TappedDelayLine (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_INOUT_PTR_DECL,
    const SLArrayIndex_t* SIGLIB_INOUT_PTR_DECL,
    const SLData_t* S,
    void SIGLIB_FUNC_DECL SIF_TappedDelayLineComplex (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDS_TappedDelayLineComplex (const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_INOUT_PTR_,
    void SIGLIB_FUNC_DECL SDA_TappedDelayLineComplex (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOU,
    void SIGLIB_FUNC_DECL SIF_TappedDelayLineIQ (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDS_TappedDelayLineIQ (const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_INOUT_PTR_DECL,
    void SIGLIB_FUNC_DECL SDA_TappedDelayLineIQ (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR,
    void SIGLIB_FUNC_DECL SIF_FirPolyPhaseGenerate (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t** SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    {/// Filtering functions - iirfilt.c  );

var
  SIF_Iir: procedure(SIGLIB_OUTPUT_PTR_DECL: PSLDATA_T;
                     const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Iir: function(const _1: SLDATA_T;
                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                    const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Iir: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     const _5: SLARRAYINDEX_T;
                     const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_IirMac: function(const _1: SLDATA_T;
                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirMac: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        const _5: SLARRAYINDEX_T;
                        const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirOrderN: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var _2: SLARRAYINDEX_T;
                           const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_IirOrderN: function(const _1: SLDATA_T;
                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var _4: SLARRAYINDEX_T;
                          const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirOrderN: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var _5: SLARRAYINDEX_T;
                           const _6: SLARRAYINDEX_T;
                           const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirNc: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                       const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirNc: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _6: SLARRAYINDEX_T;
                       const _7: SLARRAYIND;
                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

var
  SDA_BilinearTransform: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_PreWarp: function(const _1: SLDATA_T;
                        const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MatchedZTransform: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _5: SLDATA_T;
                                   const _6: SLARRAYIN;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_IirZplaneToCoeffs: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _4: SLARRAYINDEX_T;
                                   const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirZplanePolarToCoeffs: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXPOLAR_S;
                                        const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXPOLAR_S;
                                        var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                        const _4: SLARRAYINDEX_T;
                                        const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirZplaneLpfToLpf: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_IirZplaneLpfToHpf: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_IirZplaneLpfToBpf: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_IirZplaneLpfToBsf: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{$ENDIF // End of #ifndef _HP_VEE}

var
  SDA_IirModifyFilterGain: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _3: SLDATA_T;
                                    const _4: SLDATA_T;
                                    const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirLowPassFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _2: SLDATA_T;
                                  const _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirHighPassFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _2: SLDATA_T;
                                   const _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirAllPassFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _2: SLDATA_T;
                                  const _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirBandPassFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _2: SLDATA_T;
                                   const _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirNotchFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _2: SLDATA_T;
                                const _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirPeakingFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _2: SLDATA_T;
                                  const _3: SLDATA_T;
                                  const _4: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirLowShelfFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _2: SLDATA_T;
                                   const _3: SLDATA_T;
                                   const _4: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirHighShelfFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _2: SLDATA_T;
                                    const _3: SLDATA_T;
                                    const _4: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_IirRemoveDC: function(_1: SLDATA_T;
                            var _2: SLDATA_T;
                            var _3: SLDATA_T;
                            const _4: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirRemoveDC: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var _3: SLDATA_T;
                             var _4: SLDATA_T;
                             const _5: SLDATA_T;
                             const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_OnePole: procedure(var _1: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePole: function(const _1: SLDATA_T;
                        const _2: SLDATA_T;
                        var _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OnePole: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLDATA_T;
                         var _4: SLDATA_T;
                         const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePoleNormalized: function(const _1: SLDATA_T;
                                  const _2: SLDATA_T;
                                  var _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OnePoleNormalized: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLDATA_T;
                                   var _4: SLDATA_T;
                                   const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OnePolePerSample: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                  const _4: SLDATA_T;
                                  const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_OnePoleHighPass: procedure(var _1: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePoleHighPass: function(const _1: SLDATA_T;
                                const _2: SLDATA_T;
                                var _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OnePoleHighPass: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _3: SLDATA_T;
                                 var _4: SLDATA_T;
                                 const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePoleHighPassNormalized: function(const _1: SLDATA_T;
                                          const _2: SLDATA_T;
                                          var _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OnePoleHighPassNormalized: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                           const _3: SLDATA_T;
                                           var _4: SLDATA_T;
                                           const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePoleTimeConstantToFilterCoeff: function(const _1: SLDATA_T;
                                                 const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePoleCutOffFrequencyToFilterCoeff: function(const _1: SLDATA_T;
                                                    const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff: function(const _1: SLDATA_T;
                                                            const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_AllPole: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var _2: SLARRAYINDEX_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_AllPole: function(const _1: SLDATA_T;
                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var _4: SLARRAYINDEX_T;
                        const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AllPole: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var _5: SLARRAYINDEX_T;
                         const _6: SLARRAYINDEX_T;
                         const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ZDomainCoefficientReorg: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_IirNotchFilter2: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _2: SLDATA_T;
                                const _3: SLDATA_T;
                                const _4: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLIIRNormalizedCoeffs_t, const SLArrayIndex_t);= (
    SLError_t SIGLIB_FUNC_DECL SIF_IirNormalizedSPlaneCoefficients (SLComplexRect_s* SIGLIB_OUTPUT_PTR_DECL,
    enum SLIIRNormalizedCoeffs_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_TranslateSPlaneCutOffFrequency (const SLComplexRect_s* SIGLIB_INPUT_PTR_DECL,
    SLComplexRect_s* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_IirLpLpShift (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    { const SLData_t,
    // Frequency # 1  );
{ const SLData_t, // Frequency # 2 }

var
  SDA_IirLpHpShift: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const )

                             }: // FREQUENCY # 1;
                             const )

                             }: // FREQUENCY # 2;
                             const _7: SLDATA_T;
                             const _8: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_Iir2PoleLpf: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _3: SLDATA_T;
                             const _4: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Iir2Pole: function(const _1: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Iir2Pole: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_IirNegateAlphaCoeffs: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Filtering functions - filter.c }

var
  SDA_Integrate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _3: SLDATA_T;
                           const _4: SLDATA_T;
                           var _5: SLDATA_T;
                           const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Differentiate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_LeakyIntegrator: procedure(var _1: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_LeakyIntegrator1: function(const _1: SLDATA_T;
                                 var _2: SLDATA_T;
                                 const _3: SLDATA_T;
                                 const _4: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_LeakyIntegrator2: function(const _1: SLDATA_T;
                                 var _2: SLDATA_T;
                                 const _3: SLDATA_T;
                                 const _4: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_HilbertTransformer: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_GoertzelFilter: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _2: SLDATA_T;
                               const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_GoertzelFilter: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                const _4: SLDATA_T;
                                const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_GoertzelFilter: function(const _1: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               const _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_GoertzelDetect: function(const _1: SLDATA_T;
                               const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_GoertzelDetect: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _2: SLDATA_T;
                               const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

var
  SIF_GoertzelDetectComplex: function(const _1: SLDATA_T;
                                      const _2: SLARRAYINDEX_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_GoertzelDetectComplex: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const _2: SLCOMPLEXRECT_S;
                                      const _3: SLARRAYINDEX_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{$ENDIF // End of #ifndef _HP_VEE}

var
  SIF_GaussianFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _2: SLDATA_T;
                                const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_GaussianFilter2: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _2: SLDATA_T;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_RaisedCosineFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _2: SLDATA_T;
                                    const _3: SLDATA_T;
                                    const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_RootRaisedCosineFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        const _2: SLDATA_T;
                                        const _3: SLDATA_T;
                                        const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ZTransform: function(const _1: SLCOMPLEXRECT_S;
                           const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                           const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                           const _4: SLARRAYINDEX_T;
                           const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ZTransformDB: function(const _1: SLCOMPLEXRECT_S;
                             const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                             const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                             const _4: SLARRAYINDEX_T;
                             const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_EstimateBPFilterLength: function(const _1: SLDATA_T;
                                       const _2: SLDATA_T;
                                       const _3: SLARRAYINDEX_T;
                                       const _4: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_EstimateBPFilterError: procedure(const _1: SLDATA_T;
                                       const _2: SLDATA_T;
                                       const _3: SLARRAYINDEX_T;
                                       const _4: SLARRAYINDEX_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_FrequenciesToOctaves: function(const Fl: SLDATA_T;
                                     const Fh: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_FrequenciesToCentreFreqHz: function(const Fl: SLDATA_T;
                                          const Fh: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_FrequenciesToQFactor: function(const Fl: SLDATA_T;
                                     const Fh: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_BandwidthToQFactor: function(const BW: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_QFactorToBandwidth: function(const QFactor: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Acoustic processing functions - acoustic.c }

var
  SDA_LinearMicrophoneArrayBeamPattern: procedure(const _1: SLFIXDATA_T;
                                                  const _2: SLDATA_T;
                                                  const _3: SLDATA_T;
                                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                  const _6: SLDATA_T;
                                                  const _7: SLDATA_T;
                                                  const _8: SLFIXDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LinearMicrophoneArrayBeamPatternLinear: procedure(const _1: SLFIXDATA_T;
                                                        const _2: SLDATA_T;
                                                        const _3: SLDATA_T;
                                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                        const _6: SLDATA_T;
                                                        const _7: SLDATA_T;
                                                        const _8: SLFIXDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MicrophoneArrayCalculateDelays: procedure(const _1: SLFIXDATA_T;
                                                var SIGLIB_INOUT_PTR_DECL: SLMICROPHONE_S;
                                                const _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MicrophoneArrayBeamPattern: procedure(const _1: SLFIXDATA_T;
                                            const SIGLIB_INPUT_PTR_DECL: PSLMICROPHONE_S;
                                            const _3: SLDATA_T;
                                            const _4: SLDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                            const _7: SLDATA_T;
                                            const _8: SLDATA_T;
                                            )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_MicrophoneArrayBeamPatternLinear: procedure(const _1: SLFIXDATA_T;
                                                  const SIGLIB_INPUT_PTR_DECL: PSLMICROPHONE_S;
                                                  const _3: SLDATA_T;
                                                  const _4: SLDATA_T;
                                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                  const _7: SLDATA_T;
                                                  const _8: SL;
                                                  )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_TemperatureToSpeedOfSoundInAir: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Adaptive filtering functions - adaptive.c }

var
  SIF_Lms: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var _3: SLARRAYINDEX_T;
                     var _4: SLARRAYINDEX_T;
                     const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Lms: function(const _1: SLDATA_T;
                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                    const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                    var _4: SLARRAYINDEX_T;
                    const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LmsUpdate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                           var _3: SLARRAYINDEX_T;
                           const _4: SLARRAYINDEX_T;
                           const _5: SLDATA_T;
                           const _6: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LeakyLmsUpdate: procedure(const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                var _3: SLARRAYINDEX_T;
                                const _4: SLARRAYINDEX_T;
                                const _5: SLDATA_T;
                                const _6: SLDATA_T;
                                const _7: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_NormalizedLmsUpdate: procedure(const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     var _3: SLARRAYINDEX_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     const _5: SLARRAYINDEX_T;
                                     const _6: SLDATA_T;
                                     const _7: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SignErrorLmsUpdate: procedure(const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    var _3: SLARRAYINDEX_T;
                                    const _4: SLARRAYINDEX_T;
                                    const _5: SLDATA_T;
                                    const _6: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SignDataLmsUpdate: procedure(const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   var _3: SLARRAYINDEX_T;
                                   const _4: SLARRAYINDEX_T;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SignSignLmsUpdate: procedure(const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   var _3: SLARRAYINDEX_T;
                                   const _4: SLARRAYINDEX_T;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Convolution functions - convolve.c }

var
  SDA_ConvolveLinear: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _4: SLARRAYINDEX_T;
                                const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ConvolvePartial: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _4: SLARRAYINDEX_T;
                                 const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ConvolveCircular: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ConvolveLinearComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       var S: SLDATA_T;
                                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ConvolvePartialComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        var _6: SLDATA_T;
                                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ConvolveCircularComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var _6: SLDATA_T;
                                         )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FftDeconvolution: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                  const _5: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const _7: SLARRAYINDEX;
                                  )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FftDeconvolutionPre: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _4: SLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DE: PSLARRAYINDEX_T;
                                     )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FftDeconvolutionPre: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _6: SLARRAYINDEX_T;
                                     )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Correlation functions - correlate.c }

{ void SIGLIB_FUNC_DECL SDA_CorrelateLinear (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #2 }
{ const SLArrayIndex_t, // Length of array #2 }

{ void SIGLIB_FUNC_DECL SDA_CorrelatePartial (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #2 }
{ const SLArrayIndex_t); // Length of array #2 }

var
  SDA_CorrelateCircular: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{ void SIGLIB_FUNC_DECL SDA_Covariance (SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #1 }
{ SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #2 }
{ const SLData_t, // Inverse of length of array #2 }
{ const SLArrayIndex_t, // Length of array #1 }
{ const SLArrayIndex_t, // Length of array #2 }

{ void SIGLIB_FUNC_DECL SDA_CovariancePartial (SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #1 }
{ SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #2 }
{ const SLData_t, // Inverse of length of array #2 }
{ const SLArrayIndex_t, // Length of array #1 }
{ const SLArrayIndex_t); // Length of array #2 }

{ void SIGLIB_FUNC_DECL SDA_CorrelateLinearReturnPeak (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to input array #2 }
{ const SLArrayIndex_t, // Length of array #2 }

{/// Delay functions - delay.c }

var
  SIF_FixedDelay: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                            const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FixedDelay: function(const _1: SLDATA_T;
                           var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                           var _3: SLARRAYINDEX_T;
                           const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FixedDelay: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var _4: SLARRAYINDEX_T;
                            const _5: SLARRAYINDEX_T;
                            const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FixedDelayComplex: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FixedDelayComplex: procedure(const _1: SLDATA_T;
                                   const _2: SLDATA_T;
                                   var _3: SLDATA_T;
                                   var _4: SLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   var _7: SLARRAYINDEX_T;
                                   const _8: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FixedDelayComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_INOUT_PTR: SLDATA_T;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ShortFixedDelay: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                 const _5: SLARRAYINDEX_T;
                                 const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_VariableDelay: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var _2: SLARRAYINDEX_T;
                              var _3: SLARRAYINDEX_T;
                              var _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T;
                              const _6: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_VariableDelay: function(const _1: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var _3: SLARRAYINDEX_T;
                              var _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_VariableDelay: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var _4: SLARRAYINDEX_T;
                               var _5: SLARRAYINDEX_T;
                               const _6: SLARRAYINDEX_T;
                               const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_VariableDelayComplex: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var _3: SLARRAYINDEX_T;
                                     var _4: SLARRAYINDEX_T;
                                     var _5: SLARRAYINDEX_T;
                                     const _6: SLARRAYINDEX_T;
                                     const _7: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_VariableDelayComplex: procedure(const _1: SLDATA_T;
                                      const _2: SLDATA_T;
                                      var _3: SLDATA_T;
                                      var _4: SLDATA_T;
                                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      var _7: SLARRAYINDEX_T;
                                      var _8: SLARRAYINDEX_T;
                                      const _9: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_VariableDelayComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_INOUT_: SLDATA_T;
                                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SUF_IncreaseVariableDelay: function(var _1: SLARRAYINDEX_T;
                                      var _2: SLARRAYINDEX_T;
                                      const _3: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_DecreaseVariableDelay: function(var _1: SLARRAYINDEX_T;
                                      var _2: SLARRAYINDEX_T;
                                      const _3: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{ SLArrayIndex_t SIGLIB_FUNC_DECL SDA_Align (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }
{ SLData_t* SIGLIB_OUTPUT_PTR_DECL, // Pointer to destination array #1 }
{ SLData_t* SIGLIB_OUTPUT_PTR_DECL, // Pointer to destination array #2 }
type
  SLAlign_t, = (
    const SLArrayIndex_t,
    // Source array #1 length  );
{ const SLArrayIndex_t); // Source array #2 length }

{/// Image processing functions - image.c }

var
  SIM_Fft2d: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T SIGLIB_HUGE_DECL;
                       var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                       const SIGLIB_OUTPUT_PTR_DECL: PSLDATA_T;
                       var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                       _5: SLDAT;
                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_Fft2d: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                       var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                       const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_Conv3x3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T SIGLIB_HUGE_DECL;
                         var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _4: SLARRAYINDEX_T;
                         const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_Sobel3x3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T SIGLIB_HUGE_DECL;
                          var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                          const _3: SLARRAYINDEX_T;
                          const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_SobelVertical3x3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T SIGLIB_HUGE_DECL;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                                  const _3: SLARRAYINDEX_T;
                                  const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_SobelHorizontal3x3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T SIGLIB_HUGE_DECL;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                                    const _3: SLARRAYINDEX_T;
                                    const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_Median3x3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T SIGLIB_HUGE_DECL;
                           var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T SIGLIB_HUGE_DECL;
                           const _3: SLARRAYINDEX_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SL3x3Coeffs_t);= (
    SLImageData_t SIGLIB_FUNC_DECL SIM_Max (const SLImageData_t SIGLIB_HUGE_DECL* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLImageData_t SIGLIB_FUNC_DECL SIM_Min (const SLImageData_t SIGLIB_HUGE_DECL* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    {/// Image coding functions  );

var
  SIF_Dct8x8: procedure cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_Dct8x8: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_Idct8x8: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_ZigZagScan: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIM_ZigZagDescan: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Signal generation functions - siggen.c }

type
  SLSignal_t, const SLData_t, const enum SLSignalFillMode_t, SLData_t, const SLData_t, const SLData_t, const SLData_t, SLData_t*, SLData_t*, const SLArrayI= (
    SLError_t SIGLIB_FUNC_DECL SDS_SignalGenerate (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLSignal_t,
    const SLData_t,
    const enum SLSignalFillMode_t,
    SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    SLData_t*,
    SLData_t* );,
    void SIGLIB_FUNC_DECL SIF_Resonator (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    SLData_t*,
    SLData_t* );,
    void SIGLIB_FUNC_DECL SDA_Resonator (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_Resonator1 (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    SLData_t*,
    SLData_t*,
    SLFixData_t* );,
    void SIGLIB_FUNC_DECL SDA_Resonator1 (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLFixData_t*,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_Resonator1Add (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLFixData_t*,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SignalGeneratePolarWhiteNoise (SLComplexRect_s* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const enum SLSignalFillMode_t,
    const SLArrayIndex_t);,
    SLComplexRect_s SIGLIB_FUNC_DECL SDS_SignalGeneratePolarWhiteNoise (const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_SignalGeneratePolarGaussianNoise (SLComplexRect_s* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    SLData_t*,
    SLData_t*,
    const enum SLSignalFillMode_t,
    const SLArrayIndex_t);,
    SLComplexRect_s SIGLIB_FUNC_DECL SDS_SignalGeneratePolarGaussianNoise (const SLData_t,
    SLData_t*,
    SLData_t* );,
    void SIGLIB_FUNC_DECL SDA_SignalAddPolarJitterAndGaussianNoise (const SLComplexRect_s* SIGLIB_INPUT_PTR_DECL,
    SLComplexRect_s* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    SLData_t*,
    const SLData_t,
    SLData_t*,
    SLData_t*,
    const SLArrayIn,
    SLComplexRect_s SIGLIB_FUNC_DECL SDS_SignalAddPolarJitterAndGaussianNoise (const SLComplexRect_s,
    const SLData_t,
    const SLData_t,
    SLData_t*,
    const SLData_t,
    SLData_t*,
    SLData_t* );,
    void SIGLIB_FUNC_DECL SDA_Ramp(SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    {/// Communication functions - comms.c  );

var
  SDA_BitErrorRate: function(const SIGLIB_INPUT_PTR_DECL: PSLCHAR_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLCHAR_T;
                             const _3: SLDATA_T;
                             const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Interleave: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                            const _3: SLARRAYINDEX_T;
                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Deinterleave: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                              const _3: SLARRAYINDEX_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_EuclideanDistance: function(const _1: SLCOMPLEXRECT_S;
                                  const _2: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_EuclideanDistanceSquared: function(const _1: SLCOMPLEXRECT_S;
                                         const _2: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{ void SIGLIB_FUNC_DECL SCA_EuclideanDistance (const SLComplexRect_s* SIGLIB_INPUT_PTR_DECL, // Pointer to source vector #1 }
{ const SLComplexRect_s* SIGLIB_INPUT_PTR_DECL, // Pointer to source vector #2 }

{ void SIGLIB_FUNC_DECL SCA_EuclideanDistanceSquared (const SLComplexRect_s* SIGLIB_INPUT_PTR_DECL, // Pointer to source vector #1 }
{ const SLComplexRect_s* SIGLIB_INPUT_PTR_DECL, // Pointer to source vector #2 }

{ SLData_t SIGLIB_FUNC_DECL SDS_EuclideanDistance (const SLData_t, // Source #1 x-axis value }
{ const SLData_t, // Source #1 y-axis value }
{ const SLData_t, // Source #2 x-axis value }
{ const SLData_t); // Source #2 y-axis value }

{ SLData_t SIGLIB_FUNC_DECL SDS_EuclideanDistanceSquared (const SLData_t, // Source #1 x-axis value }
{ const SLData_t, // Source #1 y-axis value }
{ const SLData_t, // Source #2 x-axis value }
{ const SLData_t); // Source #2 y-axis value }

{ void SIGLIB_FUNC_DECL SDA_EuclideanDistance (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #1 x-axis values }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #1 y-axis values }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #2 x-axis values }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #2 y-axis values }

{ void SIGLIB_FUNC_DECL SDA_EuclideanDistanceSquared (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #1 x-axis values }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #1 y-axis values }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #2 x-axis values }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source #2 y-axis values }

var
  SDS_ManchesterEncode: function(const _1: SLCHAR_T): SLCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ManchesterDecode: function(const _1: SLCHAR_T): SLCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ManchesterEncodeByte: function(const _1: SLCHAR_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ManchesterDecodeByte: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_DetectNumericalWordSequence: procedure(var _1: SLFIXDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLFIXDATA_T;
                                             _3: SLARRAYINDEX_T;
                                             _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_DetectNumericalWordSequence: function(_1: SLFIXDATA_T;
                                            const SIGLIB_INPUT_PTR_DECL: PSLFIXDATA_T;
                                            _3: SLFIXDATA_T;
                                            var SIGLIB_INOUT_PTR_DECL: SLFIXDATA_T;
                                            _5: SLARRAYINDEX_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_DetectNumericalBitSequence: procedure(var _1: SLFIXDATA_T;
                                            var _2: SLFIXDATA_T;
                                            _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_DetectNumericalBitSequence: function(_1: SLFIXDATA_T;
                                           const _2: SLFIXDATA_T;
                                           _3: SLFIXDATA_T;
                                           var _4: SLFIXDATA_T;
                                           _5: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_DetectCharacterSequence: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLCHAR_T;
                                         _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_DetectCharacterSequence: function(_1: SLCHAR_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLCHAR_T;
                                        var SIGLIB_INOUT_PTR_DECL: SLCHAR_T;
                                        _4: SLARRAYINDEX_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ErrorVector: function(const _1: SLCOMPLEXRECT_S;
                            const _2: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ErrorVectorMagnitudePercent: function(const _1: SLCOMPLEXRECT_S;
                                            const _2: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ErrorVectorMagnitudeDecibels: function(const _1: SLCOMPLEXRECT_S;
                                             const _2: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ReverseDiBits: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QpskBitErrorCount: procedure(const _1: SLFIXDATA_T;
                                   const _2: SLFIXDATA_T;
                                   var _3: SLFIXDATA_T;
                                   var _4: SLFIXDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_BitErrorRate: function(const _1: SLFIXDATA_T;
                             const _2: SLFIXDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Communications timing detection functions - timing.c }

var
  SIF_PhaseLockedLoop: procedure(var _1: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _3: SLARRAYINDEX_T;
                                 const _4: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var _7: SLARRAYINDEX_T;
                                 const _8: SLARRAYINDEX_T;
                                 var SIGL: SLDATA_T;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_PhaseLockedLoop: function(const _1: SLDATA_T;
                                var _2: SLDATA_T;
                                const _3: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                const _5: SLARRAYINDEX_T;
                                const _6: SLDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                _9: SLARRAYINDEX_T;
                                )
: SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_PhaseLockedLoop: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var _3: SLDATA_T;
                                 const _4: SLDATA_T;
                                 var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                 const _6: SLARRAYINDEX_T;
                                 const _7: SLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_CostasLoop: function(var _1: SLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _3: SLARRAYINDEX_T;
                           const _4: SLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var _6: SLARRAYINDEX_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var _8: SLARRAYINDEX_T;
                           var SIGLIB_OU: SLDATA_T;
                           )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_CostasLoop: function(const _1: SLDATA_T;
                           var _2: SLDATA_T;
                           const _3: SLDATA_T;
                           var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                           const _5: SLARRAYINDEX_T;
                           const _6: SLDATA_T;
                           var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                           var _8: SLARRAYINDEX_T;
                           var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                           _10: SLARRAY;
                           )
: SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_CostasLoop: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var _3: SLDATA_T;
                            const _4: SLDATA_T;
                            var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                            const _6: SLARRAYINDEX_T;
                            const _7: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            _9: SLARR;
                            )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SRF_CostasLoop: procedure(var _1: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var _3: SLARRAYINDEX_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var _5: SLARRAYINDEX_T;
                            const _6: SLARRAYINDEX_T;
                            var _7: SLDATA_T;
                            var _8: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_180DegreePhaseDetect: procedure(var _1: SLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      const _3: SLARRAYINDEX_T;
                                      const _4: SLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      var _7: SLARRAYINDEX_T;
                                      const _8: SLARRAYINDEX_T;
                                      _9: SLARRAYIN;
                                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_180DegreePhaseDetect: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var _3: SLDATA_T;
                                     const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                     const _5: SLARRAYINDEX_T;
                                     const _6: SLDATA_T;
                                     var SIGLIB_INOUT_PTR_DEC: SLDATA_T;
                                     )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_TriggerReverberator: procedure(var _1: SLARRAYINDEX_T;
                                     var _2: SLFIXDATA_T;
                                     var _3: SLFIXDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_TriggerReverberator: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var _3: SLARRAYINDEX_T;
                                     var _4: SLFIXDATA_T;
                                     var _5: SLFIXDATA_T;
                                     const _6: SLARRAYINDEX_T;
                                     const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_TriggerReverberator: function(const _1: SLDATA_T;
                                    var _2: SLARRAYINDEX_T;
                                    var _3: SLFIXDATA_T;
                                    var _4: SLFIXDATA_T;
                                    const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_TriggerSelector: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                const _4: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_EarlyLateGate: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var _4: SLARRAYINDEX_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var _6: SLARRAYINDEX_T;
                              const _7: SLARRAYINDEX_T;
                              var _8: SLDATA_T;
                              )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_EarlyLateGate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                               var _5: SLARRAYINDEX_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var _7: SLARRAYINDEX_T;
                               _8: C;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_EarlyLateGateDebug: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                    var _5: SLARRAYINDEX_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    _7: SLARRAYINDEX_T;
                                    )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_EarlyLateGate: function(const _1: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                              var _4: SLARRAYINDEX_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var _6: SLARRAYINDEX_T;
                              const _7: SLARRAYINDEX_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              )
: SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_EarlyLateGateSquarePulse: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var _2: SLARRAYINDEX_T;
                                         var _3: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var _5: SLARRAYINDEX_T;
                                         const _6: SLARRAYINDEX_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_OUTPU: SLDATA_T;
                                         )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_EarlyLateGateSquarePulse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                          var _4: SLARRAYINDEX_T;
                                          var _5: SLDATA_T;
                                          var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                          var _7: SLARRAYINDEX_T;
                                          const _8: SLARRA;
                                          )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_EarlyLateGateSquarePulseDebug: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                               var _4: SLARRAYINDEX_T;
                                               var _5: SLDATA_T;
                                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                               var _7: SLARRAYINDEX_T;
                                               const _8: S;
                                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_EarlyLateGateSquarePulse: function(const _1: SLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var _3: SLARRAYINDEX_T;
                                         var _4: SLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var _6: SLARRAYINDEX_T;
                                         const _7: SLARRAYINDEX_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var _9: SLDATA_T;
                                         )
: SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Convolutional encoding / Viterbi decoding functions - viterbi.c }

var
  SDS_ConvEncoderK3: function(_1: SLCHAR_T;
                              var _2: SLARRAYINDEX_T): SLUINT16_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_ViterbiDecoderK3: procedure(var _1: SLFIXDATA_T;
                                  var _2: SLCHAR_T;
                                  var _3: SLDATA_T;
                                  var _4: SLARRAYINDEX_T;
                                  var _5: SLARRAYINDEX_T;
                                  var _6: SLFIXDATA_T;
                                  const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ViterbiDecoderK3: function(var _1: SLDATA_T;
                                 var _2: SLFIXDATA_T;
                                 var _3: SLCHAR_T;
                                 var _4: SLDATA_T;
                                 var _5: SLARRAYINDEX_T;
                                 var _6: SLARRAYINDEX_T;
                                 var _7: SLFIXDATA_T;
                                 const _8: SLARRAYINDEX_T): SLCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ConvEncoderV32: function(_1: SLCHAR_T;
                               var _2: SLARRAYINDEX_T;
                               var _3: SLARRAYINDEX_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_ViterbiDecoderV32: procedure(var _1: SLDATA_T;
                                   var _2: SLARRAYINDEX_T;
                                   var _3: SLARRAYINDEX_T;
                                   var _4: SLFIXDATA_T;
                                   const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ViterbiDecoderV32: function(_1: SLCOMPLEXRECT_S;
                                  var _2: SLDATA_T;
                                  var _3: SLARRAYINDEX_T;
                                  var _4: SLARRAYINDEX_T;
                                  var _5: SLARRAYINDEX_T;
                                  var _6: SLARRAYINDEX_T;
                                  var _7: SLFIXDATA_T;
                                  const _8: SLARRAYINDEX_T): SLCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Analog modulation functions - mod_a.c }

var
  SIF_AmplitudeModulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var _2: SLARRAYINDEX_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AmplitudeModulate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var _4: SLARRAYINDEX_T;
                                   const _5: SLARRAYINDEX_T;
                                   const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_AmplitudeModulate: function(const _1: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var _3: SLARRAYINDEX_T;
                                  const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_AmplitudeModulate2: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var _2: SLDATA_T;
                                    const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AmplitudeModulate2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var _4: SLDATA_T;
                                    const _5: SLDATA_T;
                                    const _6: SLARRAYINDEX_T;
                                    const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_AmplitudeModulate2: function(const _1: SLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var _3: SLDATA_T;
                                   const _4: SLDATA_T;
                                   const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_ComplexShift: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var _2: SLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var _4: SLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var _7: SLARRAYINDEX_T;
                             const _8: SLARRAYINDEX_T;
                             )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ComplexShift: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var _4: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var _6: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                              const _8: SL;
                              )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_FrequencyModulate: procedure(var _1: SLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FrequencyModulate: function(const _1: SLDATA_T;
                                  const _2: SLDATA_T;
                                  const _3: SLDATA_T;
                                  var _4: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const _6: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FrequencyModulate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLDATA_T;
                                   const _4: SLDATA_T;
                                   var _5: SLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _7: SLARRAYINDEX_T;
                                   const _8: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FrequencyDemodulate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var _3: SLDATA_T;
                                     var _4: SLDATA_T;
                                     const _5: SLDATA_T;
                                     const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FrequencyModulateComplex: procedure(var _1: SLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FrequencyModulateComplex: procedure(const _1: SLDATA_T;
                                          var _2: SLDATA_T;
                                          var _3: SLDATA_T;
                                          const _4: SLDATA_T;
                                          const _5: SLDATA_T;
                                          var _6: SLDATA_T;
                                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          const _8: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FrequencyModulateComplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          const _4: SLDATA_T;
                                          const _5: SLDATA_T;
                                          var _6: SLDATA_T;
                                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          const _8: S;
                                          )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_DeltaModulate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var _3: SLDATA_T;
                               const _4: SLDATA_T;
                               const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DeltaDemodulate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var _3: SLDATA_T;
                                 const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DeltaModulate2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var _3: SLDATA_T;
                                const _4: SLDATA_T;
                                const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Digital modulation functions - mod_d.c }

var
  SIF_CostasQamDemodulate: function(var _1: SLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _3: SLARRAYINDEX_T;
                                    const _4: SLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var _6: SLARRAYINDEX_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var _8: SLARRAYINDEX_T;
                                    var _9: SLDATA_T;
                                    )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_CostasQamDemodulate: function(const _1: SLDATA_T;
                                    var _2: SLDATA_T;
                                    var _3: SLDATA_T;
                                    var _4: SLDATA_T;
                                    const _5: SLDATA_T;
                                    var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                    const _7: SLARRAYINDEX_T;
                                    const _8: SLDATA_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    var _10: SLARRAYINDEX_T;
                                    _11: SL;
                                    )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{$IFDEF _TMS320C30 || (_TMS320C40) // Defined by TI compiler}
{$ELSE // The following functions have too many parameters for the TI C3x/C4x compiler}
var
  SDS_CostasQamDemodulateDebug: function(const _1: SLDATA_T;
                                         var _2: SLDATA_T;
                                         var _3: SLDATA_T;
                                         var _4: SLDATA_T;
                                         const _5: SLDATA_T;
                                         var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                         const _7: SLARRAYINDEX_T;
                                         const _8: SLDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                         var _10: SLARRAYINDEX_T;
                                         )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_CostasQamDemodulate: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var _4: SLDATA_T;
                                    const _5: SLDATA_T;
                                    var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                    const _7: SLARRAYINDEX_T;
                                    _8: CO;
                                    )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_CostasQamDemodulateDebug: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                         var _4: SLDATA_T;
                                         const _5: SLDATA_T;
                                         var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                         const _7: SLARRAYINDEX_T;
                                         )
{$ENDIF // End of !((_TMS320C30) || (_TMS320C40)) }
                                         )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_QpskModulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _2: SLDATA_T;
                              const _3: SLARRAYINDEX_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                              var SIGLIB_OUT: SLDATA_T;
                              )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_QpskModulate: procedure(const _1: SLFIXDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const _4: SLARRAYINDEX_T;
                              var _5: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                              var SIGLIB_INOUT_PTR_DECL: SLCOMPLEXRECT_S;
                              _8: CO;
                              )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_QpskDemodulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _2: SLDATA_T;
                                const _3: SLARRAYINDEX_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                var SIGLIB_O: SLDATA_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_QpskDemodulate: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLARRAYINDEX_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                               var SIGLIB_INOU: SLCOMPLEXRECT_S;
                               )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_QpskDemodulateDebug: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const _3: SLARRAYINDEX_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                                    var SIGLIB: SLCOMPLEXRECT_S;
                                    )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_QpskDifferentialEncode: function(const _1: SLFIXDATA_T;
                                       var _2: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QpskDifferentialDecode: function(const _1: SLFIXDATA_T;
                                       var _2: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FskModulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _2: SLDATA_T;
                             const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FskModulateByte: procedure(_1: SLFIXDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                 const _6: SLDATA_T;
                                 const _7: SLDATA_T;
                                 const _8: SLFIXDATA_T;
                                 _9: C;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FskDemodulateByte: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                                  const _4: SLARRAYINDEX_T;
                                  const _5: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CpfskModulateByte: procedure(_1: SLFIXDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   const _7: SLFIXDATA_T;
                                   const _8: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FskModulate: procedure(_1: SLFIXDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                             var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                             const _6: SLDATA_T;
                             const _7: SLDATA_T;
                             const _8: SLFIXDATA_T;
                             _9: CONST;
                             )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_FskDemodulate: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INOUT_PTR_DECL: PSLDATA_T;
                              const _4: SLARRAYINDEX_T;
                              const _5: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CpfskModulate: procedure(_1: SLFIXDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               const _5: SLDATA_T;
                               const _6: SLDATA_T;
                               const _7: SLFIXDATA_T;
                               const _8: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_Qam16Modulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _2: SLDATA_T;
                               const _3: SLARRAYINDEX_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                               var SIGLIB_OUT: SLDATA_T;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Qam16Modulate: procedure(const _1: SLFIXDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _4: SLARRAYINDEX_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                               var SIGL: SLCOMPLEXRECT_S;
                               )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_Qam16Demodulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _2: SLDATA_T;
                                 const _3: SLARRAYINDEX_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                                 var SIGLIB_INOUT_PTR_DECL: SLCOMPLEXRECT_S;
                                 var SIGLIB_OU: SLDATA_T;
                                 )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Qam16Demodulate: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const _3: SLARRAYINDEX_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                var SIGLIB_OU: SLCOMPLEXRECT_S;
                                )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Qam16DemodulateDebug: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _3: SLARRAYINDEX_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                                     var SIGLI: SLCOMPLEXRECT_S;
                                     )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Qam16DifferentialEncode: function(const _1: SLFIXDATA_T;
                                        var _2: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Qam16DifferentialDecode: function(const _1: SLFIXDATA_T;
                                        var _2: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_BpskModulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _2: SLDATA_T;
                              var _3: SLDATA_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_BpskModulate: procedure(_1: SLFIXDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var _4: SLDATA_T;
                              const _5: SLFIXDATA_T;
                              const _6: SLDATA_T;
                              const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_BpskModulateByte: procedure(_1: SLFIXDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var _4: SLDATA_T;
                                  const _5: SLFIXDATA_T;
                                  const _6: SLDATA_T;
                                  const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_BpskDemodulate: procedure(var _1: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _3: SLARRAYINDEX_T;
                                const _4: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var _6: SLARRAYINDEX_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var _8: SLARRAYINDEX_T;
                                var SIGLIB_OUT: SLDATA_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_BpskDemodulate: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var _2: SLDATA_T;
                               const _3: SLDATA_T;
                               var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                               const _5: SLARRAYINDEX_T;
                               const _6: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var _8: SLARRAYINDEX_T;
                               var S: SLDATA_T;
                               )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_BpskDemodulateDebug: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var _2: SLDATA_T;
                                    const _3: SLDATA_T;
                                    var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                    const _5: SLARRAYINDEX_T;
                                    const _6: SLDATA_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    var _8: SLARRAYINDEX_T;
                                    _9: SLDATA;
                                    )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_DpskModulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _2: SLDATA_T;
                              var _3: SLDATA_T;
                              const _4: SLARRAYINDEX_T;
                              var _5: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DpskModulate: procedure(_1: SLFIXDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var _4: SLDATA_T;
                              const _5: SLFIXDATA_T;
                              const _6: SLDATA_T;
                              const _7: SLARRAYINDEX_T;
                              var _8: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DpskModulateByte: procedure(_1: SLFIXDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var _4: SLDATA_T;
                                  const _5: SLFIXDATA_T;
                                  const _6: SLDATA_T;
                                  const _7: SLARRAYINDEX_T;
                                  var _8: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_DpskDemodulate: procedure(var _1: SLDATA_T;
                                var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                const _3: SLARRAYINDEX_T;
                                const _4: SLDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                var _6: SLARRAYINDEX_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                var _8: SLARRAYINDEX_T;
                                var SIGLIB_INPUT_: SLDATA_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_DpskDemodulate: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var _2: SLDATA_T;
                               const _3: SLDATA_T;
                               var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                               const _5: SLARRAYINDEX_T;
                               const _6: SLDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                               var _8: SLARRAYINDEX_T;
                               var S: SLDATA_T;
                               )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_DpskDemodulateDebug: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var _2: SLDATA_T;
                                    const _3: SLDATA_T;
                                    var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                    const _5: SLARRAYINDEX_T;
                                    const _6: SLDATA_T;
                                    var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                    var _8: SLARRAYINDEX_T;
                                    _9: SLDATA;
                                    )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_PiByFourDQpskModulate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       const _2: SLDATA_T;
                                       const _3: SLARRAYINDEX_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                       var SI: SLDATA_T;
                                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_PiByFourDQpskModulate: procedure(const _1: SLFIXDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const _4: SLARRAYINDEX_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                                       _7: SLCOMPLEXRECT;
                                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_ChannelizationCode: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _2: SLARRAYINDEX_T;
                                    const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexQPSKSpread: procedure(const _1: SLFIXDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _5: SLDATA_T;
                                   const _6: SLDATA_T;
                                   const SIGLIB_INPU: PSLCOMPLEXRECT_S;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ComplexQPSKDeSpread: function(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const _4: SLDATA_T;
                                    const _5: SLDATA_T;
                                    const SIGLIB_INPUT_PTR_: PSLCOMPLEXRECT_S;
                                    )
: SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{/// Modem utility functions - modem.c }

type
  SLParity_t, const SLArrayIndex_t);= (
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_SyncToAsyncConverter (const SLUInt8_t*,
    SLUInt8_t*,
    const SLArrayIndex_t,
    const enum SLParity_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_AsyncToSyncConverter (const SLUInt8_t*,
    SLUInt8_t*,
    const SLArrayIndex_t,
    const enum SLParity_t,
    SLArrayIndex_t*,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_AsyncAddRemoveStopBits (SLArrayIndex_t* );,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_AsyncRemoveStopBits (const SLUInt8_t*,
    SLUInt8_t*,
    const SLArrayIndex_t,
    const enum SLParity_t,
    const SLArrayIndex_t,
    SLArrayIndex_t*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_AsyncAddStopBits (const SLUInt8_t*,
    SLUInt8_t*,
    const SLArrayIndex_t,
    const enum SLParity_t,
    const SLArrayIndex_t,
    SLArrayIndex_t*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_DecreaseWordLength (const SLUInt8_t*,
    SLUInt8_t*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_IncreaseWordLength (const SLUInt8_t*,
    SLUInt8_t*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    {/// PRBS scramblers - prbs.c  );

var
  SDS_Scrambler1417: function(const _1: SLFIXDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Descrambler1417: function(const _1: SLFIXDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Scrambler1417WithInversion: function(const _1: SLFIXDATA_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLUINT32_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLFIXDATA_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Descrambler1417WithInversion: function(const _1: SLFIXDATA_T;
                                             var SIGLIB_INOUT_PTR_DECL: SLUINT32_T;
                                             var SIGLIB_INOUT_PTR_DECL: SLFIXDATA_T;
                                             var SIGLIB_INOUT_PTR_DECL: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Scrambler1823: function(const _1: SLFIXDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Descrambler1823: function(const _1: SLFIXDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Scrambler523: function(const _1: SLFIXDATA_T;
                             var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Descrambler523: function(const _1: SLFIXDATA_T;
                               var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ScramblerDescramblerPN9: function(const _1: SLFIXDATA_T;
                                        var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SequenceGeneratorPN9: function(var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ScramblerDescramblerPN15: function(const _1: SLFIXDATA_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SequenceGeneratorPN15: function(var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ScramblerDescramblergCRC24: function(const _1: SLFIXDATA_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SequenceGeneratorgCRC24: function(var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ScramblerDescramblergCRC16: function(const _1: SLFIXDATA_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SequenceGeneratorgCRC16: function(var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ScramblerDescramblergCRC12: function(const _1: SLFIXDATA_T;
                                           var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SequenceGeneratorgCRC12: function(var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ScramblerDescramblergCRC8: function(const _1: SLFIXDATA_T;
                                          var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SequenceGeneratorgCRC8: function(var SIGLIB_INOUT_PTR_DECL: SLUINT32_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_LongCodeGenerator3GPPDL: procedure(var SIGLIB_INOUT_PTR_DECL: SLCOMPLEXRECT_S;
                                         var SIGLIB_INOUT_PTR_DECL: SLUINT32_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLUINT32_T;
                                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_LongCodeGenerator3GPPUL: procedure(var SIGLIB_INOUT_PTR_DECL: SLCOMPLEXRECT_S;
                                         var SIGLIB_INOUT_PTR_DECL: SLUINT32_T;
                                         var SIGLIB_INOUT_PTR_DECL: SLUINT32_T;
                                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Multiplex and demultiplexing functions - mux.c }
var
  SDA_Multiplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _4: SLARRAYINDEX_T;
                           const _5: SLARRAYINDEX_T;
                           const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Demultiplex: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _3: SLARRAYINDEX_T;
                             const _4: SLARRAYINDEX_T;
                             const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Mux2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Demux2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


var
  SDA_Mux3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Demux3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


var
  SDA_Mux4: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Demux4: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


var
  SDA_Mux5: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT: SLDATA_T;
                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Demux5: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        _7: CONST;
                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Mux6: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_: PSLDATA_T;
                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Demux6: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        _7: SLDATA;
                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Mux7: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_: PSLDATA_T;
                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Demux7: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        _7: SLDATA;
                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Mux8: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_: PSLDATA_T;
                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_Demux8: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        _7: SLDATA;
                        )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Decimation and interpolation functions - decint.c }

var
  SIF_Decimate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Decimate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _3: SLFIXDATA_T;
                          var _4: SLARRAYINDEX_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_Interpolate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Interpolate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _3: SLFIXDATA_T;
                             var _4: SLARRAYINDEX_T;
                             const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FilterAndDecimate: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FilterAndDecimate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLFIXDATA_T;
                                   var _4: SLARRAYINDEX_T;
                                   var _5: SLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var _7: SLARRAYINDEX_T;
                                   const _8: SLARRAYINDEX_T;
                                   _9: CONS;
                                   )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SIF_InterpolateAndFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                      var _3: SLARRAYINDEX_T;
                                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_InterpolateAndFilter: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      const _3: SLFIXDATA_T;
                                      var _4: SLARRAYINDEX_T;
                                      var _5: SLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      var _7: SLARRAYINDEX_T;
                                      const _8: SLARRAYINDEX_T;
                                      _9: C;
                                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ResampleLinear: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ResampleLinearNSamples: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       const _3: SLDATA_T;
                                       const _4: SLARRAYINDEX_T;
                                       const _5: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_InterpolateLinear1D: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _2: SLDATA_T;
                                   const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_InterpolateLinear2D: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _3: SLDATA_T;
                                   const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_ResampleSinc: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var _2: SLDATA_T;
                              const _3: SLARRAYINDEX_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLWindow_t, const SLData_t, const SLArrayIndex_t);= (
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_ResampleSinc (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_ResampleSincNSamples (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    co,
    void SIGLIB_FUNC_DECL SIF_InterpolateSinc1D (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_InterpolateWindowedSinc1D (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const SLArrayIndex_t,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLWindow_t,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateSinc1D (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_ResampleLinearContiguous (SLData_t*,
    SLData_t* );,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_ResampleLinearContiguous (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    SLData_t*,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_ResampleSincContiguous (SLData_t*,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_ResampleWindowedSincContiguous (SLData_t*,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLWindow_t,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_ResampleSincContiguous (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const,
    {/// DTMF generation and detection functions - dtmf.c  );

var
  SIF_DtmfGenerate: procedure(SIGLIB_OUTPUT_PTR_DECL: PSLDATA_T;
                              const _2: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DtmfGenerate: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _2: SLFIXDATA_T;
                             const _3: SLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const _5: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_DtmfDetect: procedure(const _1: SLDATA_T;
                            const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DtmfDetect: function(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                           const _2: SLARRAYINDEX_T): SLSTATUS_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DtmfDetectAndValidate: function(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                      const _2: SLDATA_T;
                                      var _3: SLFIXDATA_T;
                                      var _4: SLFIXDATA_T;
                                      var _5: SLFIXDATA_T;
                                      const _6: SLARRAYINDEX_T): SLSTATUS_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_AsciiToKeyCode: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_KeyCodeToAscii: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Speech processing functions - speech.c }

var
  SIF_PreEmphasisFilter: procedure(var _1: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PreEmphasisFilter: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLDATA_T;
                                   var _4: SLDATA_T;
                                   const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_DeEmphasisFilter: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DeEmphasisFilter: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _3: SLDATA_T;
                                  var _4: SLDATA_T;
                                  const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AdpcmEncoder: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AdpcmEncoderDebug: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AdpcmDecoder: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Min max and peak hold functions - minmax.c }

var
  SDA_Max: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                    const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AbsMax: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Min: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                    const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AbsMin: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Middle: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Range: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MaxPos: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _2: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AbsMaxPos: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const _2: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MinPos: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _2: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AbsMinPos: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const _2: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Max: function(const _1: SLDATA_T;
                    const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_AbsMax: function(const _1: SLDATA_T;
                       const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Min: function(const _1: SLDATA_T;
                    const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_AbsMin: function(const _1: SLDATA_T;
                       const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LocalMax: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _2: SLARRAYINDEX_T;
                         const _3: SLARRAYINDEX_T;
                         const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LocalAbsMax: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            const _2: SLARRAYINDEX_T;
                            const _3: SLARRAYINDEX_T;
                            const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LocalMin: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _2: SLARRAYINDEX_T;
                         const _3: SLARRAYINDEX_T;
                         const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LocalAbsMin: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            const _2: SLARRAYINDEX_T;
                            const _3: SLARRAYINDEX_T;
                            const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{ void SIGLIB_FUNC_DECL SDA_Max2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }

{ void SIGLIB_FUNC_DECL SDA_AbsMax2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }

{ void SIGLIB_FUNC_DECL SDA_SignedAbsMax2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }

{ void SIGLIB_FUNC_DECL SDA_Min2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }

{ void SIGLIB_FUNC_DECL SDA_AbsMin2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }

{ void SIGLIB_FUNC_DECL SDA_SignedAbsMin2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }

var
  SDA_PeakHold: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _3: SLDATA_T;
                          var _4: SLDATA_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PeakHoldPerSample: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLDATA_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DetectFirstPeakOverThreshold: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             const _2: SLDATA_T;
                                             const _3: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLRoundingMode_t);= (
    void SIGLIB_FUNC_DECL SDA_Round (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLRoundingMode_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Clip (const SLData_t,
    const SLData_t,
    const enum SLClipMode_t);,
    void SIGLIB_FUNC_DECL SDA_Clip (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const enum SLClipMode_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Threshold (const SLData_t,
    const SLData_t,
    const enum SLThresholdMode_t);,
    void SIGLIB_FUNC_DECL SDA_Threshold (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const enum SLThresholdMode_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_SoftThreshold (const SLData_t,
    const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_SoftThreshold (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_ThresholdAndClamp (const SLData_t,
    const SLData_t,
    const SLData_t,
    const enum SLThresholdMode_t);,
    void SIGLIB_FUNC_DECL SDA_ThresholdAndClamp (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const enum SLThresholdMode_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Clamp (const SLData_t,
    const SLData_t,
    const SLData_t,
    const enum SLThresholdMode_t);,
    void SIGLIB_FUNC_DECL SDA_Clamp (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const enum SLThresholdMode_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_TestOverThreshold (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_TestAbsOverThreshold (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SelectMax (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SelectMin (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SelectMagnitudeSquaredMax (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_,
    void SIGLIB_FUNC_DECL SDA_SelectMagnitudeSquaredMin (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_,
    SLData_t SIGLIB_FUNC_DECL SDS_SetMinValue (const SLData_t src,
    const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_SetMinValue (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_PeakToAverageRatio (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_PeakToAveragePowerRatio (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_PeakToAveragePowerRatioDB (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_PeakToAverageRatioComplex (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_PeakToAveragePowerRatioComplex (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_PeakToAveragePowerRatioComplexDB (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_MovePeakTowardsDeadBand (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_Envelope (SLData_t* SIGLIB_PTR_DECL);,
    SLData_t SIGLIB_FUNC_DECL SDS_Envelope (const SLData_t,
    const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_PTR_DECL);,
    void SIGLIB_FUNC_DECL SDA_Envelope (const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_EnvelopeRMS (SLData_t* SIGLIB_PTR_DECL);,
    SLData_t SIGLIB_FUNC_DECL SDS_EnvelopeRMS (const SLData_t,
    const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_PTR_DECL);,
    void SIGLIB_FUNC_DECL SDA_EnvelopeRMS (const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_EnvelopeHilbert (SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t* SIGLIB_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    SLData_t* );,
    SLData_t SIGLIB_FUNC_DECL SDS_EnvelopeHilbert (const SLData_t,
    const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t* SIGLIB_PTR_DECL,
    SLArrayIndex_t*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    const SLData_t,
    SL,
    void SIGLIB_FUNC_DECL SDA_EnvelopeHilbert (const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGL,
    SLData_t SIGLIB_FUNC_DECL SDS_InterpolateThreePointQuadraticVertexMagnitude (const SLData_t,
    const SLData_t,
    const SLData_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_InterpolateThreePointQuadraticVertexLocation (const SLData_t,
    const SLData_t,
    const SLData_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude (const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_InterpolateArbitraryThreePointQuadraticVertexLocation (const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateThreePointQuadraticVertexMagnitude (const SLData_t* SIGLIB_INPUT_PTR_DECL);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateThreePointQuadraticVertexLocation (const SLData_t* SIGLIB_INPUT_PTR_DECL);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateArbitraryThreePointQuadraticVertexLocation (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_FirstMinVertex (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FirstMinVertexPos (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDA_FirstMaxVertex (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FirstMaxVertexPos (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t);,
    {/// DSP Math functions - smath.c  );

var
  SDA_Divide: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        const _2: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Divide2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Multiply: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const _2: SLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Multiply2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ComplexMultiply: procedure(const _1: SLDATA_T;
                                 const _2: SLDATA_T;
                                 const _3: SLDATA_T;
                                 const _4: SLDATA_T;
                                 var _5: SLDATA_T;
                                 var _6: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ComplexInverse: procedure(const _1: SLDATA_T;
                                const _2: SLDATA_T;
                                var _3: SLDATA_T;
                                var _4: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexInverse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ComplexDivide: procedure(const _1: SLDATA_T;
                               const _2: SLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLDATA_T;
                               var _5: SLDATA_T;
                               var _6: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexScalarMultiply: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       const _3: SLDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexMultiply2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  var SIGLIB: SLDATA_T;
                                  )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_ComplexScalarDivide: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _3: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexDivide2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_O: SLDATA_T;
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_RealDotProduct: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

var
  SDA_ComplexDotProduct: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const _5: SLARRAYINDEX_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{$ENDIF // End of #ifndef _HP_VEE}

var
  SDA_Add2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Add3: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Add4: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Add5: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT: SLDATA_T;
                      )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_WeightedSum: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _4: SLDATA_T;
                             const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Subtract2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Offset: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        const _2: SLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PositiveOffset: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_NegativeOffset: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Negate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Inverse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Square: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Sqrt: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Difference: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SumOfDifferences: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Roots: function(const _1: SLDATA_T;
                      const _2: SLDATA_T;
                      const _3: SLDATA_T;
                      )

                      }: // POINTER TO ROOT # 1;
                      )
{ SLData_t* ); // Pointer to root # 2 }
                      )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_Factorial: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Permutations: function(const n: SLDATA_T;
                             const k: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Combinations: function(const n: SLDATA_T;
                             const k: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_OverlapAndAddLinear: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                                     const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OverlapAndAddLinear: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _4: SLDATA_T;
                                     const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OverlapAndAddLinearWithClip: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             const _4: SLDATA_T;
                                             const _5: SLDATA_T;
                                             const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OverlapAndAddArbitrary: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_OverlapAndAddArbitraryWithClip: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                const _5: SLDATA_T;
                                                const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_DegreesToRadians: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DegreesToRadians: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_RadiansToDegrees: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_RadiansToDegrees: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_DetectNAN: function(const _1: SLDATA_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_DetectNAN: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const _2: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// DSP utility functions - dsputils.c }

var
  SDA_Rotate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        const _3: SLARRAYINDEX_T;
                        const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Reverse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Scale: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLDATA_T;
                      const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MeanSquare: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MeanSquareError: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const _3: SLDATA_T;
                                const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_RootMeanSquare: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Magnitude: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MagnitudeSquared: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Magnitude: function(const _1: SLDATA_T;
                          const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_MagnitudeSquared: function(const _1: SLDATA_T;
                                 const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Phase: function(const _1: SLDATA_T;
                      const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PhaseWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PhaseUnWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MagnitudeAndPhaseWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MagnitudeAndPhaseUnWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                            const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                            const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MagnitudeSquaredAndPhaseWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                 const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_MagnitudeSquaredAndPhaseUnWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                   const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PhaseWrap: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PhaseUnWrap: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Log2: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Log2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_LogN: function(const _1: SLDATA_T;
                     const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LogN: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLDATA_T;
                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LogDistribution: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _2: SLDATA_T;
                                 const _3: SLDATA_T;
                                 const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Copy: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CopyWithStride: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const _2: SLARRAYINDEX_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _4: SLARRAYINDEX_T;
                                const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_CopyWithOverlap: procedure(var _1: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CopyWithOverlap: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                                var _4: SLARRAYINDEX_T;
                                const _5: SLARRAYINDEX_T;
                                const _6: SLARRAYINDEX_T;
                                const _7: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_CopyWithIndex: procedure(var _1: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CopyWithIndex: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var _3: SLARRAYINDEX_T;
                              const _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T;
                              const _6: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_20Log10: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_10Log10: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LogMagnitude: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LogMagnitudeAndPhaseWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LogMagnitudeAndPhaseUnWrapped: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                               const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Lengthen: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _3: SLARRAYINDEX_T;
                          const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Shorten: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_ReSize: procedure(var _1: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ReSize: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       var _4: SLARRAYINDEX_T;
                       const _5: SLARRAYINDEX_T;
                       const _6: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ReSizeInput: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                             var _3: SLARRAYINDEX_T;
                             const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ReSizeOutput: function(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                             var _3: SLARRAYINDEX_T;
                             const _4: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Fill: procedure(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                      const _2: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Clear: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                       const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Histogram: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _3: SLDATA_T;
                           const _4: SLDATA_T;
                           const _5: SLARRAYINDEX_T;
                           const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_HistogramCumulative: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _3: SLDATA_T;
                                     const _4: SLDATA_T;
                                     const _5: SLARRAYINDEX_T;
                                     const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_HistogramExtended: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLDATA_T;
                                   const _4: SLDATA_T;
                                   const _5: SLARRAYINDEX_T;
                                   const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_HistogramExtendedCumulative: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             const _3: SLDATA_T;
                                             const _4: SLDATA_T;
                                             const _5: SLARRAYINDEX_T;
                                             const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_Histogram: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_HistogramEqualize: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLDATA_T;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Quantize: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _3: SLARRAYINDEX_T;
                          const _4: SLDATA_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Quantize: function(const _1: SLDATA_T;
                         const _2: SLARRAYINDEX_T;
                         const _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Quantize_N: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const _3: SLDATA_T;
                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Quantise_N: function(const _1: SLDATA_T;
                           const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Abs: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLSignalSign_t);= (
    SLData_t SIGLIB_FUNC_DECL SDS_BitsToPeakValue (SLData_t,
    enum SLSignalSign_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_LinearTodBm (const SLData_t,
    const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_LinearTodBm (const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_dBmToLinear (const SLData_t,
    const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_dBmToLinear (const SLData_t* SIGLIB_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDS_Compare (const SLData_t,
    const SLData_t,
    const SLData_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDA_Compare (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDS_CompareComplex (const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDA_CompareComplex (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Int (const SLData_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Frac (const SLData_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_AbsFrac (const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_Int (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_Frac (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_AbsFrac (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SetRange (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SetMean (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    {/// dsputil2.c  );

var
  SDA_RealSpectralInverse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexSpectralInverse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                        const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FdInterpolate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _5: SLFIXDATA_T;
                               const _6: SLFIXDATA_T;
                               const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FdInterpolate2: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _5: SLARRAYINDEX_T;
                                const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_TdPitchShift: function(const _1: SLDATA_T;
                             var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                             var SIGLIB_INPUT_PTR_DECL: SLARRAYINDEX_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var _5: SLDATA_T;
                             const _6: SLDATA_T;
                             const _7: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_TdPitchShift: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_INPUT_PTR_DECL: SLARRAYINDEX_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var _6: SLDATA_T;
                              const _7: SLDATA_T;
                              _8: CO;
                              )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
type
  SLEcho_t, const SLArrayIndex_t);= (
    void SIGLIB_FUNC_DECL SDA_Power (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Polynomial (const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t);,
    void SIGLIB_FUNC_DECL SDA_Polynomial (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_Modulo (const SLData_t,
    const SLData_t,
    const enum SLModuloMode_t);,
    void SIGLIB_FUNC_DECL SDA_Modulo (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const enum SLModuloMode_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_AgcPeak (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    SLData_t*,
    SLData_t*,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_AgcMeanAbs (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t*,
    SLData_t*,
    SLData_t*,
    SLData_t*,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_AgcMeanAbs (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t*,
    SLData_t*,
    void SIGLIB_FUNC_DECL SIF_AgcMeanSquared (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t*,
    SLData_t*,
    SLData_t*,
    SLData_t*,
    const SLData_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_AgcMeanSquared (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLArrayIndex_t*,
    SLData_t*,
    SLData,
    void SIGLIB_FUNC_DECL SDA_GroupDelay (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDA_ZeroCrossingDetect (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_ZeroCrossingDetect (const SLData_t,
    SLData_t*,
    const enum SLLevelCrossingMode_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FirstZeroCrossingLocation (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t*,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDA_ZeroCrossingCount (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t*,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDA_LevelCrossingDetect (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t DetectionLevel,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    SLData_t SIGLIB_FUNC_DECL SDS_LevelCrossingDetect (const SLData_t,
    const SLData_t DetectionLevel,
    SLData_t*,
    const enum SLLevelCrossingMode_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FirstLevelCrossingLocation (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t DetectionLevel,
    SLData_t*,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    SLFixData_t SIGLIB_FUNC_DECL SDA_LevelCrossingCount (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t DetectionLevel,
    SLData_t*,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_Trigger (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t*,
    const SLData_t,
    const enum SLLevelCrossingMode_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_ClearLocation (SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SetLocation (SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SortMinToMax (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_SortMaxToMin (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    { void SIGLIB_FUNC_DECL SDA_SortMinToMax2 (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    // Pointer to source array #1  );
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }
{ SLData_t* SIGLIB_OUTPUT_PTR_DECL, // Pointer to destination array #1 }
{ SLData_t* SIGLIB_OUTPUT_PTR_DECL, // Pointer to destination array #2 }

{ void SIGLIB_FUNC_DECL SDA_SortMaxToMin2 (const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #1 }
{ const SLData_t* SIGLIB_INPUT_PTR_DECL, // Pointer to source array #2 }
{ SLData_t* SIGLIB_OUTPUT_PTR_DECL, // Pointer to destination array #1 }
{ SLData_t* SIGLIB_OUTPUT_PTR_DECL, // Pointer to destination array #2 }

var
  SDA_SortIndexed: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_CountOneBits: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_CountZeroBits: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_CountLeadingOneBits: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_CountLeadingZeroBits: function(const _1: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Sign: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Swap: procedure(var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                      var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_ModuloIncrement: function(const _1: SLFIXDATA_T;
                                const _2: SLFIXDATA_T;
                                const _3: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_ModuloDecrement: function(const _1: SLFIXDATA_T;
                                const _2: SLFIXDATA_T;
                                const _3: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_IndexModuloIncrement: function(const _1: SLARRAYINDEX_T;
                                     const _2: SLARRAYINDEX_T;
                                     const _3: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SUF_IndexModuloDecrement: function(const _1: SLARRAYINDEX_T;
                                     const _2: SLARRAYINDEX_T;
                                     const _3: SLARRAYINDEX_T): SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLFindType_t, const SLArrayIndex_t);= (
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FindValue (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t DesiredValue,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLFindType_t,
    const SLArrayIndex_t);,
    {/// dsputil3.c  );

var
  SIF_DeGlitch: procedure(_1: PSLARRAYINDEX_T;
                          _2: SLDATA_T;
                          var _3: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLDeGlitchMode_t, const SLArrayIndex_t, const SLData_t, SLData_t* );= (
    void SIGLIB_FUNC_DECL SDA_DeGlitch (SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLArrayIndex_t*,
    const enum SLDeGlitchMode_t,
    const SLArrayIndex_t,
    const SLData_t,
    SLData_t*,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_RemoveDuplicates (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FindAllDuplicates (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FindFirstDuplicates (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FindSortAllDuplicates (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    SLArrayIndex_t SIGLIB_FUNC_DECL SDA_FindSortFirstDuplicates (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SDA_Shuffle (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLArrayIndex_t);,
    {/// Data type conversion functions - datatype.c  );

var
  SDA_SigLibDataToFix: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLFIXDATA_T;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FixToSigLibData: procedure(const SIGLIB_INPUT_PTR_DECL: PSLFIXDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SigLibDataToImageData: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLIMAGEDATA_T;
                                       const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ImageDataToSigLibData: procedure(const SIGLIB_INPUT_PTR_DECL: PSLIMAGEDATA_T;
                                       var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                       const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SigLibDataToFix16: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLINT16_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Fix16ToSigLibData: procedure(const SIGLIB_INPUT_PTR_DECL: PSLINT16_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SigLibDataToFix32: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLINT32_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Fix32ToSigLibData: procedure(const SIGLIB_INPUT_PTR_DECL: PSLINT32_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                   const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_SigLibDataToQFormatInteger: function(const x: SLDATA_T;
                                           const _2: SLFIXDATA_T;
                                           const _3: SLFIXDATA_T): SLFIXDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QFormatIntegerToSigLibData: function(const _1: SLFIXDATA_T;
                                           const _2: SLFIXDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SigLibDataToQFormatInteger: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLFIXDATA_T;
                                            const _3: SLFIXDATA_T;
                                            const _4: SLFIXDATA_T;
                                            const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QFormatIntegerToSigLibData: procedure(const SIGLIB_INPUT_PTR_DECL: PSLFIXDATA_T;
                                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                            const _3: SLFIXDATA_T;
                                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Control functions - control.c }

var
  SDS_Pid: procedure(const _1: SLDATA_T;
                     const _2: SLDATA_T;
                     const _3: SLDATA_T;
                     const _4: SLDATA_T;
                     var SIGLIB_INPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Pwm: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                     var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                     const _5: SLDATA_T;
                     const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{/// Order analysis functions - order.c }

var
  SDA_ExtractOrder: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const _2: SLARRAYINDEX_T;
                             const _3: SLARRAYINDEX_T;
                             const _4: SLDATA_T;
                             const _5: SLARRAYINDEX_T;
                             const _6: SLDATA_T;
                             const _7: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

type
  SLSignalCoherenceType_t, const SLArrayIndex_t, const SLArrayIndex_t);= (
    SLData_t SIGLIB_FUNC_DECL SDA_SumLevelWholeSpectrum (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const enum SLSignalCoherenceType_t,
    const SLArrayIndex_t,
    const SLData_t,
    const SLArrayIndex_t);,
    void SIGLIB_FUNC_DECL SIF_OrderAnalysis (SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t*,
    const SLArrayIndex_t,
    const SLArrayIndex_t,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const enum SLWindow_t,
    const SLData_t,
    SLData_t*,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    SLData_t SIGLIB_FUNC_DECL SDA_OrderAnalysis (const SLData_t* SIGLIB_INPUT_PTR_DECL,
    SLData_t* SIGLIB_INOUT_PTR_DECL,
    SLData_t* SIGLIB_OUTPUT_PTR_DECL,
    const SLData_t* SIGLIB_INPUT_PTR_DECL,
    const SLData_t,
    const SLData_t,
    const SLData_t,
    const SLAr,
    {/// Statistics functions - stats.c  );

var
  SDA_Sum: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                    const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AbsSum: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SumOfSquares: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Mean: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     const _2: SLDATA_T;
                     const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_AbsMean: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        const _2: SLDATA_T;
                        const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SubtractMean: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _3: SLDATA_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SubtractMax: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_SampleSd: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PopulationSd: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_UnbiasedVariance: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 const _2: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Median: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                       var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                       const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Regression analysis functions - regress.c }

var
  SDA_LinraConstantCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LinraRegressionCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LinraCorrelationCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LinraEstimateX: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LinraEstimateY: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


var
  SDA_LograConstantCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LograRegressionCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LograCorrelationCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LograEstimateX: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_LograEstimateY: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


var
  SDA_ExpraConstantCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExpraRegressionCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExpraCorrelationCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExpraEstimateX: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExpraEstimateY: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


var
  SDA_PowraConstantCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PowraRegressionCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PowraCorrelationCoeff: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                      const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PowraEstimateX: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PowraEstimateY: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               const _3: SLDATA_T;
                               const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Detrend: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExtractTrend: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Trigonometrical functions - trig.c }

var
  SDA_Sin: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Cos: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Tan: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FastSin: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FastSin: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var _3: SLDATA_T;
                         const _4: SLDATA_T;
                         const _5: SLARRAYINDEX_T;
                         const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FastSin: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var _2: SLDATA_T;
                        const _3: SLDATA_T;
                        const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FastCos: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FastCos: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         var _3: SLDATA_T;
                         const _4: SLDATA_T;
                         const _5: SLARRAYINDEX_T;
                         const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FastCos: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var _2: SLDATA_T;
                        const _3: SLDATA_T;
                        const _4: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_FastSinCos: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FastSinCos: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            var _4: SLDATA_T;
                            const _5: SLDATA_T;
                            const _6: SLARRAYINDEX_T;
                            const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_FastSinCos: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var _2: SLDATA_T;
                            var _3: SLDATA_T;
                            var _4: SLDATA_T;
                            const _5: SLDATA_T;
                            const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_QuickSin: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          var _2: SLDATA_T;
                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QuickSin: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _4: SLDATA_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QuickSin: function(const _1: SLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_QuickCos: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          var _2: SLDATA_T;
                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QuickCos: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _4: SLDATA_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QuickCos: function(const _1: SLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_QuickSinCos: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var _2: SLDATA_T;
                             const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QuickSinCos: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _5: SLDATA_T;
                             const _6: SLARRAYINDEX_T;
                             const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QuickSinCos: procedure(const _1: SLDATA_T;
                             const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var _3: SLDATA_T;
                             var _4: SLDATA_T;
                             const _5: SLDATA_T;
                             const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_QuickTan: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          var _2: SLDATA_T;
                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QuickTan: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _4: SLDATA_T;
                          const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QuickTan: function(const _1: SLDATA_T;
                         const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         const _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_Sinc: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_Sinc: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SIF_QuickSinc: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           var _2: SLDATA_T;
                           const _3: SLDATA_T;
                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_QuickSinc: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _4: SLDATA_T;
                           const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_QuickSinc: function(const _1: SLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const _3: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{/// Complex vector functions - complex.c }

{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

var
  SCV_Polar: function(const _1: SLDATA_T;
                      const _2: SLDATA_T): SLCOMPLEXPOLAR_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Rectangular: function(const _1: SLDATA_T;
                            const _2: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_PolarToRectangular: function(const _1: SLCOMPLEXPOLAR_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_RectangularToPolar: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXPOLAR_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Sqrt: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Inverse: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Conjugate: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Magnitude: function(const _1: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_MagnitudeSquared: function(const _1: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Phase: function(const _1: SLCOMPLEXRECT_S): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Multiply: function(const _1: SLCOMPLEXRECT_S;
                         const _2: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Divide: function(const _1: SLCOMPLEXRECT_S;
                       const _2: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Add: function(const _1: SLCOMPLEXRECT_S;
                    const _2: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Subtract: function(const _1: SLCOMPLEXRECT_S;
                         const _2: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Log: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Exp: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Expj: function(const _1: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Pow: function(const _1: SLCOMPLEXRECT_S;
                    const _2: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_VectorAddScalar: function(const _1: SLCOMPLEXRECT_S;
                                const _2: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_VectorSubtractScalar: function(const _1: SLCOMPLEXRECT_S;
                                     const _2: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_VectorMultiplyScalar: function(const _1: SLCOMPLEXRECT_S;
                                     const _2: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_VectorDivideScalar: function(const _1: SLCOMPLEXRECT_S;
                                   const _2: SLDATA_T): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_ScalarSubtractVector: function(const _1: SLDATA_T;
                                     const _2: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SCV_Roots: procedure(const _1: SLCOMPLEXRECT_S;
                       const _2: SLCOMPLEXRECT_S;
                       const _3: SLCOMPLEXRECT_S;
                       )

                       }: // POINTER TO ROOT # 1;
                       )
{ SLComplexRect_s* ); // Pointer to root # 2 }
                       )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SCV_Copy: function(const _1: SLCOMPLEXRECT_S): SLCOMPLEXRECT_S cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

{ enum SLCompareType_t SIGLIB_FUNC_DECL SCV_Compare (const SLComplexRect_s, // Input vector #1 }
{ const SLComplexRect_s); // Input vector #2 }

{/// Array oriented complex vector functions - complexa.c }

var
  SDA_CreateComplexRect: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_CreateComplexPolar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXPOLAR_S;
                                    const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExtractComplexRect: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ExtractComplexPolar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXPOLAR_S;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ClearComplexRect: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                  const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ClearComplexPolar: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXPOLAR_S;
                                   const _2: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FillComplexRect: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                 const _2: SLCOMPLEXRECT_S;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_FillComplexPolar: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXPOLAR_S;
                                  const _2: SLCOMPLEXPOLAR_S;
                                  const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectangularToPolar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXPOLAR_S;
                                           const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexPolarToRectangular: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXPOLAR_S;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                           const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_RectangularToPolar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_PolarToRectangular: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectSqrt: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectInverse: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                    const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectConjugate: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectMagnitude: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                      const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectMagnitudeSquared: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectPhase: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                  const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectMultiply: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                     const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectDivide: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                   var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                   const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectAdd: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectSubtract: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                     const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectLog: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectExp: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectExpj: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectPow: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                const _3: SLDATA_T;
                                const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectAddScalar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                      const _2: SLDATA_T;
                                      var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectSubtractScalar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                           const _2: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectMultiplyScalar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                           const _2: SLDATA_T;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectDivideScalar: procedure(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                         const _2: SLDATA_T;
                                         var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexScalarSubtractRect: procedure(const _1: SLDATA_T;
                                           const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                           var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                           const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexRectLinearInterpolate: procedure(const _1: SLCOMPLEXRECT_S;
                                              const _2: SLCOMPLEXRECT_S;
                                              var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S;
                                              const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ComplexPolarLinearInterpolate: procedure(const _1: SLCOMPLEXPOLAR_S;
                                               const _2: SLCOMPLEXPOLAR_S;
                                               var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXPOLAR_S;
                                               const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{$ENDIF // End of #ifndef _HP_VEE}


{/// 2D Matrix manipulation functions and macros - matrix.c }

var
  SMX_Transpose: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const )

                           }: // SOURCE MATRIX # OF ROWS;
                           )
{ const SLArrayIndex_t); // Source matrix # cols }
                           )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SMX_Multiply: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const )

                          }: // SOURCE MATRIX 1 # OF ROWS;
                          const )

                          }: // SOURCE MATRIX 1 # OF COLUMNS;
                          )
{ const SLArrayIndex_t); // Source matrix 2 # of columns }
                          )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SMX_CreateIdentity: procedure(var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                )
{ const SLArrayIndex_t); // Destination matrix # of rows and columns }
                                )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SMX_Inverse2x2: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ComplexInverse2x2: function(const SIGLIB_INPUT_PTR_DECL: PSLCOMPLEXRECT_S;
                                  var SIGLIB_OUTPUT_PTR_DECL: SLCOMPLEXRECT_S): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_Inverse: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                        var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                        var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                        var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                        )
: SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SMX_LuDecompose: function(var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            const _4: SLARRAYINDEX_T): SLERROR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_LuSolve: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const SIGLIB_INOUT_PTR_DECL: PSLARRAYINDEX_T;
                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_Determinant: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            var SIGLIB_INOUT_PTR_DECL: SLARRAYINDEX_T;
                            var SIGLIB_INOUT_PTR_DECL: SLDATA_T;
                            const _5: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_LuDeterminant: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INOUT_PTR_DECL: PSLARRAYINDEX_T;
                              const _3: SLARRAYINDEX_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_RotateClockwise: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _3: SLARRAYINDEX_T;
                                 const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_RotateAntiClockwise: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _3: SLARRAYINDEX_T;
                                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_Reflect: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                         var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                         const _3: SLARRAYINDEX_T;
                         const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_Flip: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                      var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                      const _3: SLARRAYINDEX_T;
                      const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_InsertRow: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                           var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                           const _4: SLARRAYINDEX_T;
                           const _5: SLARRAYINDEX_T;
                           const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ExtractRow: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                            var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                            const _3: SLARRAYINDEX_T;
                            const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_InsertColumn: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T;
                              const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ExtractColumn: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _3: SLARRAYINDEX_T;
                               const _4: SLARRAYINDEX_T;
                               const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_InsertNewRow: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T;
                              const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_DeleteOldRow: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _3: SLARRAYINDEX_T;
                              const _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_InsertNewColumn: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _4: SLARRAYINDEX_T;
                                 const _5: SLARRAYINDEX_T;
                                 const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_DeleteOldColumn: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _3: SLARRAYINDEX_T;
                                 const _4: SLARRAYINDEX_T;
                                 const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_InsertRegion: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                              const _4: SLARRAYINDEX_T;
                              const _5: SLARRAYINDEX_T;
                              const _6: SLARRAYINDEX_T;
                              const _7: SLARRAYINDEX_T;
                              const _8: SL;
                              )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SMX_ExtractRegion: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                               const _3: SLARRAYINDEX_T;
                               const _4: SLARRAYINDEX_T;
                               const _5: SLARRAYINDEX_T;
                               const _6: SLARRAYINDEX_T;
                               const _7: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_InsertDiagonal: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ExtractDiagonal: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                 var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                 const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_SwapRows: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                          const _3: SLARRAYINDEX_T;
                          const _4: SLARRAYINDEX_T;
                          const _5: SLARRAYINDEX_T;
                          const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_SwapColumns: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _3: SLARRAYINDEX_T;
                             const _4: SLARRAYINDEX_T;
                             const _5: SLARRAYINDEX_T;
                             const _6: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_Sum: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                     const _3: SLARRAYINDEX_T;
                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ShuffleColumns: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                )

                                }: // POINTER TO TEMPORARY ARRAY #1;
                                )

                                }: // POINTER TO TEMPORARY ARRAY #2;
                                const _7: SLARRAYINDEX_T;
                                const _8: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ShuffleRows: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                             const _4: SLARRAYINDEX_T;
                             const _5: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SMX_ExtractCategoricalColumn: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLARRAYINDEX_T;
                                          const _3: SLARRAYINDEX_T;
                                          const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};


{$IFNDEF _HP_VEE // The following functionality is not supported by VEE}

const
  SMX_Copy(IPtr, = OPtr, nRows, nCols) SDA_Copy (IPtr, OPtr, (SLArrayIndex_t)(nRows* nCols));

const
  SMX_Add(IPtr1, = IPtr2, OPtr, nRows, nCols) SDA_Operate (IPtr1, \;
var
  +,: function(_1: SLARRAYINDEX_T): IPTR2 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
const
  SMX_Subtract(IPtr1, = IPtr2, OPtr, nRows, nCols) SDA_Operate (IPtr1, \;
var
  -,: function(_1: SLARRAYINDEX_T): IPTR2 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
const
  SMX_MultiplyPiecewise(IPtr1, = IPtr2, OPtr, nRows, nCols) SDA_Operate (IPtr1, \;
var
  ,: function(_1: SLARRAYINDEX_T): PIPTR2 OPTR, cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
const
  SMX_ScalarMultiply(IPtr, = Multiplier, OPtr, nRows, nCols) SDA_Multiply (IPtr, Multiplier, \;
var
  OPtr: function(nCols)): PSLARRAYINDEX_T)(NROWS; {$ENDIF // End of #ifndef _HP_VEE }
                 )
: Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
{/// Machine Learning functions - machinelearning.c }

var
  SDA_TwoLayer2CategoryNetworkFit: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var _6: SLDATA_T;
                                             )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_TwoLayer2CategoryNetworkPredict: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                var SIGLIB_OUTPUT_PTR_DEC: SLDATA_T;
                                                )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_TwoLayerNCategoryNetworkFit: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                             const SIGLIB_INPUT_PTR_DECL: PSLARRAYINDEX_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                             var _6: SLDATA_T;
                                             )
 cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDA_TwoLayerNCategoryNetworkPredict: function(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                                var SIGLIB_OUTPUT_PTR_DEC: SLDATA_T;
                                                )
: SLARRAYINDEX_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
var
  SDS_ActivationReLU: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationReLU: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationReLUDerivative: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationReLUDerivative: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationLeakyReLU: function(const _1: SLDATA_T;
                                    const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationLeakyReLU: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                     const _2: SLDATA_T;
                                     var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                     const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationLeakyReLUDerivative: function(const _1: SLDATA_T;
                                              const _2: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationLeakyReLUDerivative: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                               const _2: SLDATA_T;
                                               var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                               const _4: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationLogistic: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationLogistic: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                    var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                    const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationLogisticDerivative: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationLogisticDerivative: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                              var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                              const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationTanH: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationTanH: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDS_ActivationTanHDerivative: function(const _1: SLDATA_T): SLDATA_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  SDA_ActivationTanHDerivative: procedure(const SIGLIB_INPUT_PTR_DECL: PSLDATA_T;
                                          var SIGLIB_OUTPUT_PTR_DECL: SLDATA_T;
                                          const _3: SLARRAYINDEX_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};



{$IFDEF __cplusplus // End of decl. for C++ program calls}
{$ENDIF}
{/// End of SigLib DSP function section }

{$ENDIF // End of #ifndef SIGLIB}



var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('SIGLIB.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @SUF_SiglibVersion := GetProcAddress(DLLHandle,'SUF_SiglibVersion');
  {$IFDEF WIN32}
    Assert(@SUF_SiglibVersion <> nil);
  {$ENDIF}
    @SUF_PrintArray := GetProcAddress(DLLHandle,'SUF_PrintArray');
  {$IFDEF WIN32}
    Assert(@SUF_PrintArray <> nil);
  {$ENDIF}
    @SUF_PrintFixedPointArray := GetProcAddress(DLLHandle,'SUF_PrintFixedPointArray');
  {$IFDEF WIN32}
    Assert(@SUF_PrintFixedPointArray <> nil);
  {$ENDIF}
    @SUF_PrintComplexArray := GetProcAddress(DLLHandle,'SUF_PrintComplexArray');
  {$IFDEF WIN32}
    Assert(@SUF_PrintComplexArray <> nil);
  {$ENDIF}
    @SUF_PrintMatrix := GetProcAddress(DLLHandle,'SUF_PrintMatrix');
  {$IFDEF WIN32}
    Assert(@SUF_PrintMatrix <> nil);
  {$ENDIF}
    @SUF_PrintPolar := GetProcAddress(DLLHandle,'SUF_PrintPolar');
  {$IFDEF WIN32}
    Assert(@SUF_PrintPolar <> nil);
  {$ENDIF}
    @SUF_PrintRectangular := GetProcAddress(DLLHandle,'SUF_PrintRectangular');
  {$IFDEF WIN32}
    Assert(@SUF_PrintRectangular <> nil);
  {$ENDIF}
    @SUF_PrintIIRCoefficients := GetProcAddress(DLLHandle,'SUF_PrintIIRCoefficients');
  {$IFDEF WIN32}
    Assert(@SUF_PrintIIRCoefficients <> nil);
  {$ENDIF}
    @SUF_PrintCount := GetProcAddress(DLLHandle,'SUF_PrintCount');
  {$IFDEF WIN32}
    Assert(@SUF_PrintCount <> nil);
  {$ENDIF}
    @SUF_PrintHigher := GetProcAddress(DLLHandle,'SUF_PrintHigher');
  {$IFDEF WIN32}
    Assert(@SUF_PrintHigher <> nil);
  {$ENDIF}
    @SUF_PrintLower := GetProcAddress(DLLHandle,'SUF_PrintLower');
  {$IFDEF WIN32}
    Assert(@SUF_PrintLower <> nil);
  {$ENDIF}
    @SUF_ClearDebugfprintf := GetProcAddress(DLLHandle,'SUF_ClearDebugfprintf');
  {$IFDEF WIN32}
    Assert(@SUF_ClearDebugfprintf <> nil);
  {$ENDIF}
    @SUF_Debugfprintf := GetProcAddress(DLLHandle,'SUF_Debugfprintf');
  {$IFDEF WIN32}
    Assert(@SUF_Debugfprintf <> nil);
  {$ENDIF}
    @SUF_Debugvfprintf := GetProcAddress(DLLHandle,'SUF_Debugvfprintf');
  {$IFDEF WIN32}
    Assert(@SUF_Debugvfprintf <> nil);
  {$ENDIF}
    @SUF_DebugPrintArray := GetProcAddress(DLLHandle,'SUF_DebugPrintArray');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintArray <> nil);
  {$ENDIF}
    @SUF_DebugPrintFixedPointArray := GetProcAddress(DLLHandle,'SUF_DebugPrintFixedPointArray');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintFixedPointArray <> nil);
  {$ENDIF}
    @SUF_DebugPrintComplexArray := GetProcAddress(DLLHandle,'SUF_DebugPrintComplexArray');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintComplexArray <> nil);
  {$ENDIF}
    @SUF_DebugPrintMatrix := GetProcAddress(DLLHandle,'SUF_DebugPrintMatrix');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintMatrix <> nil);
  {$ENDIF}
    @SUF_DebugPrintPolar := GetProcAddress(DLLHandle,'SUF_DebugPrintPolar');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintPolar <> nil);
  {$ENDIF}
    @SUF_DebugPrintRectangular := GetProcAddress(DLLHandle,'SUF_DebugPrintRectangular');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintRectangular <> nil);
  {$ENDIF}
    @SUF_DebugPrintIIRCoefficients := GetProcAddress(DLLHandle,'SUF_DebugPrintIIRCoefficients');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintIIRCoefficients <> nil);
  {$ENDIF}
    @SUF_DebugPrintCount := GetProcAddress(DLLHandle,'SUF_DebugPrintCount');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintCount <> nil);
  {$ENDIF}
    @SUF_DebugPrintHigher := GetProcAddress(DLLHandle,'SUF_DebugPrintHigher');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintHigher <> nil);
  {$ENDIF}
    @SUF_DebugPrintLower := GetProcAddress(DLLHandle,'SUF_DebugPrintLower');
  {$IFDEF WIN32}
    Assert(@SUF_DebugPrintLower <> nil);
  {$ENDIF}
    @SUF_StrError := GetProcAddress(DLLHandle,'SUF_StrError');
  {$IFDEF WIN32}
    Assert(@SUF_StrError <> nil);
  {$ENDIF}
    @SUF_BinReadData := GetProcAddress(DLLHandle,'SUF_BinReadData');
  {$IFDEF WIN32}
    Assert(@SUF_BinReadData <> nil);
  {$ENDIF}
    @SUF_BinWriteData := GetProcAddress(DLLHandle,'SUF_BinWriteData');
  {$IFDEF WIN32}
    Assert(@SUF_BinWriteData <> nil);
  {$ENDIF}
    @SUF_CsvReadData := GetProcAddress(DLLHandle,'SUF_CsvReadData');
  {$IFDEF WIN32}
    Assert(@SUF_CsvReadData <> nil);
  {$ENDIF}
    @SUF_CsvWriteData := GetProcAddress(DLLHandle,'SUF_CsvWriteData');
  {$IFDEF WIN32}
    Assert(@SUF_CsvWriteData <> nil);
  {$ENDIF}
    @SUF_MSDelay := GetProcAddress(DLLHandle,'SUF_MSDelay');
  {$IFDEF WIN32}
    Assert(@SUF_MSDelay <> nil);
  {$ENDIF}
    @SIF_Fft := GetProcAddress(DLLHandle,'SIF_Fft');
  {$IFDEF WIN32}
    Assert(@SIF_Fft <> nil);
  {$ENDIF}
    @SDA_Rfft := GetProcAddress(DLLHandle,'SDA_Rfft');
  {$IFDEF WIN32}
    Assert(@SDA_Rfft <> nil);
  {$ENDIF}
    @SDA_Cfft := GetProcAddress(DLLHandle,'SDA_Cfft');
  {$IFDEF WIN32}
    Assert(@SDA_Cfft <> nil);
  {$ENDIF}
    @SDA_Cifft := GetProcAddress(DLLHandle,'SDA_Cifft');
  {$IFDEF WIN32}
    Assert(@SDA_Cifft <> nil);
  {$ENDIF}
    @SDA_BitReverseReorder := GetProcAddress(DLLHandle,'SDA_BitReverseReorder');
  {$IFDEF WIN32}
    Assert(@SDA_BitReverseReorder <> nil);
  {$ENDIF}
    @SDA_IndexBitReverseReorder := GetProcAddress(DLLHandle,'SDA_IndexBitReverseReorder');
  {$IFDEF WIN32}
    Assert(@SDA_IndexBitReverseReorder <> nil);
  {$ENDIF}
    @SIF_FastBitReverseReorder := GetProcAddress(DLLHandle,'SIF_FastBitReverseReorder');
  {$IFDEF WIN32}
    Assert(@SIF_FastBitReverseReorder <> nil);
  {$ENDIF}
    @SDA_RealRealCepstrum := GetProcAddress(DLLHandle,'SDA_RealRealCepstrum');
  {$IFDEF WIN32}
    Assert(@SDA_RealRealCepstrum <> nil);
  {$ENDIF}
    @SDA_RealComplexCepstrum := GetProcAddress(DLLHandle,'SDA_RealComplexCepstrum');
  {$IFDEF WIN32}
    Assert(@SDA_RealComplexCepstrum <> nil);
  {$ENDIF}
    @SDA_ComplexComplexCepstrum := GetProcAddress(DLLHandle,'SDA_ComplexComplexCepstrum');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexComplexCepstrum <> nil);
  {$ENDIF}
    @SIF_FftTone := GetProcAddress(DLLHandle,'SIF_FftTone');
  {$IFDEF WIN32}
    Assert(@SIF_FftTone <> nil);
  {$ENDIF}
    @SDA_RfftTone := GetProcAddress(DLLHandle,'SDA_RfftTone');
  {$IFDEF WIN32}
    Assert(@SDA_RfftTone <> nil);
  {$ENDIF}
    @SIF_ZoomFft := GetProcAddress(DLLHandle,'SIF_ZoomFft');
  {$IFDEF WIN32}
    Assert(@SIF_ZoomFft <> nil);
  {$ENDIF}
    @SDA_ZoomFft := GetProcAddress(DLLHandle,'SDA_ZoomFft');
  {$IFDEF WIN32}
    Assert(@SDA_ZoomFft <> nil);
  {$ENDIF}
    @SIF_ZoomFftSimple := GetProcAddress(DLLHandle,'SIF_ZoomFftSimple');
  {$IFDEF WIN32}
    Assert(@SIF_ZoomFftSimple <> nil);
  {$ENDIF}
    @SDA_ZoomFftSimple := GetProcAddress(DLLHandle,'SDA_ZoomFftSimple');
  {$IFDEF WIN32}
    Assert(@SDA_ZoomFftSimple <> nil);
  {$ENDIF}
    @SIF_FdHilbert := GetProcAddress(DLLHandle,'SIF_FdHilbert');
  {$IFDEF WIN32}
    Assert(@SIF_FdHilbert <> nil);
  {$ENDIF}
    @SDA_FdHilbert := GetProcAddress(DLLHandle,'SDA_FdHilbert');
  {$IFDEF WIN32}
    Assert(@SDA_FdHilbert <> nil);
  {$ENDIF}
    @SIF_FdAnalytic := GetProcAddress(DLLHandle,'SIF_FdAnalytic');
  {$IFDEF WIN32}
    Assert(@SIF_FdAnalytic <> nil);
  {$ENDIF}
    @SDA_FdAnalytic := GetProcAddress(DLLHandle,'SDA_FdAnalytic');
  {$IFDEF WIN32}
    Assert(@SDA_FdAnalytic <> nil);
  {$ENDIF}
    @SDA_InstantFreq := GetProcAddress(DLLHandle,'SDA_InstantFreq');
  {$IFDEF WIN32}
    Assert(@SDA_InstantFreq <> nil);
  {$ENDIF}
    @SDA_Rft := GetProcAddress(DLLHandle,'SDA_Rft');
  {$IFDEF WIN32}
    Assert(@SDA_Rft <> nil);
  {$ENDIF}
    @SDA_Rift := GetProcAddress(DLLHandle,'SDA_Rift');
  {$IFDEF WIN32}
    Assert(@SDA_Rift <> nil);
  {$ENDIF}
    @SDA_Cft := GetProcAddress(DLLHandle,'SDA_Cft');
  {$IFDEF WIN32}
    Assert(@SDA_Cft <> nil);
  {$ENDIF}
    @SDA_Cift := GetProcAddress(DLLHandle,'SDA_Cift');
  {$IFDEF WIN32}
    Assert(@SDA_Cift <> nil);
  {$ENDIF}
    @SDA_FftShift := GetProcAddress(DLLHandle,'SDA_FftShift');
  {$IFDEF WIN32}
    Assert(@SDA_FftShift <> nil);
  {$ENDIF}
    @SDA_CfftShift := GetProcAddress(DLLHandle,'SDA_CfftShift');
  {$IFDEF WIN32}
    Assert(@SDA_CfftShift <> nil);
  {$ENDIF}
    @SDA_FftExtend := GetProcAddress(DLLHandle,'SDA_FftExtend');
  {$IFDEF WIN32}
    Assert(@SDA_FftExtend <> nil);
  {$ENDIF}
    @SDA_CfftExtend := GetProcAddress(DLLHandle,'SDA_CfftExtend');
  {$IFDEF WIN32}
    Assert(@SDA_CfftExtend <> nil);
  {$ENDIF}
    @SIF_FftArb := GetProcAddress(DLLHandle,'SIF_FftArb');
  {$IFDEF WIN32}
    Assert(@SIF_FftArb <> nil);
  {$ENDIF}
    @SUF_FftArbAllocLength := GetProcAddress(DLLHandle,'SUF_FftArbAllocLength');
  {$IFDEF WIN32}
    Assert(@SUF_FftArbAllocLength <> nil);
  {$ENDIF}
    @SDA_RfftArb := GetProcAddress(DLLHandle,'SDA_RfftArb');
  {$IFDEF WIN32}
    Assert(@SDA_RfftArb <> nil);
  {$ENDIF}
    @SDA_CfftArb := GetProcAddress(DLLHandle,'SDA_CfftArb');
  {$IFDEF WIN32}
    Assert(@SDA_CfftArb <> nil);
  {$ENDIF}
    @SDA_CifftArb := GetProcAddress(DLLHandle,'SDA_CifftArb');
  {$IFDEF WIN32}
    Assert(@SDA_CifftArb <> nil);
  {$ENDIF}
    @SIF_FastAutoCrossPowerSpectrum := GetProcAddress(DLLHandle,'SIF_FastAutoCrossPowerSpectrum');
  {$IFDEF WIN32}
    Assert(@SIF_FastAutoCrossPowerSpectrum <> nil);
  {$ENDIF}
    @SDA_FastAutoPowerSpectrum := GetProcAddress(DLLHandle,'SDA_FastAutoPowerSpectrum');
  {$IFDEF WIN32}
    Assert(@SDA_FastAutoPowerSpectrum <> nil);
  {$ENDIF}
    @SDA_FastCrossPowerSpectrum := GetProcAddress(DLLHandle,'SDA_FastCrossPowerSpectrum');
  {$IFDEF WIN32}
    Assert(@SDA_FastCrossPowerSpectrum <> nil);
  {$ENDIF}
    @SIF_ArbAutoCrossPowerSpectrum := GetProcAddress(DLLHandle,'SIF_ArbAutoCrossPowerSpectrum');
  {$IFDEF WIN32}
    Assert(@SIF_ArbAutoCrossPowerSpectrum <> nil);
  {$ENDIF}
    @SDA_ArbAutoPowerSpectrum := GetProcAddress(DLLHandle,'SDA_ArbAutoPowerSpectrum');
  {$IFDEF WIN32}
    Assert(@SDA_ArbAutoPowerSpectrum <> nil);
  {$ENDIF}
    @SDA_ArbCrossPowerSpectrum := GetProcAddress(DLLHandle,'SDA_ArbCrossPowerSpectrum');
  {$IFDEF WIN32}
    Assert(@SDA_ArbCrossPowerSpectrum <> nil);
  {$ENDIF}
    @SIF_FirOverlapAdd := GetProcAddress(DLLHandle,'SIF_FirOverlapAdd');
  {$IFDEF WIN32}
    Assert(@SIF_FirOverlapAdd <> nil);
  {$ENDIF}
    @SDA_FirOverlapAdd := GetProcAddress(DLLHandle,'SDA_FirOverlapAdd');
  {$IFDEF WIN32}
    Assert(@SDA_FirOverlapAdd <> nil);
  {$ENDIF}
    @SIF_FirOverlapSave := GetProcAddress(DLLHandle,'SIF_FirOverlapSave');
  {$IFDEF WIN32}
    Assert(@SIF_FirOverlapSave <> nil);
  {$ENDIF}
    @SDA_FirOverlapSave := GetProcAddress(DLLHandle,'SDA_FirOverlapSave');
  {$IFDEF WIN32}
    Assert(@SDA_FirOverlapSave <> nil);
  {$ENDIF}
    @SIF_FftConvolvePre := GetProcAddress(DLLHandle,'SIF_FftConvolvePre');
  {$IFDEF WIN32}
    Assert(@SIF_FftConvolvePre <> nil);
  {$ENDIF}
    @SDA_FftConvolvePre := GetProcAddress(DLLHandle,'SDA_FftConvolvePre');
  {$IFDEF WIN32}
    Assert(@SDA_FftConvolvePre <> nil);
  {$ENDIF}
    @SDA_FftConvolveArb := GetProcAddress(DLLHandle,'SDA_FftConvolveArb');
  {$IFDEF WIN32}
    Assert(@SDA_FftConvolveArb <> nil);
  {$ENDIF}
    @SIF_FftCorrelatePre := GetProcAddress(DLLHandle,'SIF_FftCorrelatePre');
  {$IFDEF WIN32}
    Assert(@SIF_FftCorrelatePre <> nil);
  {$ENDIF}
    @SDA_FftCorrelatePre := GetProcAddress(DLLHandle,'SDA_FftCorrelatePre');
  {$IFDEF WIN32}
    Assert(@SDA_FftCorrelatePre <> nil);
  {$ENDIF}
    @SDA_FftCorrelateArb := GetProcAddress(DLLHandle,'SDA_FftCorrelateArb');
  {$IFDEF WIN32}
    Assert(@SDA_FftCorrelateArb <> nil);
  {$ENDIF}
    @SIF_Czt := GetProcAddress(DLLHandle,'SIF_Czt');
  {$IFDEF WIN32}
    Assert(@SIF_Czt <> nil);
  {$ENDIF}
    @SIF_Awn := GetProcAddress(DLLHandle,'SIF_Awn');
  {$IFDEF WIN32}
    Assert(@SIF_Awn <> nil);
  {$ENDIF}
    @SIF_Vl := GetProcAddress(DLLHandle,'SIF_Vl');
  {$IFDEF WIN32}
    Assert(@SIF_Vl <> nil);
  {$ENDIF}
    @SIF_Wm := GetProcAddress(DLLHandle,'SIF_Wm');
  {$IFDEF WIN32}
    Assert(@SIF_Wm <> nil);
  {$ENDIF}
    @SIF_Fir := GetProcAddress(DLLHandle,'SIF_Fir');
  {$IFDEF WIN32}
    Assert(@SIF_Fir <> nil);
  {$ENDIF}
    @SDS_Fir := GetProcAddress(DLLHandle,'SDS_Fir');
  {$IFDEF WIN32}
    Assert(@SDS_Fir <> nil);
  {$ENDIF}
    @SDA_Fir := GetProcAddress(DLLHandle,'SDA_Fir');
  {$IFDEF WIN32}
    Assert(@SDA_Fir <> nil);
  {$ENDIF}
    @SDS_FirAddSample := GetProcAddress(DLLHandle,'SDS_FirAddSample');
  {$IFDEF WIN32}
    Assert(@SDS_FirAddSample <> nil);
  {$ENDIF}
    @SDA_FirAddSamples := GetProcAddress(DLLHandle,'SDA_FirAddSamples');
  {$IFDEF WIN32}
    Assert(@SDA_FirAddSamples <> nil);
  {$ENDIF}
    @SIF_Comb := GetProcAddress(DLLHandle,'SIF_Comb');
  {$IFDEF WIN32}
    Assert(@SIF_Comb <> nil);
  {$ENDIF}
    @SDS_Comb := GetProcAddress(DLLHandle,'SDS_Comb');
  {$IFDEF WIN32}
    Assert(@SDS_Comb <> nil);
  {$ENDIF}
    @SDA_Comb := GetProcAddress(DLLHandle,'SDA_Comb');
  {$IFDEF WIN32}
    Assert(@SDA_Comb <> nil);
  {$ENDIF}
    @SIF_FirComplex := GetProcAddress(DLLHandle,'SIF_FirComplex');
  {$IFDEF WIN32}
    Assert(@SIF_FirComplex <> nil);
  {$ENDIF}
    @SDS_FirComplex := GetProcAddress(DLLHandle,'SDS_FirComplex');
  {$IFDEF WIN32}
    Assert(@SDS_FirComplex <> nil);
  {$ENDIF}
    @SDA_FirComplex := GetProcAddress(DLLHandle,'SDA_FirComplex');
  {$IFDEF WIN32}
    Assert(@SDA_FirComplex <> nil);
  {$ENDIF}
    @SIF_FirWithStore := GetProcAddress(DLLHandle,'SIF_FirWithStore');
  {$IFDEF WIN32}
    Assert(@SIF_FirWithStore <> nil);
  {$ENDIF}
    @SDS_FirWithStore := GetProcAddress(DLLHandle,'SDS_FirWithStore');
  {$IFDEF WIN32}
    Assert(@SDS_FirWithStore <> nil);
  {$ENDIF}
    @SDA_FirWithStore := GetProcAddress(DLLHandle,'SDA_FirWithStore');
  {$IFDEF WIN32}
    Assert(@SDA_FirWithStore <> nil);
  {$ENDIF}
    @SIF_FirComplexWithStore := GetProcAddress(DLLHandle,'SIF_FirComplexWithStore');
  {$IFDEF WIN32}
    Assert(@SIF_FirComplexWithStore <> nil);
  {$ENDIF}
    @SDS_FirComplexWithStore := GetProcAddress(DLLHandle,'SDS_FirComplexWithStore');
  {$IFDEF WIN32}
    Assert(@SDS_FirComplexWithStore <> nil);
  {$ENDIF}
    @SDA_FirComplexWithStore := GetProcAddress(DLLHandle,'SDA_FirComplexWithStore');
  {$IFDEF WIN32}
    Assert(@SDA_FirComplexWithStore <> nil);
  {$ENDIF}
    @SDS_FirWithStoreAddSample := GetProcAddress(DLLHandle,'SDS_FirWithStoreAddSample');
  {$IFDEF WIN32}
    Assert(@SDS_FirWithStoreAddSample <> nil);
  {$ENDIF}
    @SDA_FirWithStoreAddSamples := GetProcAddress(DLLHandle,'SDA_FirWithStoreAddSamples');
  {$IFDEF WIN32}
    Assert(@SDA_FirWithStoreAddSamples <> nil);
  {$ENDIF}
    @SIF_FirExtendedArray := GetProcAddress(DLLHandle,'SIF_FirExtendedArray');
  {$IFDEF WIN32}
    Assert(@SIF_FirExtendedArray <> nil);
  {$ENDIF}
    @SDS_FirExtendedArray := GetProcAddress(DLLHandle,'SDS_FirExtendedArray');
  {$IFDEF WIN32}
    Assert(@SDS_FirExtendedArray <> nil);
  {$ENDIF}
    @SDA_FirExtendedArray := GetProcAddress(DLLHandle,'SDA_FirExtendedArray');
  {$IFDEF WIN32}
    Assert(@SDA_FirExtendedArray <> nil);
  {$ENDIF}
    @SIF_FirComplexExtendedArray := GetProcAddress(DLLHandle,'SIF_FirComplexExtendedArray');
  {$IFDEF WIN32}
    Assert(@SIF_FirComplexExtendedArray <> nil);
  {$ENDIF}
    @SDS_FirComplexExtendedArray := GetProcAddress(DLLHandle,'SDS_FirComplexExtendedArray');
  {$IFDEF WIN32}
    Assert(@SDS_FirComplexExtendedArray <> nil);
  {$ENDIF}
    @SDA_FirComplexExtendedArray := GetProcAddress(DLLHandle,'SDA_FirComplexExtendedArray');
  {$IFDEF WIN32}
    Assert(@SDA_FirComplexExtendedArray <> nil);
  {$ENDIF}
    @SDS_FirExtendedArrayAddSample := GetProcAddress(DLLHandle,'SDS_FirExtendedArrayAddSample');
  {$IFDEF WIN32}
    Assert(@SDS_FirExtendedArrayAddSample <> nil);
  {$ENDIF}
    @SDA_FirExtendedArrayAddSamples := GetProcAddress(DLLHandle,'SDA_FirExtendedArrayAddSamples');
  {$IFDEF WIN32}
    Assert(@SDA_FirExtendedArrayAddSamples <> nil);
  {$ENDIF}
    @SIF_Iir := GetProcAddress(DLLHandle,'SIF_Iir');
  {$IFDEF WIN32}
    Assert(@SIF_Iir <> nil);
  {$ENDIF}
    @SDS_Iir := GetProcAddress(DLLHandle,'SDS_Iir');
  {$IFDEF WIN32}
    Assert(@SDS_Iir <> nil);
  {$ENDIF}
    @SDA_Iir := GetProcAddress(DLLHandle,'SDA_Iir');
  {$IFDEF WIN32}
    Assert(@SDA_Iir <> nil);
  {$ENDIF}
    @SDS_IirMac := GetProcAddress(DLLHandle,'SDS_IirMac');
  {$IFDEF WIN32}
    Assert(@SDS_IirMac <> nil);
  {$ENDIF}
    @SDA_IirMac := GetProcAddress(DLLHandle,'SDA_IirMac');
  {$IFDEF WIN32}
    Assert(@SDA_IirMac <> nil);
  {$ENDIF}
    @SIF_IirOrderN := GetProcAddress(DLLHandle,'SIF_IirOrderN');
  {$IFDEF WIN32}
    Assert(@SIF_IirOrderN <> nil);
  {$ENDIF}
    @SDS_IirOrderN := GetProcAddress(DLLHandle,'SDS_IirOrderN');
  {$IFDEF WIN32}
    Assert(@SDS_IirOrderN <> nil);
  {$ENDIF}
    @SDA_IirOrderN := GetProcAddress(DLLHandle,'SDA_IirOrderN');
  {$IFDEF WIN32}
    Assert(@SDA_IirOrderN <> nil);
  {$ENDIF}
    @SIF_IirNc := GetProcAddress(DLLHandle,'SIF_IirNc');
  {$IFDEF WIN32}
    Assert(@SIF_IirNc <> nil);
  {$ENDIF}
    @SDA_IirNc := GetProcAddress(DLLHandle,'SDA_IirNc');
  {$IFDEF WIN32}
    Assert(@SDA_IirNc <> nil);
  {$ENDIF}
    @SDA_BilinearTransform := GetProcAddress(DLLHandle,'SDA_BilinearTransform');
  {$IFDEF WIN32}
    Assert(@SDA_BilinearTransform <> nil);
  {$ENDIF}
    @SDS_PreWarp := GetProcAddress(DLLHandle,'SDS_PreWarp');
  {$IFDEF WIN32}
    Assert(@SDS_PreWarp <> nil);
  {$ENDIF}
    @SDA_MatchedZTransform := GetProcAddress(DLLHandle,'SDA_MatchedZTransform');
  {$IFDEF WIN32}
    Assert(@SDA_MatchedZTransform <> nil);
  {$ENDIF}
    @SDA_IirZplaneToCoeffs := GetProcAddress(DLLHandle,'SDA_IirZplaneToCoeffs');
  {$IFDEF WIN32}
    Assert(@SDA_IirZplaneToCoeffs <> nil);
  {$ENDIF}
    @SDA_IirZplanePolarToCoeffs := GetProcAddress(DLLHandle,'SDA_IirZplanePolarToCoeffs');
  {$IFDEF WIN32}
    Assert(@SDA_IirZplanePolarToCoeffs <> nil);
  {$ENDIF}
    @SDA_IirZplaneLpfToLpf := GetProcAddress(DLLHandle,'SDA_IirZplaneLpfToLpf');
  {$IFDEF WIN32}
    Assert(@SDA_IirZplaneLpfToLpf <> nil);
  {$ENDIF}
    @SDA_IirZplaneLpfToHpf := GetProcAddress(DLLHandle,'SDA_IirZplaneLpfToHpf');
  {$IFDEF WIN32}
    Assert(@SDA_IirZplaneLpfToHpf <> nil);
  {$ENDIF}
    @SDA_IirZplaneLpfToBpf := GetProcAddress(DLLHandle,'SDA_IirZplaneLpfToBpf');
  {$IFDEF WIN32}
    Assert(@SDA_IirZplaneLpfToBpf <> nil);
  {$ENDIF}
    @SDA_IirZplaneLpfToBsf := GetProcAddress(DLLHandle,'SDA_IirZplaneLpfToBsf');
  {$IFDEF WIN32}
    Assert(@SDA_IirZplaneLpfToBsf <> nil);
  {$ENDIF}
    @SDA_IirModifyFilterGain := GetProcAddress(DLLHandle,'SDA_IirModifyFilterGain');
  {$IFDEF WIN32}
    Assert(@SDA_IirModifyFilterGain <> nil);
  {$ENDIF}
    @SIF_IirLowPassFilter := GetProcAddress(DLLHandle,'SIF_IirLowPassFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirLowPassFilter <> nil);
  {$ENDIF}
    @SIF_IirHighPassFilter := GetProcAddress(DLLHandle,'SIF_IirHighPassFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirHighPassFilter <> nil);
  {$ENDIF}
    @SIF_IirAllPassFilter := GetProcAddress(DLLHandle,'SIF_IirAllPassFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirAllPassFilter <> nil);
  {$ENDIF}
    @SIF_IirBandPassFilter := GetProcAddress(DLLHandle,'SIF_IirBandPassFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirBandPassFilter <> nil);
  {$ENDIF}
    @SIF_IirNotchFilter := GetProcAddress(DLLHandle,'SIF_IirNotchFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirNotchFilter <> nil);
  {$ENDIF}
    @SIF_IirPeakingFilter := GetProcAddress(DLLHandle,'SIF_IirPeakingFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirPeakingFilter <> nil);
  {$ENDIF}
    @SIF_IirLowShelfFilter := GetProcAddress(DLLHandle,'SIF_IirLowShelfFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirLowShelfFilter <> nil);
  {$ENDIF}
    @SIF_IirHighShelfFilter := GetProcAddress(DLLHandle,'SIF_IirHighShelfFilter');
  {$IFDEF WIN32}
    Assert(@SIF_IirHighShelfFilter <> nil);
  {$ENDIF}
    @SDS_IirRemoveDC := GetProcAddress(DLLHandle,'SDS_IirRemoveDC');
  {$IFDEF WIN32}
    Assert(@SDS_IirRemoveDC <> nil);
  {$ENDIF}
    @SDA_IirRemoveDC := GetProcAddress(DLLHandle,'SDA_IirRemoveDC');
  {$IFDEF WIN32}
    Assert(@SDA_IirRemoveDC <> nil);
  {$ENDIF}
    @SIF_OnePole := GetProcAddress(DLLHandle,'SIF_OnePole');
  {$IFDEF WIN32}
    Assert(@SIF_OnePole <> nil);
  {$ENDIF}
    @SDS_OnePole := GetProcAddress(DLLHandle,'SDS_OnePole');
  {$IFDEF WIN32}
    Assert(@SDS_OnePole <> nil);
  {$ENDIF}
    @SDA_OnePole := GetProcAddress(DLLHandle,'SDA_OnePole');
  {$IFDEF WIN32}
    Assert(@SDA_OnePole <> nil);
  {$ENDIF}
    @SDS_OnePoleNormalized := GetProcAddress(DLLHandle,'SDS_OnePoleNormalized');
  {$IFDEF WIN32}
    Assert(@SDS_OnePoleNormalized <> nil);
  {$ENDIF}
    @SDA_OnePoleNormalized := GetProcAddress(DLLHandle,'SDA_OnePoleNormalized');
  {$IFDEF WIN32}
    Assert(@SDA_OnePoleNormalized <> nil);
  {$ENDIF}
    @SDA_OnePolePerSample := GetProcAddress(DLLHandle,'SDA_OnePolePerSample');
  {$IFDEF WIN32}
    Assert(@SDA_OnePolePerSample <> nil);
  {$ENDIF}
    @SIF_OnePoleHighPass := GetProcAddress(DLLHandle,'SIF_OnePoleHighPass');
  {$IFDEF WIN32}
    Assert(@SIF_OnePoleHighPass <> nil);
  {$ENDIF}
    @SDS_OnePoleHighPass := GetProcAddress(DLLHandle,'SDS_OnePoleHighPass');
  {$IFDEF WIN32}
    Assert(@SDS_OnePoleHighPass <> nil);
  {$ENDIF}
    @SDA_OnePoleHighPass := GetProcAddress(DLLHandle,'SDA_OnePoleHighPass');
  {$IFDEF WIN32}
    Assert(@SDA_OnePoleHighPass <> nil);
  {$ENDIF}
    @SDS_OnePoleHighPassNormalized := GetProcAddress(DLLHandle,'SDS_OnePoleHighPassNormalized');
  {$IFDEF WIN32}
    Assert(@SDS_OnePoleHighPassNormalized <> nil);
  {$ENDIF}
    @SDA_OnePoleHighPassNormalized := GetProcAddress(DLLHandle,'SDA_OnePoleHighPassNormalized');
  {$IFDEF WIN32}
    Assert(@SDA_OnePoleHighPassNormalized <> nil);
  {$ENDIF}
    @SDS_OnePoleTimeConstantToFilterCoeff := GetProcAddress(DLLHandle,'SDS_OnePoleTimeConstantToFilterCoeff');
  {$IFDEF WIN32}
    Assert(@SDS_OnePoleTimeConstantToFilterCoeff <> nil);
  {$ENDIF}
    @SDS_OnePoleCutOffFrequencyToFilterCoeff := GetProcAddress(DLLHandle,'SDS_OnePoleCutOffFrequencyToFilterCoeff');
  {$IFDEF WIN32}
    Assert(@SDS_OnePoleCutOffFrequencyToFilterCoeff <> nil);
  {$ENDIF}
    @SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff := GetProcAddress(DLLHandle,'SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff');
  {$IFDEF WIN32}
    Assert(@SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff <> nil);
  {$ENDIF}
    @SIF_AllPole := GetProcAddress(DLLHandle,'SIF_AllPole');
  {$IFDEF WIN32}
    Assert(@SIF_AllPole <> nil);
  {$ENDIF}
    @SDS_AllPole := GetProcAddress(DLLHandle,'SDS_AllPole');
  {$IFDEF WIN32}
    Assert(@SDS_AllPole <> nil);
  {$ENDIF}
    @SDA_AllPole := GetProcAddress(DLLHandle,'SDA_AllPole');
  {$IFDEF WIN32}
    Assert(@SDA_AllPole <> nil);
  {$ENDIF}
    @SDA_ZDomainCoefficientReorg := GetProcAddress(DLLHandle,'SDA_ZDomainCoefficientReorg');
  {$IFDEF WIN32}
    Assert(@SDA_ZDomainCoefficientReorg <> nil);
  {$ENDIF}
    @SIF_IirNotchFilter2 := GetProcAddress(DLLHandle,'SIF_IirNotchFilter2');
  {$IFDEF WIN32}
    Assert(@SIF_IirNotchFilter2 <> nil);
  {$ENDIF}
    @SDA_IirLpHpShift := GetProcAddress(DLLHandle,'SDA_IirLpHpShift');
  {$IFDEF WIN32}
    Assert(@SDA_IirLpHpShift <> nil);
  {$ENDIF}
    @SIF_Iir2PoleLpf := GetProcAddress(DLLHandle,'SIF_Iir2PoleLpf');
  {$IFDEF WIN32}
    Assert(@SIF_Iir2PoleLpf <> nil);
  {$ENDIF}
    @SDS_Iir2Pole := GetProcAddress(DLLHandle,'SDS_Iir2Pole');
  {$IFDEF WIN32}
    Assert(@SDS_Iir2Pole <> nil);
  {$ENDIF}
    @SDA_Iir2Pole := GetProcAddress(DLLHandle,'SDA_Iir2Pole');
  {$IFDEF WIN32}
    Assert(@SDA_Iir2Pole <> nil);
  {$ENDIF}
    @SDA_IirNegateAlphaCoeffs := GetProcAddress(DLLHandle,'SDA_IirNegateAlphaCoeffs');
  {$IFDEF WIN32}
    Assert(@SDA_IirNegateAlphaCoeffs <> nil);
  {$ENDIF}
    @SDA_Integrate := GetProcAddress(DLLHandle,'SDA_Integrate');
  {$IFDEF WIN32}
    Assert(@SDA_Integrate <> nil);
  {$ENDIF}
    @SDA_Differentiate := GetProcAddress(DLLHandle,'SDA_Differentiate');
  {$IFDEF WIN32}
    Assert(@SDA_Differentiate <> nil);
  {$ENDIF}
    @SIF_LeakyIntegrator := GetProcAddress(DLLHandle,'SIF_LeakyIntegrator');
  {$IFDEF WIN32}
    Assert(@SIF_LeakyIntegrator <> nil);
  {$ENDIF}
    @SDS_LeakyIntegrator1 := GetProcAddress(DLLHandle,'SDS_LeakyIntegrator1');
  {$IFDEF WIN32}
    Assert(@SDS_LeakyIntegrator1 <> nil);
  {$ENDIF}
    @SDS_LeakyIntegrator2 := GetProcAddress(DLLHandle,'SDS_LeakyIntegrator2');
  {$IFDEF WIN32}
    Assert(@SDS_LeakyIntegrator2 <> nil);
  {$ENDIF}
    @SIF_HilbertTransformer := GetProcAddress(DLLHandle,'SIF_HilbertTransformer');
  {$IFDEF WIN32}
    Assert(@SIF_HilbertTransformer <> nil);
  {$ENDIF}
    @SIF_GoertzelFilter := GetProcAddress(DLLHandle,'SIF_GoertzelFilter');
  {$IFDEF WIN32}
    Assert(@SIF_GoertzelFilter <> nil);
  {$ENDIF}
    @SDA_GoertzelFilter := GetProcAddress(DLLHandle,'SDA_GoertzelFilter');
  {$IFDEF WIN32}
    Assert(@SDA_GoertzelFilter <> nil);
  {$ENDIF}
    @SDS_GoertzelFilter := GetProcAddress(DLLHandle,'SDS_GoertzelFilter');
  {$IFDEF WIN32}
    Assert(@SDS_GoertzelFilter <> nil);
  {$ENDIF}
    @SIF_GoertzelDetect := GetProcAddress(DLLHandle,'SIF_GoertzelDetect');
  {$IFDEF WIN32}
    Assert(@SIF_GoertzelDetect <> nil);
  {$ENDIF}
    @SDA_GoertzelDetect := GetProcAddress(DLLHandle,'SDA_GoertzelDetect');
  {$IFDEF WIN32}
    Assert(@SDA_GoertzelDetect <> nil);
  {$ENDIF}
    @SIF_GoertzelDetectComplex := GetProcAddress(DLLHandle,'SIF_GoertzelDetectComplex');
  {$IFDEF WIN32}
    Assert(@SIF_GoertzelDetectComplex <> nil);
  {$ENDIF}
    @SDA_GoertzelDetectComplex := GetProcAddress(DLLHandle,'SDA_GoertzelDetectComplex');
  {$IFDEF WIN32}
    Assert(@SDA_GoertzelDetectComplex <> nil);
  {$ENDIF}
    @SIF_GaussianFilter := GetProcAddress(DLLHandle,'SIF_GaussianFilter');
  {$IFDEF WIN32}
    Assert(@SIF_GaussianFilter <> nil);
  {$ENDIF}
    @SIF_GaussianFilter2 := GetProcAddress(DLLHandle,'SIF_GaussianFilter2');
  {$IFDEF WIN32}
    Assert(@SIF_GaussianFilter2 <> nil);
  {$ENDIF}
    @SIF_RaisedCosineFilter := GetProcAddress(DLLHandle,'SIF_RaisedCosineFilter');
  {$IFDEF WIN32}
    Assert(@SIF_RaisedCosineFilter <> nil);
  {$ENDIF}
    @SIF_RootRaisedCosineFilter := GetProcAddress(DLLHandle,'SIF_RootRaisedCosineFilter');
  {$IFDEF WIN32}
    Assert(@SIF_RootRaisedCosineFilter <> nil);
  {$ENDIF}
    @SDS_ZTransform := GetProcAddress(DLLHandle,'SDS_ZTransform');
  {$IFDEF WIN32}
    Assert(@SDS_ZTransform <> nil);
  {$ENDIF}
    @SDS_ZTransformDB := GetProcAddress(DLLHandle,'SDS_ZTransformDB');
  {$IFDEF WIN32}
    Assert(@SDS_ZTransformDB <> nil);
  {$ENDIF}
    @SUF_EstimateBPFilterLength := GetProcAddress(DLLHandle,'SUF_EstimateBPFilterLength');
  {$IFDEF WIN32}
    Assert(@SUF_EstimateBPFilterLength <> nil);
  {$ENDIF}
    @SUF_EstimateBPFilterError := GetProcAddress(DLLHandle,'SUF_EstimateBPFilterError');
  {$IFDEF WIN32}
    Assert(@SUF_EstimateBPFilterError <> nil);
  {$ENDIF}
    @SUF_FrequenciesToOctaves := GetProcAddress(DLLHandle,'SUF_FrequenciesToOctaves');
  {$IFDEF WIN32}
    Assert(@SUF_FrequenciesToOctaves <> nil);
  {$ENDIF}
    @SUF_FrequenciesToCentreFreqHz := GetProcAddress(DLLHandle,'SUF_FrequenciesToCentreFreqHz');
  {$IFDEF WIN32}
    Assert(@SUF_FrequenciesToCentreFreqHz <> nil);
  {$ENDIF}
    @SUF_FrequenciesToQFactor := GetProcAddress(DLLHandle,'SUF_FrequenciesToQFactor');
  {$IFDEF WIN32}
    Assert(@SUF_FrequenciesToQFactor <> nil);
  {$ENDIF}
    @SUF_BandwidthToQFactor := GetProcAddress(DLLHandle,'SUF_BandwidthToQFactor');
  {$IFDEF WIN32}
    Assert(@SUF_BandwidthToQFactor <> nil);
  {$ENDIF}
    @SUF_QFactorToBandwidth := GetProcAddress(DLLHandle,'SUF_QFactorToBandwidth');
  {$IFDEF WIN32}
    Assert(@SUF_QFactorToBandwidth <> nil);
  {$ENDIF}
    @SDA_LinearMicrophoneArrayBeamPattern := GetProcAddress(DLLHandle,'SDA_LinearMicrophoneArrayBeamPattern');
  {$IFDEF WIN32}
    Assert(@SDA_LinearMicrophoneArrayBeamPattern <> nil);
  {$ENDIF}
    @SDA_LinearMicrophoneArrayBeamPatternLinear := GetProcAddress(DLLHandle,'SDA_LinearMicrophoneArrayBeamPatternLinear');
  {$IFDEF WIN32}
    Assert(@SDA_LinearMicrophoneArrayBeamPatternLinear <> nil);
  {$ENDIF}
    @SDA_MicrophoneArrayCalculateDelays := GetProcAddress(DLLHandle,'SDA_MicrophoneArrayCalculateDelays');
  {$IFDEF WIN32}
    Assert(@SDA_MicrophoneArrayCalculateDelays <> nil);
  {$ENDIF}
    @SDA_MicrophoneArrayBeamPattern := GetProcAddress(DLLHandle,'SDA_MicrophoneArrayBeamPattern');
  {$IFDEF WIN32}
    Assert(@SDA_MicrophoneArrayBeamPattern <> nil);
  {$ENDIF}
    @SDA_MicrophoneArrayBeamPatternLinear := GetProcAddress(DLLHandle,'SDA_MicrophoneArrayBeamPatternLinear');
  {$IFDEF WIN32}
    Assert(@SDA_MicrophoneArrayBeamPatternLinear <> nil);
  {$ENDIF}
    @SDS_TemperatureToSpeedOfSoundInAir := GetProcAddress(DLLHandle,'SDS_TemperatureToSpeedOfSoundInAir');
  {$IFDEF WIN32}
    Assert(@SDS_TemperatureToSpeedOfSoundInAir <> nil);
  {$ENDIF}
    @SIF_Lms := GetProcAddress(DLLHandle,'SIF_Lms');
  {$IFDEF WIN32}
    Assert(@SIF_Lms <> nil);
  {$ENDIF}
    @SDS_Lms := GetProcAddress(DLLHandle,'SDS_Lms');
  {$IFDEF WIN32}
    Assert(@SDS_Lms <> nil);
  {$ENDIF}
    @SDA_LmsUpdate := GetProcAddress(DLLHandle,'SDA_LmsUpdate');
  {$IFDEF WIN32}
    Assert(@SDA_LmsUpdate <> nil);
  {$ENDIF}
    @SDA_LeakyLmsUpdate := GetProcAddress(DLLHandle,'SDA_LeakyLmsUpdate');
  {$IFDEF WIN32}
    Assert(@SDA_LeakyLmsUpdate <> nil);
  {$ENDIF}
    @SDA_NormalizedLmsUpdate := GetProcAddress(DLLHandle,'SDA_NormalizedLmsUpdate');
  {$IFDEF WIN32}
    Assert(@SDA_NormalizedLmsUpdate <> nil);
  {$ENDIF}
    @SDA_SignErrorLmsUpdate := GetProcAddress(DLLHandle,'SDA_SignErrorLmsUpdate');
  {$IFDEF WIN32}
    Assert(@SDA_SignErrorLmsUpdate <> nil);
  {$ENDIF}
    @SDA_SignDataLmsUpdate := GetProcAddress(DLLHandle,'SDA_SignDataLmsUpdate');
  {$IFDEF WIN32}
    Assert(@SDA_SignDataLmsUpdate <> nil);
  {$ENDIF}
    @SDA_SignSignLmsUpdate := GetProcAddress(DLLHandle,'SDA_SignSignLmsUpdate');
  {$IFDEF WIN32}
    Assert(@SDA_SignSignLmsUpdate <> nil);
  {$ENDIF}
    @SDA_ConvolveLinear := GetProcAddress(DLLHandle,'SDA_ConvolveLinear');
  {$IFDEF WIN32}
    Assert(@SDA_ConvolveLinear <> nil);
  {$ENDIF}
    @SDA_ConvolvePartial := GetProcAddress(DLLHandle,'SDA_ConvolvePartial');
  {$IFDEF WIN32}
    Assert(@SDA_ConvolvePartial <> nil);
  {$ENDIF}
    @SDA_ConvolveCircular := GetProcAddress(DLLHandle,'SDA_ConvolveCircular');
  {$IFDEF WIN32}
    Assert(@SDA_ConvolveCircular <> nil);
  {$ENDIF}
    @SDA_ConvolveLinearComplex := GetProcAddress(DLLHandle,'SDA_ConvolveLinearComplex');
  {$IFDEF WIN32}
    Assert(@SDA_ConvolveLinearComplex <> nil);
  {$ENDIF}
    @SDA_ConvolvePartialComplex := GetProcAddress(DLLHandle,'SDA_ConvolvePartialComplex');
  {$IFDEF WIN32}
    Assert(@SDA_ConvolvePartialComplex <> nil);
  {$ENDIF}
    @SDA_ConvolveCircularComplex := GetProcAddress(DLLHandle,'SDA_ConvolveCircularComplex');
  {$IFDEF WIN32}
    Assert(@SDA_ConvolveCircularComplex <> nil);
  {$ENDIF}
    @SDA_FftDeconvolution := GetProcAddress(DLLHandle,'SDA_FftDeconvolution');
  {$IFDEF WIN32}
    Assert(@SDA_FftDeconvolution <> nil);
  {$ENDIF}
    @SIF_FftDeconvolutionPre := GetProcAddress(DLLHandle,'SIF_FftDeconvolutionPre');
  {$IFDEF WIN32}
    Assert(@SIF_FftDeconvolutionPre <> nil);
  {$ENDIF}
    @SDA_FftDeconvolutionPre := GetProcAddress(DLLHandle,'SDA_FftDeconvolutionPre');
  {$IFDEF WIN32}
    Assert(@SDA_FftDeconvolutionPre <> nil);
  {$ENDIF}
    @SDA_CorrelateCircular := GetProcAddress(DLLHandle,'SDA_CorrelateCircular');
  {$IFDEF WIN32}
    Assert(@SDA_CorrelateCircular <> nil);
  {$ENDIF}
    @SIF_FixedDelay := GetProcAddress(DLLHandle,'SIF_FixedDelay');
  {$IFDEF WIN32}
    Assert(@SIF_FixedDelay <> nil);
  {$ENDIF}
    @SDS_FixedDelay := GetProcAddress(DLLHandle,'SDS_FixedDelay');
  {$IFDEF WIN32}
    Assert(@SDS_FixedDelay <> nil);
  {$ENDIF}
    @SDA_FixedDelay := GetProcAddress(DLLHandle,'SDA_FixedDelay');
  {$IFDEF WIN32}
    Assert(@SDA_FixedDelay <> nil);
  {$ENDIF}
    @SIF_FixedDelayComplex := GetProcAddress(DLLHandle,'SIF_FixedDelayComplex');
  {$IFDEF WIN32}
    Assert(@SIF_FixedDelayComplex <> nil);
  {$ENDIF}
    @SDS_FixedDelayComplex := GetProcAddress(DLLHandle,'SDS_FixedDelayComplex');
  {$IFDEF WIN32}
    Assert(@SDS_FixedDelayComplex <> nil);
  {$ENDIF}
    @SDA_FixedDelayComplex := GetProcAddress(DLLHandle,'SDA_FixedDelayComplex');
  {$IFDEF WIN32}
    Assert(@SDA_FixedDelayComplex <> nil);
  {$ENDIF}
    @SDA_ShortFixedDelay := GetProcAddress(DLLHandle,'SDA_ShortFixedDelay');
  {$IFDEF WIN32}
    Assert(@SDA_ShortFixedDelay <> nil);
  {$ENDIF}
    @SIF_VariableDelay := GetProcAddress(DLLHandle,'SIF_VariableDelay');
  {$IFDEF WIN32}
    Assert(@SIF_VariableDelay <> nil);
  {$ENDIF}
    @SDS_VariableDelay := GetProcAddress(DLLHandle,'SDS_VariableDelay');
  {$IFDEF WIN32}
    Assert(@SDS_VariableDelay <> nil);
  {$ENDIF}
    @SDA_VariableDelay := GetProcAddress(DLLHandle,'SDA_VariableDelay');
  {$IFDEF WIN32}
    Assert(@SDA_VariableDelay <> nil);
  {$ENDIF}
    @SIF_VariableDelayComplex := GetProcAddress(DLLHandle,'SIF_VariableDelayComplex');
  {$IFDEF WIN32}
    Assert(@SIF_VariableDelayComplex <> nil);
  {$ENDIF}
    @SDS_VariableDelayComplex := GetProcAddress(DLLHandle,'SDS_VariableDelayComplex');
  {$IFDEF WIN32}
    Assert(@SDS_VariableDelayComplex <> nil);
  {$ENDIF}
    @SDA_VariableDelayComplex := GetProcAddress(DLLHandle,'SDA_VariableDelayComplex');
  {$IFDEF WIN32}
    Assert(@SDA_VariableDelayComplex <> nil);
  {$ENDIF}
    @SUF_IncreaseVariableDelay := GetProcAddress(DLLHandle,'SUF_IncreaseVariableDelay');
  {$IFDEF WIN32}
    Assert(@SUF_IncreaseVariableDelay <> nil);
  {$ENDIF}
    @SUF_DecreaseVariableDelay := GetProcAddress(DLLHandle,'SUF_DecreaseVariableDelay');
  {$IFDEF WIN32}
    Assert(@SUF_DecreaseVariableDelay <> nil);
  {$ENDIF}
    @SIM_Fft2d := GetProcAddress(DLLHandle,'SIM_Fft2d');
  {$IFDEF WIN32}
    Assert(@SIM_Fft2d <> nil);
  {$ENDIF}
    @SIF_Fft2d := GetProcAddress(DLLHandle,'SIF_Fft2d');
  {$IFDEF WIN32}
    Assert(@SIF_Fft2d <> nil);
  {$ENDIF}
    @SIM_Conv3x3 := GetProcAddress(DLLHandle,'SIM_Conv3x3');
  {$IFDEF WIN32}
    Assert(@SIM_Conv3x3 <> nil);
  {$ENDIF}
    @SIM_Sobel3x3 := GetProcAddress(DLLHandle,'SIM_Sobel3x3');
  {$IFDEF WIN32}
    Assert(@SIM_Sobel3x3 <> nil);
  {$ENDIF}
    @SIM_SobelVertical3x3 := GetProcAddress(DLLHandle,'SIM_SobelVertical3x3');
  {$IFDEF WIN32}
    Assert(@SIM_SobelVertical3x3 <> nil);
  {$ENDIF}
    @SIM_SobelHorizontal3x3 := GetProcAddress(DLLHandle,'SIM_SobelHorizontal3x3');
  {$IFDEF WIN32}
    Assert(@SIM_SobelHorizontal3x3 <> nil);
  {$ENDIF}
    @SIM_Median3x3 := GetProcAddress(DLLHandle,'SIM_Median3x3');
  {$IFDEF WIN32}
    Assert(@SIM_Median3x3 <> nil);
  {$ENDIF}
    @SIF_Dct8x8 := GetProcAddress(DLLHandle,'SIF_Dct8x8');
  {$IFDEF WIN32}
    Assert(@SIF_Dct8x8 <> nil);
  {$ENDIF}
    @SIM_Dct8x8 := GetProcAddress(DLLHandle,'SIM_Dct8x8');
  {$IFDEF WIN32}
    Assert(@SIM_Dct8x8 <> nil);
  {$ENDIF}
    @SIM_Idct8x8 := GetProcAddress(DLLHandle,'SIM_Idct8x8');
  {$IFDEF WIN32}
    Assert(@SIM_Idct8x8 <> nil);
  {$ENDIF}
    @SIM_ZigZagScan := GetProcAddress(DLLHandle,'SIM_ZigZagScan');
  {$IFDEF WIN32}
    Assert(@SIM_ZigZagScan <> nil);
  {$ENDIF}
    @SIM_ZigZagDescan := GetProcAddress(DLLHandle,'SIM_ZigZagDescan');
  {$IFDEF WIN32}
    Assert(@SIM_ZigZagDescan <> nil);
  {$ENDIF}
    @SDA_BitErrorRate := GetProcAddress(DLLHandle,'SDA_BitErrorRate');
  {$IFDEF WIN32}
    Assert(@SDA_BitErrorRate <> nil);
  {$ENDIF}
    @SDA_Interleave := GetProcAddress(DLLHandle,'SDA_Interleave');
  {$IFDEF WIN32}
    Assert(@SDA_Interleave <> nil);
  {$ENDIF}
    @SDA_Deinterleave := GetProcAddress(DLLHandle,'SDA_Deinterleave');
  {$IFDEF WIN32}
    Assert(@SDA_Deinterleave <> nil);
  {$ENDIF}
    @SCV_EuclideanDistance := GetProcAddress(DLLHandle,'SCV_EuclideanDistance');
  {$IFDEF WIN32}
    Assert(@SCV_EuclideanDistance <> nil);
  {$ENDIF}
    @SCV_EuclideanDistanceSquared := GetProcAddress(DLLHandle,'SCV_EuclideanDistanceSquared');
  {$IFDEF WIN32}
    Assert(@SCV_EuclideanDistanceSquared <> nil);
  {$ENDIF}
    @SDS_ManchesterEncode := GetProcAddress(DLLHandle,'SDS_ManchesterEncode');
  {$IFDEF WIN32}
    Assert(@SDS_ManchesterEncode <> nil);
  {$ENDIF}
    @SDS_ManchesterDecode := GetProcAddress(DLLHandle,'SDS_ManchesterDecode');
  {$IFDEF WIN32}
    Assert(@SDS_ManchesterDecode <> nil);
  {$ENDIF}
    @SDS_ManchesterEncodeByte := GetProcAddress(DLLHandle,'SDS_ManchesterEncodeByte');
  {$IFDEF WIN32}
    Assert(@SDS_ManchesterEncodeByte <> nil);
  {$ENDIF}
    @SDS_ManchesterDecodeByte := GetProcAddress(DLLHandle,'SDS_ManchesterDecodeByte');
  {$IFDEF WIN32}
    Assert(@SDS_ManchesterDecodeByte <> nil);
  {$ENDIF}
    @SIF_DetectNumericalWordSequence := GetProcAddress(DLLHandle,'SIF_DetectNumericalWordSequence');
  {$IFDEF WIN32}
    Assert(@SIF_DetectNumericalWordSequence <> nil);
  {$ENDIF}
    @SDS_DetectNumericalWordSequence := GetProcAddress(DLLHandle,'SDS_DetectNumericalWordSequence');
  {$IFDEF WIN32}
    Assert(@SDS_DetectNumericalWordSequence <> nil);
  {$ENDIF}
    @SIF_DetectNumericalBitSequence := GetProcAddress(DLLHandle,'SIF_DetectNumericalBitSequence');
  {$IFDEF WIN32}
    Assert(@SIF_DetectNumericalBitSequence <> nil);
  {$ENDIF}
    @SDS_DetectNumericalBitSequence := GetProcAddress(DLLHandle,'SDS_DetectNumericalBitSequence');
  {$IFDEF WIN32}
    Assert(@SDS_DetectNumericalBitSequence <> nil);
  {$ENDIF}
    @SIF_DetectCharacterSequence := GetProcAddress(DLLHandle,'SIF_DetectCharacterSequence');
  {$IFDEF WIN32}
    Assert(@SIF_DetectCharacterSequence <> nil);
  {$ENDIF}
    @SDS_DetectCharacterSequence := GetProcAddress(DLLHandle,'SDS_DetectCharacterSequence');
  {$IFDEF WIN32}
    Assert(@SDS_DetectCharacterSequence <> nil);
  {$ENDIF}
    @SDS_ErrorVector := GetProcAddress(DLLHandle,'SDS_ErrorVector');
  {$IFDEF WIN32}
    Assert(@SDS_ErrorVector <> nil);
  {$ENDIF}
    @SDS_ErrorVectorMagnitudePercent := GetProcAddress(DLLHandle,'SDS_ErrorVectorMagnitudePercent');
  {$IFDEF WIN32}
    Assert(@SDS_ErrorVectorMagnitudePercent <> nil);
  {$ENDIF}
    @SDS_ErrorVectorMagnitudeDecibels := GetProcAddress(DLLHandle,'SDS_ErrorVectorMagnitudeDecibels');
  {$IFDEF WIN32}
    Assert(@SDS_ErrorVectorMagnitudeDecibels <> nil);
  {$ENDIF}
    @SDS_ReverseDiBits := GetProcAddress(DLLHandle,'SDS_ReverseDiBits');
  {$IFDEF WIN32}
    Assert(@SDS_ReverseDiBits <> nil);
  {$ENDIF}
    @SDS_QpskBitErrorCount := GetProcAddress(DLLHandle,'SDS_QpskBitErrorCount');
  {$IFDEF WIN32}
    Assert(@SDS_QpskBitErrorCount <> nil);
  {$ENDIF}
    @SDS_BitErrorRate := GetProcAddress(DLLHandle,'SDS_BitErrorRate');
  {$IFDEF WIN32}
    Assert(@SDS_BitErrorRate <> nil);
  {$ENDIF}
    @SIF_PhaseLockedLoop := GetProcAddress(DLLHandle,'SIF_PhaseLockedLoop');
  {$IFDEF WIN32}
    Assert(@SIF_PhaseLockedLoop <> nil);
  {$ENDIF}
    @SDS_PhaseLockedLoop := GetProcAddress(DLLHandle,'SDS_PhaseLockedLoop');
  {$IFDEF WIN32}
    Assert(@SDS_PhaseLockedLoop <> nil);
  {$ENDIF}
    @SDA_PhaseLockedLoop := GetProcAddress(DLLHandle,'SDA_PhaseLockedLoop');
  {$IFDEF WIN32}
    Assert(@SDA_PhaseLockedLoop <> nil);
  {$ENDIF}
    @SIF_CostasLoop := GetProcAddress(DLLHandle,'SIF_CostasLoop');
  {$IFDEF WIN32}
    Assert(@SIF_CostasLoop <> nil);
  {$ENDIF}
    @SDS_CostasLoop := GetProcAddress(DLLHandle,'SDS_CostasLoop');
  {$IFDEF WIN32}
    Assert(@SDS_CostasLoop <> nil);
  {$ENDIF}
    @SDA_CostasLoop := GetProcAddress(DLLHandle,'SDA_CostasLoop');
  {$IFDEF WIN32}
    Assert(@SDA_CostasLoop <> nil);
  {$ENDIF}
    @SRF_CostasLoop := GetProcAddress(DLLHandle,'SRF_CostasLoop');
  {$IFDEF WIN32}
    Assert(@SRF_CostasLoop <> nil);
  {$ENDIF}
    @SIF_180DegreePhaseDetect := GetProcAddress(DLLHandle,'SIF_180DegreePhaseDetect');
  {$IFDEF WIN32}
    Assert(@SIF_180DegreePhaseDetect <> nil);
  {$ENDIF}
    @SDA_180DegreePhaseDetect := GetProcAddress(DLLHandle,'SDA_180DegreePhaseDetect');
  {$IFDEF WIN32}
    Assert(@SDA_180DegreePhaseDetect <> nil);
  {$ENDIF}
    @SIF_TriggerReverberator := GetProcAddress(DLLHandle,'SIF_TriggerReverberator');
  {$IFDEF WIN32}
    Assert(@SIF_TriggerReverberator <> nil);
  {$ENDIF}
    @SDA_TriggerReverberator := GetProcAddress(DLLHandle,'SDA_TriggerReverberator');
  {$IFDEF WIN32}
    Assert(@SDA_TriggerReverberator <> nil);
  {$ENDIF}
    @SDS_TriggerReverberator := GetProcAddress(DLLHandle,'SDS_TriggerReverberator');
  {$IFDEF WIN32}
    Assert(@SDS_TriggerReverberator <> nil);
  {$ENDIF}
    @SDA_TriggerSelector := GetProcAddress(DLLHandle,'SDA_TriggerSelector');
  {$IFDEF WIN32}
    Assert(@SDA_TriggerSelector <> nil);
  {$ENDIF}
    @SIF_EarlyLateGate := GetProcAddress(DLLHandle,'SIF_EarlyLateGate');
  {$IFDEF WIN32}
    Assert(@SIF_EarlyLateGate <> nil);
  {$ENDIF}
    @SDA_EarlyLateGate := GetProcAddress(DLLHandle,'SDA_EarlyLateGate');
  {$IFDEF WIN32}
    Assert(@SDA_EarlyLateGate <> nil);
  {$ENDIF}
    @SDA_EarlyLateGateDebug := GetProcAddress(DLLHandle,'SDA_EarlyLateGateDebug');
  {$IFDEF WIN32}
    Assert(@SDA_EarlyLateGateDebug <> nil);
  {$ENDIF}
    @SDS_EarlyLateGate := GetProcAddress(DLLHandle,'SDS_EarlyLateGate');
  {$IFDEF WIN32}
    Assert(@SDS_EarlyLateGate <> nil);
  {$ENDIF}
    @SIF_EarlyLateGateSquarePulse := GetProcAddress(DLLHandle,'SIF_EarlyLateGateSquarePulse');
  {$IFDEF WIN32}
    Assert(@SIF_EarlyLateGateSquarePulse <> nil);
  {$ENDIF}
    @SDA_EarlyLateGateSquarePulse := GetProcAddress(DLLHandle,'SDA_EarlyLateGateSquarePulse');
  {$IFDEF WIN32}
    Assert(@SDA_EarlyLateGateSquarePulse <> nil);
  {$ENDIF}
    @SDA_EarlyLateGateSquarePulseDebug := GetProcAddress(DLLHandle,'SDA_EarlyLateGateSquarePulseDebug');
  {$IFDEF WIN32}
    Assert(@SDA_EarlyLateGateSquarePulseDebug <> nil);
  {$ENDIF}
    @SDS_EarlyLateGateSquarePulse := GetProcAddress(DLLHandle,'SDS_EarlyLateGateSquarePulse');
  {$IFDEF WIN32}
    Assert(@SDS_EarlyLateGateSquarePulse <> nil);
  {$ENDIF}
    @SDS_ConvEncoderK3 := GetProcAddress(DLLHandle,'SDS_ConvEncoderK3');
  {$IFDEF WIN32}
    Assert(@SDS_ConvEncoderK3 <> nil);
  {$ENDIF}
    @SIF_ViterbiDecoderK3 := GetProcAddress(DLLHandle,'SIF_ViterbiDecoderK3');
  {$IFDEF WIN32}
    Assert(@SIF_ViterbiDecoderK3 <> nil);
  {$ENDIF}
    @SDS_ViterbiDecoderK3 := GetProcAddress(DLLHandle,'SDS_ViterbiDecoderK3');
  {$IFDEF WIN32}
    Assert(@SDS_ViterbiDecoderK3 <> nil);
  {$ENDIF}
    @SDS_ConvEncoderV32 := GetProcAddress(DLLHandle,'SDS_ConvEncoderV32');
  {$IFDEF WIN32}
    Assert(@SDS_ConvEncoderV32 <> nil);
  {$ENDIF}
    @SIF_ViterbiDecoderV32 := GetProcAddress(DLLHandle,'SIF_ViterbiDecoderV32');
  {$IFDEF WIN32}
    Assert(@SIF_ViterbiDecoderV32 <> nil);
  {$ENDIF}
    @SDS_ViterbiDecoderV32 := GetProcAddress(DLLHandle,'SDS_ViterbiDecoderV32');
  {$IFDEF WIN32}
    Assert(@SDS_ViterbiDecoderV32 <> nil);
  {$ENDIF}
    @SIF_AmplitudeModulate := GetProcAddress(DLLHandle,'SIF_AmplitudeModulate');
  {$IFDEF WIN32}
    Assert(@SIF_AmplitudeModulate <> nil);
  {$ENDIF}
    @SDA_AmplitudeModulate := GetProcAddress(DLLHandle,'SDA_AmplitudeModulate');
  {$IFDEF WIN32}
    Assert(@SDA_AmplitudeModulate <> nil);
  {$ENDIF}
    @SDS_AmplitudeModulate := GetProcAddress(DLLHandle,'SDS_AmplitudeModulate');
  {$IFDEF WIN32}
    Assert(@SDS_AmplitudeModulate <> nil);
  {$ENDIF}
    @SIF_AmplitudeModulate2 := GetProcAddress(DLLHandle,'SIF_AmplitudeModulate2');
  {$IFDEF WIN32}
    Assert(@SIF_AmplitudeModulate2 <> nil);
  {$ENDIF}
    @SDA_AmplitudeModulate2 := GetProcAddress(DLLHandle,'SDA_AmplitudeModulate2');
  {$IFDEF WIN32}
    Assert(@SDA_AmplitudeModulate2 <> nil);
  {$ENDIF}
    @SDS_AmplitudeModulate2 := GetProcAddress(DLLHandle,'SDS_AmplitudeModulate2');
  {$IFDEF WIN32}
    Assert(@SDS_AmplitudeModulate2 <> nil);
  {$ENDIF}
    @SIF_ComplexShift := GetProcAddress(DLLHandle,'SIF_ComplexShift');
  {$IFDEF WIN32}
    Assert(@SIF_ComplexShift <> nil);
  {$ENDIF}
    @SDA_ComplexShift := GetProcAddress(DLLHandle,'SDA_ComplexShift');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexShift <> nil);
  {$ENDIF}
    @SIF_FrequencyModulate := GetProcAddress(DLLHandle,'SIF_FrequencyModulate');
  {$IFDEF WIN32}
    Assert(@SIF_FrequencyModulate <> nil);
  {$ENDIF}
    @SDS_FrequencyModulate := GetProcAddress(DLLHandle,'SDS_FrequencyModulate');
  {$IFDEF WIN32}
    Assert(@SDS_FrequencyModulate <> nil);
  {$ENDIF}
    @SDA_FrequencyModulate := GetProcAddress(DLLHandle,'SDA_FrequencyModulate');
  {$IFDEF WIN32}
    Assert(@SDA_FrequencyModulate <> nil);
  {$ENDIF}
    @SDA_FrequencyDemodulate := GetProcAddress(DLLHandle,'SDA_FrequencyDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_FrequencyDemodulate <> nil);
  {$ENDIF}
    @SIF_FrequencyModulateComplex := GetProcAddress(DLLHandle,'SIF_FrequencyModulateComplex');
  {$IFDEF WIN32}
    Assert(@SIF_FrequencyModulateComplex <> nil);
  {$ENDIF}
    @SDS_FrequencyModulateComplex := GetProcAddress(DLLHandle,'SDS_FrequencyModulateComplex');
  {$IFDEF WIN32}
    Assert(@SDS_FrequencyModulateComplex <> nil);
  {$ENDIF}
    @SDA_FrequencyModulateComplex := GetProcAddress(DLLHandle,'SDA_FrequencyModulateComplex');
  {$IFDEF WIN32}
    Assert(@SDA_FrequencyModulateComplex <> nil);
  {$ENDIF}
    @SDA_DeltaModulate := GetProcAddress(DLLHandle,'SDA_DeltaModulate');
  {$IFDEF WIN32}
    Assert(@SDA_DeltaModulate <> nil);
  {$ENDIF}
    @SDA_DeltaDemodulate := GetProcAddress(DLLHandle,'SDA_DeltaDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_DeltaDemodulate <> nil);
  {$ENDIF}
    @SDA_DeltaModulate2 := GetProcAddress(DLLHandle,'SDA_DeltaModulate2');
  {$IFDEF WIN32}
    Assert(@SDA_DeltaModulate2 <> nil);
  {$ENDIF}
    @SIF_CostasQamDemodulate := GetProcAddress(DLLHandle,'SIF_CostasQamDemodulate');
  {$IFDEF WIN32}
    Assert(@SIF_CostasQamDemodulate <> nil);
  {$ENDIF}
    @SDS_CostasQamDemodulate := GetProcAddress(DLLHandle,'SDS_CostasQamDemodulate');
  {$IFDEF WIN32}
    Assert(@SDS_CostasQamDemodulate <> nil);
  {$ENDIF}
    @SDS_CostasQamDemodulateDebug := GetProcAddress(DLLHandle,'SDS_CostasQamDemodulateDebug');
  {$IFDEF WIN32}
    Assert(@SDS_CostasQamDemodulateDebug <> nil);
  {$ENDIF}
    @SDA_CostasQamDemodulate := GetProcAddress(DLLHandle,'SDA_CostasQamDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_CostasQamDemodulate <> nil);
  {$ENDIF}
    @SDA_CostasQamDemodulateDebug := GetProcAddress(DLLHandle,'SDA_CostasQamDemodulateDebug');
  {$IFDEF WIN32}
    Assert(@SDA_CostasQamDemodulateDebug <> nil);
  {$ENDIF}
    @SIF_QpskModulate := GetProcAddress(DLLHandle,'SIF_QpskModulate');
  {$IFDEF WIN32}
    Assert(@SIF_QpskModulate <> nil);
  {$ENDIF}
    @SDA_QpskModulate := GetProcAddress(DLLHandle,'SDA_QpskModulate');
  {$IFDEF WIN32}
    Assert(@SDA_QpskModulate <> nil);
  {$ENDIF}
    @SIF_QpskDemodulate := GetProcAddress(DLLHandle,'SIF_QpskDemodulate');
  {$IFDEF WIN32}
    Assert(@SIF_QpskDemodulate <> nil);
  {$ENDIF}
    @SDA_QpskDemodulate := GetProcAddress(DLLHandle,'SDA_QpskDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_QpskDemodulate <> nil);
  {$ENDIF}
    @SDA_QpskDemodulateDebug := GetProcAddress(DLLHandle,'SDA_QpskDemodulateDebug');
  {$IFDEF WIN32}
    Assert(@SDA_QpskDemodulateDebug <> nil);
  {$ENDIF}
    @SDA_QpskDifferentialEncode := GetProcAddress(DLLHandle,'SDA_QpskDifferentialEncode');
  {$IFDEF WIN32}
    Assert(@SDA_QpskDifferentialEncode <> nil);
  {$ENDIF}
    @SDA_QpskDifferentialDecode := GetProcAddress(DLLHandle,'SDA_QpskDifferentialDecode');
  {$IFDEF WIN32}
    Assert(@SDA_QpskDifferentialDecode <> nil);
  {$ENDIF}
    @SIF_FskModulate := GetProcAddress(DLLHandle,'SIF_FskModulate');
  {$IFDEF WIN32}
    Assert(@SIF_FskModulate <> nil);
  {$ENDIF}
    @SDA_FskModulateByte := GetProcAddress(DLLHandle,'SDA_FskModulateByte');
  {$IFDEF WIN32}
    Assert(@SDA_FskModulateByte <> nil);
  {$ENDIF}
    @SDA_FskDemodulateByte := GetProcAddress(DLLHandle,'SDA_FskDemodulateByte');
  {$IFDEF WIN32}
    Assert(@SDA_FskDemodulateByte <> nil);
  {$ENDIF}
    @SDA_CpfskModulateByte := GetProcAddress(DLLHandle,'SDA_CpfskModulateByte');
  {$IFDEF WIN32}
    Assert(@SDA_CpfskModulateByte <> nil);
  {$ENDIF}
    @SDA_FskModulate := GetProcAddress(DLLHandle,'SDA_FskModulate');
  {$IFDEF WIN32}
    Assert(@SDA_FskModulate <> nil);
  {$ENDIF}
    @SDA_FskDemodulate := GetProcAddress(DLLHandle,'SDA_FskDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_FskDemodulate <> nil);
  {$ENDIF}
    @SDA_CpfskModulate := GetProcAddress(DLLHandle,'SDA_CpfskModulate');
  {$IFDEF WIN32}
    Assert(@SDA_CpfskModulate <> nil);
  {$ENDIF}
    @SIF_Qam16Modulate := GetProcAddress(DLLHandle,'SIF_Qam16Modulate');
  {$IFDEF WIN32}
    Assert(@SIF_Qam16Modulate <> nil);
  {$ENDIF}
    @SDA_Qam16Modulate := GetProcAddress(DLLHandle,'SDA_Qam16Modulate');
  {$IFDEF WIN32}
    Assert(@SDA_Qam16Modulate <> nil);
  {$ENDIF}
    @SIF_Qam16Demodulate := GetProcAddress(DLLHandle,'SIF_Qam16Demodulate');
  {$IFDEF WIN32}
    Assert(@SIF_Qam16Demodulate <> nil);
  {$ENDIF}
    @SDA_Qam16Demodulate := GetProcAddress(DLLHandle,'SDA_Qam16Demodulate');
  {$IFDEF WIN32}
    Assert(@SDA_Qam16Demodulate <> nil);
  {$ENDIF}
    @SDA_Qam16DemodulateDebug := GetProcAddress(DLLHandle,'SDA_Qam16DemodulateDebug');
  {$IFDEF WIN32}
    Assert(@SDA_Qam16DemodulateDebug <> nil);
  {$ENDIF}
    @SDA_Qam16DifferentialEncode := GetProcAddress(DLLHandle,'SDA_Qam16DifferentialEncode');
  {$IFDEF WIN32}
    Assert(@SDA_Qam16DifferentialEncode <> nil);
  {$ENDIF}
    @SDA_Qam16DifferentialDecode := GetProcAddress(DLLHandle,'SDA_Qam16DifferentialDecode');
  {$IFDEF WIN32}
    Assert(@SDA_Qam16DifferentialDecode <> nil);
  {$ENDIF}
    @SIF_BpskModulate := GetProcAddress(DLLHandle,'SIF_BpskModulate');
  {$IFDEF WIN32}
    Assert(@SIF_BpskModulate <> nil);
  {$ENDIF}
    @SDA_BpskModulate := GetProcAddress(DLLHandle,'SDA_BpskModulate');
  {$IFDEF WIN32}
    Assert(@SDA_BpskModulate <> nil);
  {$ENDIF}
    @SDA_BpskModulateByte := GetProcAddress(DLLHandle,'SDA_BpskModulateByte');
  {$IFDEF WIN32}
    Assert(@SDA_BpskModulateByte <> nil);
  {$ENDIF}
    @SIF_BpskDemodulate := GetProcAddress(DLLHandle,'SIF_BpskDemodulate');
  {$IFDEF WIN32}
    Assert(@SIF_BpskDemodulate <> nil);
  {$ENDIF}
    @SDA_BpskDemodulate := GetProcAddress(DLLHandle,'SDA_BpskDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_BpskDemodulate <> nil);
  {$ENDIF}
    @SDA_BpskDemodulateDebug := GetProcAddress(DLLHandle,'SDA_BpskDemodulateDebug');
  {$IFDEF WIN32}
    Assert(@SDA_BpskDemodulateDebug <> nil);
  {$ENDIF}
    @SIF_DpskModulate := GetProcAddress(DLLHandle,'SIF_DpskModulate');
  {$IFDEF WIN32}
    Assert(@SIF_DpskModulate <> nil);
  {$ENDIF}
    @SDA_DpskModulate := GetProcAddress(DLLHandle,'SDA_DpskModulate');
  {$IFDEF WIN32}
    Assert(@SDA_DpskModulate <> nil);
  {$ENDIF}
    @SDA_DpskModulateByte := GetProcAddress(DLLHandle,'SDA_DpskModulateByte');
  {$IFDEF WIN32}
    Assert(@SDA_DpskModulateByte <> nil);
  {$ENDIF}
    @SIF_DpskDemodulate := GetProcAddress(DLLHandle,'SIF_DpskDemodulate');
  {$IFDEF WIN32}
    Assert(@SIF_DpskDemodulate <> nil);
  {$ENDIF}
    @SDA_DpskDemodulate := GetProcAddress(DLLHandle,'SDA_DpskDemodulate');
  {$IFDEF WIN32}
    Assert(@SDA_DpskDemodulate <> nil);
  {$ENDIF}
    @SDA_DpskDemodulateDebug := GetProcAddress(DLLHandle,'SDA_DpskDemodulateDebug');
  {$IFDEF WIN32}
    Assert(@SDA_DpskDemodulateDebug <> nil);
  {$ENDIF}
    @SIF_PiByFourDQpskModulate := GetProcAddress(DLLHandle,'SIF_PiByFourDQpskModulate');
  {$IFDEF WIN32}
    Assert(@SIF_PiByFourDQpskModulate <> nil);
  {$ENDIF}
    @SDA_PiByFourDQpskModulate := GetProcAddress(DLLHandle,'SDA_PiByFourDQpskModulate');
  {$IFDEF WIN32}
    Assert(@SDA_PiByFourDQpskModulate <> nil);
  {$ENDIF}
    @SDS_ChannelizationCode := GetProcAddress(DLLHandle,'SDS_ChannelizationCode');
  {$IFDEF WIN32}
    Assert(@SDS_ChannelizationCode <> nil);
  {$ENDIF}
    @SDA_ComplexQPSKSpread := GetProcAddress(DLLHandle,'SDA_ComplexQPSKSpread');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexQPSKSpread <> nil);
  {$ENDIF}
    @SDA_ComplexQPSKDeSpread := GetProcAddress(DLLHandle,'SDA_ComplexQPSKDeSpread');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexQPSKDeSpread <> nil);
  {$ENDIF}
    @SDS_Scrambler1417 := GetProcAddress(DLLHandle,'SDS_Scrambler1417');
  {$IFDEF WIN32}
    Assert(@SDS_Scrambler1417 <> nil);
  {$ENDIF}
    @SDS_Descrambler1417 := GetProcAddress(DLLHandle,'SDS_Descrambler1417');
  {$IFDEF WIN32}
    Assert(@SDS_Descrambler1417 <> nil);
  {$ENDIF}
    @SDS_Scrambler1417WithInversion := GetProcAddress(DLLHandle,'SDS_Scrambler1417WithInversion');
  {$IFDEF WIN32}
    Assert(@SDS_Scrambler1417WithInversion <> nil);
  {$ENDIF}
    @SDS_Descrambler1417WithInversion := GetProcAddress(DLLHandle,'SDS_Descrambler1417WithInversion');
  {$IFDEF WIN32}
    Assert(@SDS_Descrambler1417WithInversion <> nil);
  {$ENDIF}
    @SDS_Scrambler1823 := GetProcAddress(DLLHandle,'SDS_Scrambler1823');
  {$IFDEF WIN32}
    Assert(@SDS_Scrambler1823 <> nil);
  {$ENDIF}
    @SDS_Descrambler1823 := GetProcAddress(DLLHandle,'SDS_Descrambler1823');
  {$IFDEF WIN32}
    Assert(@SDS_Descrambler1823 <> nil);
  {$ENDIF}
    @SDS_Scrambler523 := GetProcAddress(DLLHandle,'SDS_Scrambler523');
  {$IFDEF WIN32}
    Assert(@SDS_Scrambler523 <> nil);
  {$ENDIF}
    @SDS_Descrambler523 := GetProcAddress(DLLHandle,'SDS_Descrambler523');
  {$IFDEF WIN32}
    Assert(@SDS_Descrambler523 <> nil);
  {$ENDIF}
    @SDS_ScramblerDescramblerPN9 := GetProcAddress(DLLHandle,'SDS_ScramblerDescramblerPN9');
  {$IFDEF WIN32}
    Assert(@SDS_ScramblerDescramblerPN9 <> nil);
  {$ENDIF}
    @SDS_SequenceGeneratorPN9 := GetProcAddress(DLLHandle,'SDS_SequenceGeneratorPN9');
  {$IFDEF WIN32}
    Assert(@SDS_SequenceGeneratorPN9 <> nil);
  {$ENDIF}
    @SDS_ScramblerDescramblerPN15 := GetProcAddress(DLLHandle,'SDS_ScramblerDescramblerPN15');
  {$IFDEF WIN32}
    Assert(@SDS_ScramblerDescramblerPN15 <> nil);
  {$ENDIF}
    @SDS_SequenceGeneratorPN15 := GetProcAddress(DLLHandle,'SDS_SequenceGeneratorPN15');
  {$IFDEF WIN32}
    Assert(@SDS_SequenceGeneratorPN15 <> nil);
  {$ENDIF}
    @SDS_ScramblerDescramblergCRC24 := GetProcAddress(DLLHandle,'SDS_ScramblerDescramblergCRC24');
  {$IFDEF WIN32}
    Assert(@SDS_ScramblerDescramblergCRC24 <> nil);
  {$ENDIF}
    @SDS_SequenceGeneratorgCRC24 := GetProcAddress(DLLHandle,'SDS_SequenceGeneratorgCRC24');
  {$IFDEF WIN32}
    Assert(@SDS_SequenceGeneratorgCRC24 <> nil);
  {$ENDIF}
    @SDS_ScramblerDescramblergCRC16 := GetProcAddress(DLLHandle,'SDS_ScramblerDescramblergCRC16');
  {$IFDEF WIN32}
    Assert(@SDS_ScramblerDescramblergCRC16 <> nil);
  {$ENDIF}
    @SDS_SequenceGeneratorgCRC16 := GetProcAddress(DLLHandle,'SDS_SequenceGeneratorgCRC16');
  {$IFDEF WIN32}
    Assert(@SDS_SequenceGeneratorgCRC16 <> nil);
  {$ENDIF}
    @SDS_ScramblerDescramblergCRC12 := GetProcAddress(DLLHandle,'SDS_ScramblerDescramblergCRC12');
  {$IFDEF WIN32}
    Assert(@SDS_ScramblerDescramblergCRC12 <> nil);
  {$ENDIF}
    @SDS_SequenceGeneratorgCRC12 := GetProcAddress(DLLHandle,'SDS_SequenceGeneratorgCRC12');
  {$IFDEF WIN32}
    Assert(@SDS_SequenceGeneratorgCRC12 <> nil);
  {$ENDIF}
    @SDS_ScramblerDescramblergCRC8 := GetProcAddress(DLLHandle,'SDS_ScramblerDescramblergCRC8');
  {$IFDEF WIN32}
    Assert(@SDS_ScramblerDescramblergCRC8 <> nil);
  {$ENDIF}
    @SDS_SequenceGeneratorgCRC8 := GetProcAddress(DLLHandle,'SDS_SequenceGeneratorgCRC8');
  {$IFDEF WIN32}
    Assert(@SDS_SequenceGeneratorgCRC8 <> nil);
  {$ENDIF}
    @SDS_LongCodeGenerator3GPPDL := GetProcAddress(DLLHandle,'SDS_LongCodeGenerator3GPPDL');
  {$IFDEF WIN32}
    Assert(@SDS_LongCodeGenerator3GPPDL <> nil);
  {$ENDIF}
    @SDS_LongCodeGenerator3GPPUL := GetProcAddress(DLLHandle,'SDS_LongCodeGenerator3GPPUL');
  {$IFDEF WIN32}
    Assert(@SDS_LongCodeGenerator3GPPUL <> nil);
  {$ENDIF}
    @SDA_Multiplex := GetProcAddress(DLLHandle,'SDA_Multiplex');
  {$IFDEF WIN32}
    Assert(@SDA_Multiplex <> nil);
  {$ENDIF}
    @SDA_Demultiplex := GetProcAddress(DLLHandle,'SDA_Demultiplex');
  {$IFDEF WIN32}
    Assert(@SDA_Demultiplex <> nil);
  {$ENDIF}
    @SDA_Mux2 := GetProcAddress(DLLHandle,'SDA_Mux2');
  {$IFDEF WIN32}
    Assert(@SDA_Mux2 <> nil);
  {$ENDIF}
    @SDA_Demux2 := GetProcAddress(DLLHandle,'SDA_Demux2');
  {$IFDEF WIN32}
    Assert(@SDA_Demux2 <> nil);
  {$ENDIF}
    @SDA_Mux3 := GetProcAddress(DLLHandle,'SDA_Mux3');
  {$IFDEF WIN32}
    Assert(@SDA_Mux3 <> nil);
  {$ENDIF}
    @SDA_Demux3 := GetProcAddress(DLLHandle,'SDA_Demux3');
  {$IFDEF WIN32}
    Assert(@SDA_Demux3 <> nil);
  {$ENDIF}
    @SDA_Mux4 := GetProcAddress(DLLHandle,'SDA_Mux4');
  {$IFDEF WIN32}
    Assert(@SDA_Mux4 <> nil);
  {$ENDIF}
    @SDA_Demux4 := GetProcAddress(DLLHandle,'SDA_Demux4');
  {$IFDEF WIN32}
    Assert(@SDA_Demux4 <> nil);
  {$ENDIF}
    @SDA_Mux5 := GetProcAddress(DLLHandle,'SDA_Mux5');
  {$IFDEF WIN32}
    Assert(@SDA_Mux5 <> nil);
  {$ENDIF}
    @SDA_Demux5 := GetProcAddress(DLLHandle,'SDA_Demux5');
  {$IFDEF WIN32}
    Assert(@SDA_Demux5 <> nil);
  {$ENDIF}
    @SDA_Mux6 := GetProcAddress(DLLHandle,'SDA_Mux6');
  {$IFDEF WIN32}
    Assert(@SDA_Mux6 <> nil);
  {$ENDIF}
    @SDA_Demux6 := GetProcAddress(DLLHandle,'SDA_Demux6');
  {$IFDEF WIN32}
    Assert(@SDA_Demux6 <> nil);
  {$ENDIF}
    @SDA_Mux7 := GetProcAddress(DLLHandle,'SDA_Mux7');
  {$IFDEF WIN32}
    Assert(@SDA_Mux7 <> nil);
  {$ENDIF}
    @SDA_Demux7 := GetProcAddress(DLLHandle,'SDA_Demux7');
  {$IFDEF WIN32}
    Assert(@SDA_Demux7 <> nil);
  {$ENDIF}
    @SDA_Mux8 := GetProcAddress(DLLHandle,'SDA_Mux8');
  {$IFDEF WIN32}
    Assert(@SDA_Mux8 <> nil);
  {$ENDIF}
    @SDA_Demux8 := GetProcAddress(DLLHandle,'SDA_Demux8');
  {$IFDEF WIN32}
    Assert(@SDA_Demux8 <> nil);
  {$ENDIF}
    @SIF_Decimate := GetProcAddress(DLLHandle,'SIF_Decimate');
  {$IFDEF WIN32}
    Assert(@SIF_Decimate <> nil);
  {$ENDIF}
    @SDA_Decimate := GetProcAddress(DLLHandle,'SDA_Decimate');
  {$IFDEF WIN32}
    Assert(@SDA_Decimate <> nil);
  {$ENDIF}
    @SIF_Interpolate := GetProcAddress(DLLHandle,'SIF_Interpolate');
  {$IFDEF WIN32}
    Assert(@SIF_Interpolate <> nil);
  {$ENDIF}
    @SDA_Interpolate := GetProcAddress(DLLHandle,'SDA_Interpolate');
  {$IFDEF WIN32}
    Assert(@SDA_Interpolate <> nil);
  {$ENDIF}
    @SIF_FilterAndDecimate := GetProcAddress(DLLHandle,'SIF_FilterAndDecimate');
  {$IFDEF WIN32}
    Assert(@SIF_FilterAndDecimate <> nil);
  {$ENDIF}
    @SDA_FilterAndDecimate := GetProcAddress(DLLHandle,'SDA_FilterAndDecimate');
  {$IFDEF WIN32}
    Assert(@SDA_FilterAndDecimate <> nil);
  {$ENDIF}
    @SIF_InterpolateAndFilter := GetProcAddress(DLLHandle,'SIF_InterpolateAndFilter');
  {$IFDEF WIN32}
    Assert(@SIF_InterpolateAndFilter <> nil);
  {$ENDIF}
    @SDA_InterpolateAndFilter := GetProcAddress(DLLHandle,'SDA_InterpolateAndFilter');
  {$IFDEF WIN32}
    Assert(@SDA_InterpolateAndFilter <> nil);
  {$ENDIF}
    @SDA_ResampleLinear := GetProcAddress(DLLHandle,'SDA_ResampleLinear');
  {$IFDEF WIN32}
    Assert(@SDA_ResampleLinear <> nil);
  {$ENDIF}
    @SDA_ResampleLinearNSamples := GetProcAddress(DLLHandle,'SDA_ResampleLinearNSamples');
  {$IFDEF WIN32}
    Assert(@SDA_ResampleLinearNSamples <> nil);
  {$ENDIF}
    @SDA_InterpolateLinear1D := GetProcAddress(DLLHandle,'SDA_InterpolateLinear1D');
  {$IFDEF WIN32}
    Assert(@SDA_InterpolateLinear1D <> nil);
  {$ENDIF}
    @SDA_InterpolateLinear2D := GetProcAddress(DLLHandle,'SDA_InterpolateLinear2D');
  {$IFDEF WIN32}
    Assert(@SDA_InterpolateLinear2D <> nil);
  {$ENDIF}
    @SIF_ResampleSinc := GetProcAddress(DLLHandle,'SIF_ResampleSinc');
  {$IFDEF WIN32}
    Assert(@SIF_ResampleSinc <> nil);
  {$ENDIF}
    @SIF_DtmfGenerate := GetProcAddress(DLLHandle,'SIF_DtmfGenerate');
  {$IFDEF WIN32}
    Assert(@SIF_DtmfGenerate <> nil);
  {$ENDIF}
    @SDA_DtmfGenerate := GetProcAddress(DLLHandle,'SDA_DtmfGenerate');
  {$IFDEF WIN32}
    Assert(@SDA_DtmfGenerate <> nil);
  {$ENDIF}
    @SIF_DtmfDetect := GetProcAddress(DLLHandle,'SIF_DtmfDetect');
  {$IFDEF WIN32}
    Assert(@SIF_DtmfDetect <> nil);
  {$ENDIF}
    @SDA_DtmfDetect := GetProcAddress(DLLHandle,'SDA_DtmfDetect');
  {$IFDEF WIN32}
    Assert(@SDA_DtmfDetect <> nil);
  {$ENDIF}
    @SDA_DtmfDetectAndValidate := GetProcAddress(DLLHandle,'SDA_DtmfDetectAndValidate');
  {$IFDEF WIN32}
    Assert(@SDA_DtmfDetectAndValidate <> nil);
  {$ENDIF}
    @SUF_AsciiToKeyCode := GetProcAddress(DLLHandle,'SUF_AsciiToKeyCode');
  {$IFDEF WIN32}
    Assert(@SUF_AsciiToKeyCode <> nil);
  {$ENDIF}
    @SUF_KeyCodeToAscii := GetProcAddress(DLLHandle,'SUF_KeyCodeToAscii');
  {$IFDEF WIN32}
    Assert(@SUF_KeyCodeToAscii <> nil);
  {$ENDIF}
    @SIF_PreEmphasisFilter := GetProcAddress(DLLHandle,'SIF_PreEmphasisFilter');
  {$IFDEF WIN32}
    Assert(@SIF_PreEmphasisFilter <> nil);
  {$ENDIF}
    @SDA_PreEmphasisFilter := GetProcAddress(DLLHandle,'SDA_PreEmphasisFilter');
  {$IFDEF WIN32}
    Assert(@SDA_PreEmphasisFilter <> nil);
  {$ENDIF}
    @SIF_DeEmphasisFilter := GetProcAddress(DLLHandle,'SIF_DeEmphasisFilter');
  {$IFDEF WIN32}
    Assert(@SIF_DeEmphasisFilter <> nil);
  {$ENDIF}
    @SDA_DeEmphasisFilter := GetProcAddress(DLLHandle,'SDA_DeEmphasisFilter');
  {$IFDEF WIN32}
    Assert(@SDA_DeEmphasisFilter <> nil);
  {$ENDIF}
    @SDA_AdpcmEncoder := GetProcAddress(DLLHandle,'SDA_AdpcmEncoder');
  {$IFDEF WIN32}
    Assert(@SDA_AdpcmEncoder <> nil);
  {$ENDIF}
    @SDA_AdpcmEncoderDebug := GetProcAddress(DLLHandle,'SDA_AdpcmEncoderDebug');
  {$IFDEF WIN32}
    Assert(@SDA_AdpcmEncoderDebug <> nil);
  {$ENDIF}
    @SDA_AdpcmDecoder := GetProcAddress(DLLHandle,'SDA_AdpcmDecoder');
  {$IFDEF WIN32}
    Assert(@SDA_AdpcmDecoder <> nil);
  {$ENDIF}
    @SDA_Max := GetProcAddress(DLLHandle,'SDA_Max');
  {$IFDEF WIN32}
    Assert(@SDA_Max <> nil);
  {$ENDIF}
    @SDA_AbsMax := GetProcAddress(DLLHandle,'SDA_AbsMax');
  {$IFDEF WIN32}
    Assert(@SDA_AbsMax <> nil);
  {$ENDIF}
    @SDA_Min := GetProcAddress(DLLHandle,'SDA_Min');
  {$IFDEF WIN32}
    Assert(@SDA_Min <> nil);
  {$ENDIF}
    @SDA_AbsMin := GetProcAddress(DLLHandle,'SDA_AbsMin');
  {$IFDEF WIN32}
    Assert(@SDA_AbsMin <> nil);
  {$ENDIF}
    @SDA_Middle := GetProcAddress(DLLHandle,'SDA_Middle');
  {$IFDEF WIN32}
    Assert(@SDA_Middle <> nil);
  {$ENDIF}
    @SDA_Range := GetProcAddress(DLLHandle,'SDA_Range');
  {$IFDEF WIN32}
    Assert(@SDA_Range <> nil);
  {$ENDIF}
    @SDA_MaxPos := GetProcAddress(DLLHandle,'SDA_MaxPos');
  {$IFDEF WIN32}
    Assert(@SDA_MaxPos <> nil);
  {$ENDIF}
    @SDA_AbsMaxPos := GetProcAddress(DLLHandle,'SDA_AbsMaxPos');
  {$IFDEF WIN32}
    Assert(@SDA_AbsMaxPos <> nil);
  {$ENDIF}
    @SDA_MinPos := GetProcAddress(DLLHandle,'SDA_MinPos');
  {$IFDEF WIN32}
    Assert(@SDA_MinPos <> nil);
  {$ENDIF}
    @SDA_AbsMinPos := GetProcAddress(DLLHandle,'SDA_AbsMinPos');
  {$IFDEF WIN32}
    Assert(@SDA_AbsMinPos <> nil);
  {$ENDIF}
    @SDS_Max := GetProcAddress(DLLHandle,'SDS_Max');
  {$IFDEF WIN32}
    Assert(@SDS_Max <> nil);
  {$ENDIF}
    @SDS_AbsMax := GetProcAddress(DLLHandle,'SDS_AbsMax');
  {$IFDEF WIN32}
    Assert(@SDS_AbsMax <> nil);
  {$ENDIF}
    @SDS_Min := GetProcAddress(DLLHandle,'SDS_Min');
  {$IFDEF WIN32}
    Assert(@SDS_Min <> nil);
  {$ENDIF}
    @SDS_AbsMin := GetProcAddress(DLLHandle,'SDS_AbsMin');
  {$IFDEF WIN32}
    Assert(@SDS_AbsMin <> nil);
  {$ENDIF}
    @SDA_LocalMax := GetProcAddress(DLLHandle,'SDA_LocalMax');
  {$IFDEF WIN32}
    Assert(@SDA_LocalMax <> nil);
  {$ENDIF}
    @SDA_LocalAbsMax := GetProcAddress(DLLHandle,'SDA_LocalAbsMax');
  {$IFDEF WIN32}
    Assert(@SDA_LocalAbsMax <> nil);
  {$ENDIF}
    @SDA_LocalMin := GetProcAddress(DLLHandle,'SDA_LocalMin');
  {$IFDEF WIN32}
    Assert(@SDA_LocalMin <> nil);
  {$ENDIF}
    @SDA_LocalAbsMin := GetProcAddress(DLLHandle,'SDA_LocalAbsMin');
  {$IFDEF WIN32}
    Assert(@SDA_LocalAbsMin <> nil);
  {$ENDIF}
    @SDA_PeakHold := GetProcAddress(DLLHandle,'SDA_PeakHold');
  {$IFDEF WIN32}
    Assert(@SDA_PeakHold <> nil);
  {$ENDIF}
    @SDA_PeakHoldPerSample := GetProcAddress(DLLHandle,'SDA_PeakHoldPerSample');
  {$IFDEF WIN32}
    Assert(@SDA_PeakHoldPerSample <> nil);
  {$ENDIF}
    @SDA_DetectFirstPeakOverThreshold := GetProcAddress(DLLHandle,'SDA_DetectFirstPeakOverThreshold');
  {$IFDEF WIN32}
    Assert(@SDA_DetectFirstPeakOverThreshold <> nil);
  {$ENDIF}
    @SDA_Divide := GetProcAddress(DLLHandle,'SDA_Divide');
  {$IFDEF WIN32}
    Assert(@SDA_Divide <> nil);
  {$ENDIF}
    @SDA_Divide2 := GetProcAddress(DLLHandle,'SDA_Divide2');
  {$IFDEF WIN32}
    Assert(@SDA_Divide2 <> nil);
  {$ENDIF}
    @SDA_Multiply := GetProcAddress(DLLHandle,'SDA_Multiply');
  {$IFDEF WIN32}
    Assert(@SDA_Multiply <> nil);
  {$ENDIF}
    @SDA_Multiply2 := GetProcAddress(DLLHandle,'SDA_Multiply2');
  {$IFDEF WIN32}
    Assert(@SDA_Multiply2 <> nil);
  {$ENDIF}
    @SDS_ComplexMultiply := GetProcAddress(DLLHandle,'SDS_ComplexMultiply');
  {$IFDEF WIN32}
    Assert(@SDS_ComplexMultiply <> nil);
  {$ENDIF}
    @SDS_ComplexInverse := GetProcAddress(DLLHandle,'SDS_ComplexInverse');
  {$IFDEF WIN32}
    Assert(@SDS_ComplexInverse <> nil);
  {$ENDIF}
    @SDA_ComplexInverse := GetProcAddress(DLLHandle,'SDA_ComplexInverse');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexInverse <> nil);
  {$ENDIF}
    @SDS_ComplexDivide := GetProcAddress(DLLHandle,'SDS_ComplexDivide');
  {$IFDEF WIN32}
    Assert(@SDS_ComplexDivide <> nil);
  {$ENDIF}
    @SDA_ComplexScalarMultiply := GetProcAddress(DLLHandle,'SDA_ComplexScalarMultiply');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexScalarMultiply <> nil);
  {$ENDIF}
    @SDA_ComplexMultiply2 := GetProcAddress(DLLHandle,'SDA_ComplexMultiply2');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexMultiply2 <> nil);
  {$ENDIF}
    @SDA_ComplexScalarDivide := GetProcAddress(DLLHandle,'SDA_ComplexScalarDivide');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexScalarDivide <> nil);
  {$ENDIF}
    @SDA_ComplexDivide2 := GetProcAddress(DLLHandle,'SDA_ComplexDivide2');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexDivide2 <> nil);
  {$ENDIF}
    @SDA_RealDotProduct := GetProcAddress(DLLHandle,'SDA_RealDotProduct');
  {$IFDEF WIN32}
    Assert(@SDA_RealDotProduct <> nil);
  {$ENDIF}
    @SDA_ComplexDotProduct := GetProcAddress(DLLHandle,'SDA_ComplexDotProduct');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexDotProduct <> nil);
  {$ENDIF}
    @SDA_Add2 := GetProcAddress(DLLHandle,'SDA_Add2');
  {$IFDEF WIN32}
    Assert(@SDA_Add2 <> nil);
  {$ENDIF}
    @SDA_Add3 := GetProcAddress(DLLHandle,'SDA_Add3');
  {$IFDEF WIN32}
    Assert(@SDA_Add3 <> nil);
  {$ENDIF}
    @SDA_Add4 := GetProcAddress(DLLHandle,'SDA_Add4');
  {$IFDEF WIN32}
    Assert(@SDA_Add4 <> nil);
  {$ENDIF}
    @SDA_Add5 := GetProcAddress(DLLHandle,'SDA_Add5');
  {$IFDEF WIN32}
    Assert(@SDA_Add5 <> nil);
  {$ENDIF}
    @SDA_WeightedSum := GetProcAddress(DLLHandle,'SDA_WeightedSum');
  {$IFDEF WIN32}
    Assert(@SDA_WeightedSum <> nil);
  {$ENDIF}
    @SDA_Subtract2 := GetProcAddress(DLLHandle,'SDA_Subtract2');
  {$IFDEF WIN32}
    Assert(@SDA_Subtract2 <> nil);
  {$ENDIF}
    @SDA_Offset := GetProcAddress(DLLHandle,'SDA_Offset');
  {$IFDEF WIN32}
    Assert(@SDA_Offset <> nil);
  {$ENDIF}
    @SDA_PositiveOffset := GetProcAddress(DLLHandle,'SDA_PositiveOffset');
  {$IFDEF WIN32}
    Assert(@SDA_PositiveOffset <> nil);
  {$ENDIF}
    @SDA_NegativeOffset := GetProcAddress(DLLHandle,'SDA_NegativeOffset');
  {$IFDEF WIN32}
    Assert(@SDA_NegativeOffset <> nil);
  {$ENDIF}
    @SDA_Negate := GetProcAddress(DLLHandle,'SDA_Negate');
  {$IFDEF WIN32}
    Assert(@SDA_Negate <> nil);
  {$ENDIF}
    @SDA_Inverse := GetProcAddress(DLLHandle,'SDA_Inverse');
  {$IFDEF WIN32}
    Assert(@SDA_Inverse <> nil);
  {$ENDIF}
    @SDA_Square := GetProcAddress(DLLHandle,'SDA_Square');
  {$IFDEF WIN32}
    Assert(@SDA_Square <> nil);
  {$ENDIF}
    @SDA_Sqrt := GetProcAddress(DLLHandle,'SDA_Sqrt');
  {$IFDEF WIN32}
    Assert(@SDA_Sqrt <> nil);
  {$ENDIF}
    @SDA_Difference := GetProcAddress(DLLHandle,'SDA_Difference');
  {$IFDEF WIN32}
    Assert(@SDA_Difference <> nil);
  {$ENDIF}
    @SDA_SumOfDifferences := GetProcAddress(DLLHandle,'SDA_SumOfDifferences');
  {$IFDEF WIN32}
    Assert(@SDA_SumOfDifferences <> nil);
  {$ENDIF}
    @SDS_Roots := GetProcAddress(DLLHandle,'SDS_Roots');
  {$IFDEF WIN32}
    Assert(@SDS_Roots <> nil);
  {$ENDIF}
    @SDS_Factorial := GetProcAddress(DLLHandle,'SDS_Factorial');
  {$IFDEF WIN32}
    Assert(@SDS_Factorial <> nil);
  {$ENDIF}
    @SDS_Permutations := GetProcAddress(DLLHandle,'SDS_Permutations');
  {$IFDEF WIN32}
    Assert(@SDS_Permutations <> nil);
  {$ENDIF}
    @SDS_Combinations := GetProcAddress(DLLHandle,'SDS_Combinations');
  {$IFDEF WIN32}
    Assert(@SDS_Combinations <> nil);
  {$ENDIF}
    @SIF_OverlapAndAddLinear := GetProcAddress(DLLHandle,'SIF_OverlapAndAddLinear');
  {$IFDEF WIN32}
    Assert(@SIF_OverlapAndAddLinear <> nil);
  {$ENDIF}
    @SDA_OverlapAndAddLinear := GetProcAddress(DLLHandle,'SDA_OverlapAndAddLinear');
  {$IFDEF WIN32}
    Assert(@SDA_OverlapAndAddLinear <> nil);
  {$ENDIF}
    @SDA_OverlapAndAddLinearWithClip := GetProcAddress(DLLHandle,'SDA_OverlapAndAddLinearWithClip');
  {$IFDEF WIN32}
    Assert(@SDA_OverlapAndAddLinearWithClip <> nil);
  {$ENDIF}
    @SDA_OverlapAndAddArbitrary := GetProcAddress(DLLHandle,'SDA_OverlapAndAddArbitrary');
  {$IFDEF WIN32}
    Assert(@SDA_OverlapAndAddArbitrary <> nil);
  {$ENDIF}
    @SDA_OverlapAndAddArbitraryWithClip := GetProcAddress(DLLHandle,'SDA_OverlapAndAddArbitraryWithClip');
  {$IFDEF WIN32}
    Assert(@SDA_OverlapAndAddArbitraryWithClip <> nil);
  {$ENDIF}
    @SDS_DegreesToRadians := GetProcAddress(DLLHandle,'SDS_DegreesToRadians');
  {$IFDEF WIN32}
    Assert(@SDS_DegreesToRadians <> nil);
  {$ENDIF}
    @SDA_DegreesToRadians := GetProcAddress(DLLHandle,'SDA_DegreesToRadians');
  {$IFDEF WIN32}
    Assert(@SDA_DegreesToRadians <> nil);
  {$ENDIF}
    @SDS_RadiansToDegrees := GetProcAddress(DLLHandle,'SDS_RadiansToDegrees');
  {$IFDEF WIN32}
    Assert(@SDS_RadiansToDegrees <> nil);
  {$ENDIF}
    @SDA_RadiansToDegrees := GetProcAddress(DLLHandle,'SDA_RadiansToDegrees');
  {$IFDEF WIN32}
    Assert(@SDA_RadiansToDegrees <> nil);
  {$ENDIF}
    @SDS_DetectNAN := GetProcAddress(DLLHandle,'SDS_DetectNAN');
  {$IFDEF WIN32}
    Assert(@SDS_DetectNAN <> nil);
  {$ENDIF}
    @SDA_DetectNAN := GetProcAddress(DLLHandle,'SDA_DetectNAN');
  {$IFDEF WIN32}
    Assert(@SDA_DetectNAN <> nil);
  {$ENDIF}
    @SDA_Rotate := GetProcAddress(DLLHandle,'SDA_Rotate');
  {$IFDEF WIN32}
    Assert(@SDA_Rotate <> nil);
  {$ENDIF}
    @SDA_Reverse := GetProcAddress(DLLHandle,'SDA_Reverse');
  {$IFDEF WIN32}
    Assert(@SDA_Reverse <> nil);
  {$ENDIF}
    @SDA_Scale := GetProcAddress(DLLHandle,'SDA_Scale');
  {$IFDEF WIN32}
    Assert(@SDA_Scale <> nil);
  {$ENDIF}
    @SDA_MeanSquare := GetProcAddress(DLLHandle,'SDA_MeanSquare');
  {$IFDEF WIN32}
    Assert(@SDA_MeanSquare <> nil);
  {$ENDIF}
    @SDA_MeanSquareError := GetProcAddress(DLLHandle,'SDA_MeanSquareError');
  {$IFDEF WIN32}
    Assert(@SDA_MeanSquareError <> nil);
  {$ENDIF}
    @SDA_RootMeanSquare := GetProcAddress(DLLHandle,'SDA_RootMeanSquare');
  {$IFDEF WIN32}
    Assert(@SDA_RootMeanSquare <> nil);
  {$ENDIF}
    @SDA_Magnitude := GetProcAddress(DLLHandle,'SDA_Magnitude');
  {$IFDEF WIN32}
    Assert(@SDA_Magnitude <> nil);
  {$ENDIF}
    @SDA_MagnitudeSquared := GetProcAddress(DLLHandle,'SDA_MagnitudeSquared');
  {$IFDEF WIN32}
    Assert(@SDA_MagnitudeSquared <> nil);
  {$ENDIF}
    @SDS_Magnitude := GetProcAddress(DLLHandle,'SDS_Magnitude');
  {$IFDEF WIN32}
    Assert(@SDS_Magnitude <> nil);
  {$ENDIF}
    @SDS_MagnitudeSquared := GetProcAddress(DLLHandle,'SDS_MagnitudeSquared');
  {$IFDEF WIN32}
    Assert(@SDS_MagnitudeSquared <> nil);
  {$ENDIF}
    @SDS_Phase := GetProcAddress(DLLHandle,'SDS_Phase');
  {$IFDEF WIN32}
    Assert(@SDS_Phase <> nil);
  {$ENDIF}
    @SDA_PhaseWrapped := GetProcAddress(DLLHandle,'SDA_PhaseWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_PhaseWrapped <> nil);
  {$ENDIF}
    @SDA_PhaseUnWrapped := GetProcAddress(DLLHandle,'SDA_PhaseUnWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_PhaseUnWrapped <> nil);
  {$ENDIF}
    @SDA_MagnitudeAndPhaseWrapped := GetProcAddress(DLLHandle,'SDA_MagnitudeAndPhaseWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_MagnitudeAndPhaseWrapped <> nil);
  {$ENDIF}
    @SDA_MagnitudeAndPhaseUnWrapped := GetProcAddress(DLLHandle,'SDA_MagnitudeAndPhaseUnWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_MagnitudeAndPhaseUnWrapped <> nil);
  {$ENDIF}
    @SDA_MagnitudeSquaredAndPhaseWrapped := GetProcAddress(DLLHandle,'SDA_MagnitudeSquaredAndPhaseWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_MagnitudeSquaredAndPhaseWrapped <> nil);
  {$ENDIF}
    @SDA_MagnitudeSquaredAndPhaseUnWrapped := GetProcAddress(DLLHandle,'SDA_MagnitudeSquaredAndPhaseUnWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_MagnitudeSquaredAndPhaseUnWrapped <> nil);
  {$ENDIF}
    @SDA_PhaseWrap := GetProcAddress(DLLHandle,'SDA_PhaseWrap');
  {$IFDEF WIN32}
    Assert(@SDA_PhaseWrap <> nil);
  {$ENDIF}
    @SDA_PhaseUnWrap := GetProcAddress(DLLHandle,'SDA_PhaseUnWrap');
  {$IFDEF WIN32}
    Assert(@SDA_PhaseUnWrap <> nil);
  {$ENDIF}
    @SDS_Log2 := GetProcAddress(DLLHandle,'SDS_Log2');
  {$IFDEF WIN32}
    Assert(@SDS_Log2 <> nil);
  {$ENDIF}
    @SDA_Log2 := GetProcAddress(DLLHandle,'SDA_Log2');
  {$IFDEF WIN32}
    Assert(@SDA_Log2 <> nil);
  {$ENDIF}
    @SDS_LogN := GetProcAddress(DLLHandle,'SDS_LogN');
  {$IFDEF WIN32}
    Assert(@SDS_LogN <> nil);
  {$ENDIF}
    @SDA_LogN := GetProcAddress(DLLHandle,'SDA_LogN');
  {$IFDEF WIN32}
    Assert(@SDA_LogN <> nil);
  {$ENDIF}
    @SDA_LogDistribution := GetProcAddress(DLLHandle,'SDA_LogDistribution');
  {$IFDEF WIN32}
    Assert(@SDA_LogDistribution <> nil);
  {$ENDIF}
    @SDA_Copy := GetProcAddress(DLLHandle,'SDA_Copy');
  {$IFDEF WIN32}
    Assert(@SDA_Copy <> nil);
  {$ENDIF}
    @SDA_CopyWithStride := GetProcAddress(DLLHandle,'SDA_CopyWithStride');
  {$IFDEF WIN32}
    Assert(@SDA_CopyWithStride <> nil);
  {$ENDIF}
    @SIF_CopyWithOverlap := GetProcAddress(DLLHandle,'SIF_CopyWithOverlap');
  {$IFDEF WIN32}
    Assert(@SIF_CopyWithOverlap <> nil);
  {$ENDIF}
    @SDA_CopyWithOverlap := GetProcAddress(DLLHandle,'SDA_CopyWithOverlap');
  {$IFDEF WIN32}
    Assert(@SDA_CopyWithOverlap <> nil);
  {$ENDIF}
    @SIF_CopyWithIndex := GetProcAddress(DLLHandle,'SIF_CopyWithIndex');
  {$IFDEF WIN32}
    Assert(@SIF_CopyWithIndex <> nil);
  {$ENDIF}
    @SDA_CopyWithIndex := GetProcAddress(DLLHandle,'SDA_CopyWithIndex');
  {$IFDEF WIN32}
    Assert(@SDA_CopyWithIndex <> nil);
  {$ENDIF}
    @SDA_20Log10 := GetProcAddress(DLLHandle,'SDA_20Log10');
  {$IFDEF WIN32}
    Assert(@SDA_20Log10 <> nil);
  {$ENDIF}
    @SDA_10Log10 := GetProcAddress(DLLHandle,'SDA_10Log10');
  {$IFDEF WIN32}
    Assert(@SDA_10Log10 <> nil);
  {$ENDIF}
    @SDA_LogMagnitude := GetProcAddress(DLLHandle,'SDA_LogMagnitude');
  {$IFDEF WIN32}
    Assert(@SDA_LogMagnitude <> nil);
  {$ENDIF}
    @SDA_LogMagnitudeAndPhaseWrapped := GetProcAddress(DLLHandle,'SDA_LogMagnitudeAndPhaseWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_LogMagnitudeAndPhaseWrapped <> nil);
  {$ENDIF}
    @SDA_LogMagnitudeAndPhaseUnWrapped := GetProcAddress(DLLHandle,'SDA_LogMagnitudeAndPhaseUnWrapped');
  {$IFDEF WIN32}
    Assert(@SDA_LogMagnitudeAndPhaseUnWrapped <> nil);
  {$ENDIF}
    @SDA_Lengthen := GetProcAddress(DLLHandle,'SDA_Lengthen');
  {$IFDEF WIN32}
    Assert(@SDA_Lengthen <> nil);
  {$ENDIF}
    @SDA_Shorten := GetProcAddress(DLLHandle,'SDA_Shorten');
  {$IFDEF WIN32}
    Assert(@SDA_Shorten <> nil);
  {$ENDIF}
    @SIF_ReSize := GetProcAddress(DLLHandle,'SIF_ReSize');
  {$IFDEF WIN32}
    Assert(@SIF_ReSize <> nil);
  {$ENDIF}
    @SDA_ReSize := GetProcAddress(DLLHandle,'SDA_ReSize');
  {$IFDEF WIN32}
    Assert(@SDA_ReSize <> nil);
  {$ENDIF}
    @SDA_ReSizeInput := GetProcAddress(DLLHandle,'SDA_ReSizeInput');
  {$IFDEF WIN32}
    Assert(@SDA_ReSizeInput <> nil);
  {$ENDIF}
    @SDA_ReSizeOutput := GetProcAddress(DLLHandle,'SDA_ReSizeOutput');
  {$IFDEF WIN32}
    Assert(@SDA_ReSizeOutput <> nil);
  {$ENDIF}
    @SDA_Fill := GetProcAddress(DLLHandle,'SDA_Fill');
  {$IFDEF WIN32}
    Assert(@SDA_Fill <> nil);
  {$ENDIF}
    @SDA_Clear := GetProcAddress(DLLHandle,'SDA_Clear');
  {$IFDEF WIN32}
    Assert(@SDA_Clear <> nil);
  {$ENDIF}
    @SDA_Histogram := GetProcAddress(DLLHandle,'SDA_Histogram');
  {$IFDEF WIN32}
    Assert(@SDA_Histogram <> nil);
  {$ENDIF}
    @SDA_HistogramCumulative := GetProcAddress(DLLHandle,'SDA_HistogramCumulative');
  {$IFDEF WIN32}
    Assert(@SDA_HistogramCumulative <> nil);
  {$ENDIF}
    @SDA_HistogramExtended := GetProcAddress(DLLHandle,'SDA_HistogramExtended');
  {$IFDEF WIN32}
    Assert(@SDA_HistogramExtended <> nil);
  {$ENDIF}
    @SDA_HistogramExtendedCumulative := GetProcAddress(DLLHandle,'SDA_HistogramExtendedCumulative');
  {$IFDEF WIN32}
    Assert(@SDA_HistogramExtendedCumulative <> nil);
  {$ENDIF}
    @SIF_Histogram := GetProcAddress(DLLHandle,'SIF_Histogram');
  {$IFDEF WIN32}
    Assert(@SIF_Histogram <> nil);
  {$ENDIF}
    @SDA_HistogramEqualize := GetProcAddress(DLLHandle,'SDA_HistogramEqualize');
  {$IFDEF WIN32}
    Assert(@SDA_HistogramEqualize <> nil);
  {$ENDIF}
    @SDA_Quantize := GetProcAddress(DLLHandle,'SDA_Quantize');
  {$IFDEF WIN32}
    Assert(@SDA_Quantize <> nil);
  {$ENDIF}
    @SDS_Quantize := GetProcAddress(DLLHandle,'SDS_Quantize');
  {$IFDEF WIN32}
    Assert(@SDS_Quantize <> nil);
  {$ENDIF}
    @SDA_Quantize_N := GetProcAddress(DLLHandle,'SDA_Quantize_N');
  {$IFDEF WIN32}
    Assert(@SDA_Quantize_N <> nil);
  {$ENDIF}
    @SDS_Quantise_N := GetProcAddress(DLLHandle,'SDS_Quantise_N');
  {$IFDEF WIN32}
    Assert(@SDS_Quantise_N <> nil);
  {$ENDIF}
    @SDA_Abs := GetProcAddress(DLLHandle,'SDA_Abs');
  {$IFDEF WIN32}
    Assert(@SDA_Abs <> nil);
  {$ENDIF}
    @SDA_RealSpectralInverse := GetProcAddress(DLLHandle,'SDA_RealSpectralInverse');
  {$IFDEF WIN32}
    Assert(@SDA_RealSpectralInverse <> nil);
  {$ENDIF}
    @SDA_ComplexSpectralInverse := GetProcAddress(DLLHandle,'SDA_ComplexSpectralInverse');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexSpectralInverse <> nil);
  {$ENDIF}
    @SDA_FdInterpolate := GetProcAddress(DLLHandle,'SDA_FdInterpolate');
  {$IFDEF WIN32}
    Assert(@SDA_FdInterpolate <> nil);
  {$ENDIF}
    @SDA_FdInterpolate2 := GetProcAddress(DLLHandle,'SDA_FdInterpolate2');
  {$IFDEF WIN32}
    Assert(@SDA_FdInterpolate2 <> nil);
  {$ENDIF}
    @SDS_TdPitchShift := GetProcAddress(DLLHandle,'SDS_TdPitchShift');
  {$IFDEF WIN32}
    Assert(@SDS_TdPitchShift <> nil);
  {$ENDIF}
    @SDA_TdPitchShift := GetProcAddress(DLLHandle,'SDA_TdPitchShift');
  {$IFDEF WIN32}
    Assert(@SDA_TdPitchShift <> nil);
  {$ENDIF}
    @SDA_SortIndexed := GetProcAddress(DLLHandle,'SDA_SortIndexed');
  {$IFDEF WIN32}
    Assert(@SDA_SortIndexed <> nil);
  {$ENDIF}
    @SDS_CountOneBits := GetProcAddress(DLLHandle,'SDS_CountOneBits');
  {$IFDEF WIN32}
    Assert(@SDS_CountOneBits <> nil);
  {$ENDIF}
    @SDS_CountZeroBits := GetProcAddress(DLLHandle,'SDS_CountZeroBits');
  {$IFDEF WIN32}
    Assert(@SDS_CountZeroBits <> nil);
  {$ENDIF}
    @SDS_CountLeadingOneBits := GetProcAddress(DLLHandle,'SDS_CountLeadingOneBits');
  {$IFDEF WIN32}
    Assert(@SDS_CountLeadingOneBits <> nil);
  {$ENDIF}
    @SDS_CountLeadingZeroBits := GetProcAddress(DLLHandle,'SDS_CountLeadingZeroBits');
  {$IFDEF WIN32}
    Assert(@SDS_CountLeadingZeroBits <> nil);
  {$ENDIF}
    @SDA_Sign := GetProcAddress(DLLHandle,'SDA_Sign');
  {$IFDEF WIN32}
    Assert(@SDA_Sign <> nil);
  {$ENDIF}
    @SDA_Swap := GetProcAddress(DLLHandle,'SDA_Swap');
  {$IFDEF WIN32}
    Assert(@SDA_Swap <> nil);
  {$ENDIF}
    @SUF_ModuloIncrement := GetProcAddress(DLLHandle,'SUF_ModuloIncrement');
  {$IFDEF WIN32}
    Assert(@SUF_ModuloIncrement <> nil);
  {$ENDIF}
    @SUF_ModuloDecrement := GetProcAddress(DLLHandle,'SUF_ModuloDecrement');
  {$IFDEF WIN32}
    Assert(@SUF_ModuloDecrement <> nil);
  {$ENDIF}
    @SUF_IndexModuloIncrement := GetProcAddress(DLLHandle,'SUF_IndexModuloIncrement');
  {$IFDEF WIN32}
    Assert(@SUF_IndexModuloIncrement <> nil);
  {$ENDIF}
    @SUF_IndexModuloDecrement := GetProcAddress(DLLHandle,'SUF_IndexModuloDecrement');
  {$IFDEF WIN32}
    Assert(@SUF_IndexModuloDecrement <> nil);
  {$ENDIF}
    @SIF_DeGlitch := GetProcAddress(DLLHandle,'SIF_DeGlitch');
  {$IFDEF WIN32}
    Assert(@SIF_DeGlitch <> nil);
  {$ENDIF}
    @SDA_SigLibDataToFix := GetProcAddress(DLLHandle,'SDA_SigLibDataToFix');
  {$IFDEF WIN32}
    Assert(@SDA_SigLibDataToFix <> nil);
  {$ENDIF}
    @SDA_FixToSigLibData := GetProcAddress(DLLHandle,'SDA_FixToSigLibData');
  {$IFDEF WIN32}
    Assert(@SDA_FixToSigLibData <> nil);
  {$ENDIF}
    @SDA_SigLibDataToImageData := GetProcAddress(DLLHandle,'SDA_SigLibDataToImageData');
  {$IFDEF WIN32}
    Assert(@SDA_SigLibDataToImageData <> nil);
  {$ENDIF}
    @SDA_ImageDataToSigLibData := GetProcAddress(DLLHandle,'SDA_ImageDataToSigLibData');
  {$IFDEF WIN32}
    Assert(@SDA_ImageDataToSigLibData <> nil);
  {$ENDIF}
    @SDA_SigLibDataToFix16 := GetProcAddress(DLLHandle,'SDA_SigLibDataToFix16');
  {$IFDEF WIN32}
    Assert(@SDA_SigLibDataToFix16 <> nil);
  {$ENDIF}
    @SDA_Fix16ToSigLibData := GetProcAddress(DLLHandle,'SDA_Fix16ToSigLibData');
  {$IFDEF WIN32}
    Assert(@SDA_Fix16ToSigLibData <> nil);
  {$ENDIF}
    @SDA_SigLibDataToFix32 := GetProcAddress(DLLHandle,'SDA_SigLibDataToFix32');
  {$IFDEF WIN32}
    Assert(@SDA_SigLibDataToFix32 <> nil);
  {$ENDIF}
    @SDA_Fix32ToSigLibData := GetProcAddress(DLLHandle,'SDA_Fix32ToSigLibData');
  {$IFDEF WIN32}
    Assert(@SDA_Fix32ToSigLibData <> nil);
  {$ENDIF}
    @SDS_SigLibDataToQFormatInteger := GetProcAddress(DLLHandle,'SDS_SigLibDataToQFormatInteger');
  {$IFDEF WIN32}
    Assert(@SDS_SigLibDataToQFormatInteger <> nil);
  {$ENDIF}
    @SDS_QFormatIntegerToSigLibData := GetProcAddress(DLLHandle,'SDS_QFormatIntegerToSigLibData');
  {$IFDEF WIN32}
    Assert(@SDS_QFormatIntegerToSigLibData <> nil);
  {$ENDIF}
    @SDA_SigLibDataToQFormatInteger := GetProcAddress(DLLHandle,'SDA_SigLibDataToQFormatInteger');
  {$IFDEF WIN32}
    Assert(@SDA_SigLibDataToQFormatInteger <> nil);
  {$ENDIF}
    @SDA_QFormatIntegerToSigLibData := GetProcAddress(DLLHandle,'SDA_QFormatIntegerToSigLibData');
  {$IFDEF WIN32}
    Assert(@SDA_QFormatIntegerToSigLibData <> nil);
  {$ENDIF}
    @SDS_Pid := GetProcAddress(DLLHandle,'SDS_Pid');
  {$IFDEF WIN32}
    Assert(@SDS_Pid <> nil);
  {$ENDIF}
    @SDA_Pwm := GetProcAddress(DLLHandle,'SDA_Pwm');
  {$IFDEF WIN32}
    Assert(@SDA_Pwm <> nil);
  {$ENDIF}
    @SDA_ExtractOrder := GetProcAddress(DLLHandle,'SDA_ExtractOrder');
  {$IFDEF WIN32}
    Assert(@SDA_ExtractOrder <> nil);
  {$ENDIF}
    @SDA_Sum := GetProcAddress(DLLHandle,'SDA_Sum');
  {$IFDEF WIN32}
    Assert(@SDA_Sum <> nil);
  {$ENDIF}
    @SDA_AbsSum := GetProcAddress(DLLHandle,'SDA_AbsSum');
  {$IFDEF WIN32}
    Assert(@SDA_AbsSum <> nil);
  {$ENDIF}
    @SDA_SumOfSquares := GetProcAddress(DLLHandle,'SDA_SumOfSquares');
  {$IFDEF WIN32}
    Assert(@SDA_SumOfSquares <> nil);
  {$ENDIF}
    @SDA_Mean := GetProcAddress(DLLHandle,'SDA_Mean');
  {$IFDEF WIN32}
    Assert(@SDA_Mean <> nil);
  {$ENDIF}
    @SDA_AbsMean := GetProcAddress(DLLHandle,'SDA_AbsMean');
  {$IFDEF WIN32}
    Assert(@SDA_AbsMean <> nil);
  {$ENDIF}
    @SDA_SubtractMean := GetProcAddress(DLLHandle,'SDA_SubtractMean');
  {$IFDEF WIN32}
    Assert(@SDA_SubtractMean <> nil);
  {$ENDIF}
    @SDA_SubtractMax := GetProcAddress(DLLHandle,'SDA_SubtractMax');
  {$IFDEF WIN32}
    Assert(@SDA_SubtractMax <> nil);
  {$ENDIF}
    @SDA_SampleSd := GetProcAddress(DLLHandle,'SDA_SampleSd');
  {$IFDEF WIN32}
    Assert(@SDA_SampleSd <> nil);
  {$ENDIF}
    @SDA_PopulationSd := GetProcAddress(DLLHandle,'SDA_PopulationSd');
  {$IFDEF WIN32}
    Assert(@SDA_PopulationSd <> nil);
  {$ENDIF}
    @SDA_UnbiasedVariance := GetProcAddress(DLLHandle,'SDA_UnbiasedVariance');
  {$IFDEF WIN32}
    Assert(@SDA_UnbiasedVariance <> nil);
  {$ENDIF}
    @SDA_Median := GetProcAddress(DLLHandle,'SDA_Median');
  {$IFDEF WIN32}
    Assert(@SDA_Median <> nil);
  {$ENDIF}
    @SDA_LinraConstantCoeff := GetProcAddress(DLLHandle,'SDA_LinraConstantCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_LinraConstantCoeff <> nil);
  {$ENDIF}
    @SDA_LinraRegressionCoeff := GetProcAddress(DLLHandle,'SDA_LinraRegressionCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_LinraRegressionCoeff <> nil);
  {$ENDIF}
    @SDA_LinraCorrelationCoeff := GetProcAddress(DLLHandle,'SDA_LinraCorrelationCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_LinraCorrelationCoeff <> nil);
  {$ENDIF}
    @SDA_LinraEstimateX := GetProcAddress(DLLHandle,'SDA_LinraEstimateX');
  {$IFDEF WIN32}
    Assert(@SDA_LinraEstimateX <> nil);
  {$ENDIF}
    @SDA_LinraEstimateY := GetProcAddress(DLLHandle,'SDA_LinraEstimateY');
  {$IFDEF WIN32}
    Assert(@SDA_LinraEstimateY <> nil);
  {$ENDIF}
    @SDA_LograConstantCoeff := GetProcAddress(DLLHandle,'SDA_LograConstantCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_LograConstantCoeff <> nil);
  {$ENDIF}
    @SDA_LograRegressionCoeff := GetProcAddress(DLLHandle,'SDA_LograRegressionCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_LograRegressionCoeff <> nil);
  {$ENDIF}
    @SDA_LograCorrelationCoeff := GetProcAddress(DLLHandle,'SDA_LograCorrelationCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_LograCorrelationCoeff <> nil);
  {$ENDIF}
    @SDA_LograEstimateX := GetProcAddress(DLLHandle,'SDA_LograEstimateX');
  {$IFDEF WIN32}
    Assert(@SDA_LograEstimateX <> nil);
  {$ENDIF}
    @SDA_LograEstimateY := GetProcAddress(DLLHandle,'SDA_LograEstimateY');
  {$IFDEF WIN32}
    Assert(@SDA_LograEstimateY <> nil);
  {$ENDIF}
    @SDA_ExpraConstantCoeff := GetProcAddress(DLLHandle,'SDA_ExpraConstantCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_ExpraConstantCoeff <> nil);
  {$ENDIF}
    @SDA_ExpraRegressionCoeff := GetProcAddress(DLLHandle,'SDA_ExpraRegressionCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_ExpraRegressionCoeff <> nil);
  {$ENDIF}
    @SDA_ExpraCorrelationCoeff := GetProcAddress(DLLHandle,'SDA_ExpraCorrelationCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_ExpraCorrelationCoeff <> nil);
  {$ENDIF}
    @SDA_ExpraEstimateX := GetProcAddress(DLLHandle,'SDA_ExpraEstimateX');
  {$IFDEF WIN32}
    Assert(@SDA_ExpraEstimateX <> nil);
  {$ENDIF}
    @SDA_ExpraEstimateY := GetProcAddress(DLLHandle,'SDA_ExpraEstimateY');
  {$IFDEF WIN32}
    Assert(@SDA_ExpraEstimateY <> nil);
  {$ENDIF}
    @SDA_PowraConstantCoeff := GetProcAddress(DLLHandle,'SDA_PowraConstantCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_PowraConstantCoeff <> nil);
  {$ENDIF}
    @SDA_PowraRegressionCoeff := GetProcAddress(DLLHandle,'SDA_PowraRegressionCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_PowraRegressionCoeff <> nil);
  {$ENDIF}
    @SDA_PowraCorrelationCoeff := GetProcAddress(DLLHandle,'SDA_PowraCorrelationCoeff');
  {$IFDEF WIN32}
    Assert(@SDA_PowraCorrelationCoeff <> nil);
  {$ENDIF}
    @SDA_PowraEstimateX := GetProcAddress(DLLHandle,'SDA_PowraEstimateX');
  {$IFDEF WIN32}
    Assert(@SDA_PowraEstimateX <> nil);
  {$ENDIF}
    @SDA_PowraEstimateY := GetProcAddress(DLLHandle,'SDA_PowraEstimateY');
  {$IFDEF WIN32}
    Assert(@SDA_PowraEstimateY <> nil);
  {$ENDIF}
    @SDA_Detrend := GetProcAddress(DLLHandle,'SDA_Detrend');
  {$IFDEF WIN32}
    Assert(@SDA_Detrend <> nil);
  {$ENDIF}
    @SDA_ExtractTrend := GetProcAddress(DLLHandle,'SDA_ExtractTrend');
  {$IFDEF WIN32}
    Assert(@SDA_ExtractTrend <> nil);
  {$ENDIF}
    @SDA_Sin := GetProcAddress(DLLHandle,'SDA_Sin');
  {$IFDEF WIN32}
    Assert(@SDA_Sin <> nil);
  {$ENDIF}
    @SDA_Cos := GetProcAddress(DLLHandle,'SDA_Cos');
  {$IFDEF WIN32}
    Assert(@SDA_Cos <> nil);
  {$ENDIF}
    @SDA_Tan := GetProcAddress(DLLHandle,'SDA_Tan');
  {$IFDEF WIN32}
    Assert(@SDA_Tan <> nil);
  {$ENDIF}
    @SIF_FastSin := GetProcAddress(DLLHandle,'SIF_FastSin');
  {$IFDEF WIN32}
    Assert(@SIF_FastSin <> nil);
  {$ENDIF}
    @SDA_FastSin := GetProcAddress(DLLHandle,'SDA_FastSin');
  {$IFDEF WIN32}
    Assert(@SDA_FastSin <> nil);
  {$ENDIF}
    @SDS_FastSin := GetProcAddress(DLLHandle,'SDS_FastSin');
  {$IFDEF WIN32}
    Assert(@SDS_FastSin <> nil);
  {$ENDIF}
    @SIF_FastCos := GetProcAddress(DLLHandle,'SIF_FastCos');
  {$IFDEF WIN32}
    Assert(@SIF_FastCos <> nil);
  {$ENDIF}
    @SDA_FastCos := GetProcAddress(DLLHandle,'SDA_FastCos');
  {$IFDEF WIN32}
    Assert(@SDA_FastCos <> nil);
  {$ENDIF}
    @SDS_FastCos := GetProcAddress(DLLHandle,'SDS_FastCos');
  {$IFDEF WIN32}
    Assert(@SDS_FastCos <> nil);
  {$ENDIF}
    @SIF_FastSinCos := GetProcAddress(DLLHandle,'SIF_FastSinCos');
  {$IFDEF WIN32}
    Assert(@SIF_FastSinCos <> nil);
  {$ENDIF}
    @SDA_FastSinCos := GetProcAddress(DLLHandle,'SDA_FastSinCos');
  {$IFDEF WIN32}
    Assert(@SDA_FastSinCos <> nil);
  {$ENDIF}
    @SDS_FastSinCos := GetProcAddress(DLLHandle,'SDS_FastSinCos');
  {$IFDEF WIN32}
    Assert(@SDS_FastSinCos <> nil);
  {$ENDIF}
    @SIF_QuickSin := GetProcAddress(DLLHandle,'SIF_QuickSin');
  {$IFDEF WIN32}
    Assert(@SIF_QuickSin <> nil);
  {$ENDIF}
    @SDA_QuickSin := GetProcAddress(DLLHandle,'SDA_QuickSin');
  {$IFDEF WIN32}
    Assert(@SDA_QuickSin <> nil);
  {$ENDIF}
    @SDS_QuickSin := GetProcAddress(DLLHandle,'SDS_QuickSin');
  {$IFDEF WIN32}
    Assert(@SDS_QuickSin <> nil);
  {$ENDIF}
    @SIF_QuickCos := GetProcAddress(DLLHandle,'SIF_QuickCos');
  {$IFDEF WIN32}
    Assert(@SIF_QuickCos <> nil);
  {$ENDIF}
    @SDA_QuickCos := GetProcAddress(DLLHandle,'SDA_QuickCos');
  {$IFDEF WIN32}
    Assert(@SDA_QuickCos <> nil);
  {$ENDIF}
    @SDS_QuickCos := GetProcAddress(DLLHandle,'SDS_QuickCos');
  {$IFDEF WIN32}
    Assert(@SDS_QuickCos <> nil);
  {$ENDIF}
    @SIF_QuickSinCos := GetProcAddress(DLLHandle,'SIF_QuickSinCos');
  {$IFDEF WIN32}
    Assert(@SIF_QuickSinCos <> nil);
  {$ENDIF}
    @SDA_QuickSinCos := GetProcAddress(DLLHandle,'SDA_QuickSinCos');
  {$IFDEF WIN32}
    Assert(@SDA_QuickSinCos <> nil);
  {$ENDIF}
    @SDS_QuickSinCos := GetProcAddress(DLLHandle,'SDS_QuickSinCos');
  {$IFDEF WIN32}
    Assert(@SDS_QuickSinCos <> nil);
  {$ENDIF}
    @SIF_QuickTan := GetProcAddress(DLLHandle,'SIF_QuickTan');
  {$IFDEF WIN32}
    Assert(@SIF_QuickTan <> nil);
  {$ENDIF}
    @SDA_QuickTan := GetProcAddress(DLLHandle,'SDA_QuickTan');
  {$IFDEF WIN32}
    Assert(@SDA_QuickTan <> nil);
  {$ENDIF}
    @SDS_QuickTan := GetProcAddress(DLLHandle,'SDS_QuickTan');
  {$IFDEF WIN32}
    Assert(@SDS_QuickTan <> nil);
  {$ENDIF}
    @SDA_Sinc := GetProcAddress(DLLHandle,'SDA_Sinc');
  {$IFDEF WIN32}
    Assert(@SDA_Sinc <> nil);
  {$ENDIF}
    @SDS_Sinc := GetProcAddress(DLLHandle,'SDS_Sinc');
  {$IFDEF WIN32}
    Assert(@SDS_Sinc <> nil);
  {$ENDIF}
    @SIF_QuickSinc := GetProcAddress(DLLHandle,'SIF_QuickSinc');
  {$IFDEF WIN32}
    Assert(@SIF_QuickSinc <> nil);
  {$ENDIF}
    @SDA_QuickSinc := GetProcAddress(DLLHandle,'SDA_QuickSinc');
  {$IFDEF WIN32}
    Assert(@SDA_QuickSinc <> nil);
  {$ENDIF}
    @SDS_QuickSinc := GetProcAddress(DLLHandle,'SDS_QuickSinc');
  {$IFDEF WIN32}
    Assert(@SDS_QuickSinc <> nil);
  {$ENDIF}
    @SCV_Polar := GetProcAddress(DLLHandle,'SCV_Polar');
  {$IFDEF WIN32}
    Assert(@SCV_Polar <> nil);
  {$ENDIF}
    @SCV_Rectangular := GetProcAddress(DLLHandle,'SCV_Rectangular');
  {$IFDEF WIN32}
    Assert(@SCV_Rectangular <> nil);
  {$ENDIF}
    @SCV_PolarToRectangular := GetProcAddress(DLLHandle,'SCV_PolarToRectangular');
  {$IFDEF WIN32}
    Assert(@SCV_PolarToRectangular <> nil);
  {$ENDIF}
    @SCV_RectangularToPolar := GetProcAddress(DLLHandle,'SCV_RectangularToPolar');
  {$IFDEF WIN32}
    Assert(@SCV_RectangularToPolar <> nil);
  {$ENDIF}
    @SCV_Sqrt := GetProcAddress(DLLHandle,'SCV_Sqrt');
  {$IFDEF WIN32}
    Assert(@SCV_Sqrt <> nil);
  {$ENDIF}
    @SCV_Inverse := GetProcAddress(DLLHandle,'SCV_Inverse');
  {$IFDEF WIN32}
    Assert(@SCV_Inverse <> nil);
  {$ENDIF}
    @SCV_Conjugate := GetProcAddress(DLLHandle,'SCV_Conjugate');
  {$IFDEF WIN32}
    Assert(@SCV_Conjugate <> nil);
  {$ENDIF}
    @SCV_Magnitude := GetProcAddress(DLLHandle,'SCV_Magnitude');
  {$IFDEF WIN32}
    Assert(@SCV_Magnitude <> nil);
  {$ENDIF}
    @SCV_MagnitudeSquared := GetProcAddress(DLLHandle,'SCV_MagnitudeSquared');
  {$IFDEF WIN32}
    Assert(@SCV_MagnitudeSquared <> nil);
  {$ENDIF}
    @SCV_Phase := GetProcAddress(DLLHandle,'SCV_Phase');
  {$IFDEF WIN32}
    Assert(@SCV_Phase <> nil);
  {$ENDIF}
    @SCV_Multiply := GetProcAddress(DLLHandle,'SCV_Multiply');
  {$IFDEF WIN32}
    Assert(@SCV_Multiply <> nil);
  {$ENDIF}
    @SCV_Divide := GetProcAddress(DLLHandle,'SCV_Divide');
  {$IFDEF WIN32}
    Assert(@SCV_Divide <> nil);
  {$ENDIF}
    @SCV_Add := GetProcAddress(DLLHandle,'SCV_Add');
  {$IFDEF WIN32}
    Assert(@SCV_Add <> nil);
  {$ENDIF}
    @SCV_Subtract := GetProcAddress(DLLHandle,'SCV_Subtract');
  {$IFDEF WIN32}
    Assert(@SCV_Subtract <> nil);
  {$ENDIF}
    @SCV_Log := GetProcAddress(DLLHandle,'SCV_Log');
  {$IFDEF WIN32}
    Assert(@SCV_Log <> nil);
  {$ENDIF}
    @SCV_Exp := GetProcAddress(DLLHandle,'SCV_Exp');
  {$IFDEF WIN32}
    Assert(@SCV_Exp <> nil);
  {$ENDIF}
    @SCV_Expj := GetProcAddress(DLLHandle,'SCV_Expj');
  {$IFDEF WIN32}
    Assert(@SCV_Expj <> nil);
  {$ENDIF}
    @SCV_Pow := GetProcAddress(DLLHandle,'SCV_Pow');
  {$IFDEF WIN32}
    Assert(@SCV_Pow <> nil);
  {$ENDIF}
    @SCV_VectorAddScalar := GetProcAddress(DLLHandle,'SCV_VectorAddScalar');
  {$IFDEF WIN32}
    Assert(@SCV_VectorAddScalar <> nil);
  {$ENDIF}
    @SCV_VectorSubtractScalar := GetProcAddress(DLLHandle,'SCV_VectorSubtractScalar');
  {$IFDEF WIN32}
    Assert(@SCV_VectorSubtractScalar <> nil);
  {$ENDIF}
    @SCV_VectorMultiplyScalar := GetProcAddress(DLLHandle,'SCV_VectorMultiplyScalar');
  {$IFDEF WIN32}
    Assert(@SCV_VectorMultiplyScalar <> nil);
  {$ENDIF}
    @SCV_VectorDivideScalar := GetProcAddress(DLLHandle,'SCV_VectorDivideScalar');
  {$IFDEF WIN32}
    Assert(@SCV_VectorDivideScalar <> nil);
  {$ENDIF}
    @SCV_ScalarSubtractVector := GetProcAddress(DLLHandle,'SCV_ScalarSubtractVector');
  {$IFDEF WIN32}
    Assert(@SCV_ScalarSubtractVector <> nil);
  {$ENDIF}
    @SCV_Roots := GetProcAddress(DLLHandle,'SCV_Roots');
  {$IFDEF WIN32}
    Assert(@SCV_Roots <> nil);
  {$ENDIF}
    @SCV_Copy := GetProcAddress(DLLHandle,'SCV_Copy');
  {$IFDEF WIN32}
    Assert(@SCV_Copy <> nil);
  {$ENDIF}
    @SDA_CreateComplexRect := GetProcAddress(DLLHandle,'SDA_CreateComplexRect');
  {$IFDEF WIN32}
    Assert(@SDA_CreateComplexRect <> nil);
  {$ENDIF}
    @SDA_CreateComplexPolar := GetProcAddress(DLLHandle,'SDA_CreateComplexPolar');
  {$IFDEF WIN32}
    Assert(@SDA_CreateComplexPolar <> nil);
  {$ENDIF}
    @SDA_ExtractComplexRect := GetProcAddress(DLLHandle,'SDA_ExtractComplexRect');
  {$IFDEF WIN32}
    Assert(@SDA_ExtractComplexRect <> nil);
  {$ENDIF}
    @SDA_ExtractComplexPolar := GetProcAddress(DLLHandle,'SDA_ExtractComplexPolar');
  {$IFDEF WIN32}
    Assert(@SDA_ExtractComplexPolar <> nil);
  {$ENDIF}
    @SDA_ClearComplexRect := GetProcAddress(DLLHandle,'SDA_ClearComplexRect');
  {$IFDEF WIN32}
    Assert(@SDA_ClearComplexRect <> nil);
  {$ENDIF}
    @SDA_ClearComplexPolar := GetProcAddress(DLLHandle,'SDA_ClearComplexPolar');
  {$IFDEF WIN32}
    Assert(@SDA_ClearComplexPolar <> nil);
  {$ENDIF}
    @SDA_FillComplexRect := GetProcAddress(DLLHandle,'SDA_FillComplexRect');
  {$IFDEF WIN32}
    Assert(@SDA_FillComplexRect <> nil);
  {$ENDIF}
    @SDA_FillComplexPolar := GetProcAddress(DLLHandle,'SDA_FillComplexPolar');
  {$IFDEF WIN32}
    Assert(@SDA_FillComplexPolar <> nil);
  {$ENDIF}
    @SDA_ComplexRectangularToPolar := GetProcAddress(DLLHandle,'SDA_ComplexRectangularToPolar');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectangularToPolar <> nil);
  {$ENDIF}
    @SDA_ComplexPolarToRectangular := GetProcAddress(DLLHandle,'SDA_ComplexPolarToRectangular');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexPolarToRectangular <> nil);
  {$ENDIF}
    @SDA_RectangularToPolar := GetProcAddress(DLLHandle,'SDA_RectangularToPolar');
  {$IFDEF WIN32}
    Assert(@SDA_RectangularToPolar <> nil);
  {$ENDIF}
    @SDA_PolarToRectangular := GetProcAddress(DLLHandle,'SDA_PolarToRectangular');
  {$IFDEF WIN32}
    Assert(@SDA_PolarToRectangular <> nil);
  {$ENDIF}
    @SDA_ComplexRectSqrt := GetProcAddress(DLLHandle,'SDA_ComplexRectSqrt');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectSqrt <> nil);
  {$ENDIF}
    @SDA_ComplexRectInverse := GetProcAddress(DLLHandle,'SDA_ComplexRectInverse');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectInverse <> nil);
  {$ENDIF}
    @SDA_ComplexRectConjugate := GetProcAddress(DLLHandle,'SDA_ComplexRectConjugate');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectConjugate <> nil);
  {$ENDIF}
    @SDA_ComplexRectMagnitude := GetProcAddress(DLLHandle,'SDA_ComplexRectMagnitude');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectMagnitude <> nil);
  {$ENDIF}
    @SDA_ComplexRectMagnitudeSquared := GetProcAddress(DLLHandle,'SDA_ComplexRectMagnitudeSquared');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectMagnitudeSquared <> nil);
  {$ENDIF}
    @SDA_ComplexRectPhase := GetProcAddress(DLLHandle,'SDA_ComplexRectPhase');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectPhase <> nil);
  {$ENDIF}
    @SDA_ComplexRectMultiply := GetProcAddress(DLLHandle,'SDA_ComplexRectMultiply');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectMultiply <> nil);
  {$ENDIF}
    @SDA_ComplexRectDivide := GetProcAddress(DLLHandle,'SDA_ComplexRectDivide');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectDivide <> nil);
  {$ENDIF}
    @SDA_ComplexRectAdd := GetProcAddress(DLLHandle,'SDA_ComplexRectAdd');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectAdd <> nil);
  {$ENDIF}
    @SDA_ComplexRectSubtract := GetProcAddress(DLLHandle,'SDA_ComplexRectSubtract');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectSubtract <> nil);
  {$ENDIF}
    @SDA_ComplexRectLog := GetProcAddress(DLLHandle,'SDA_ComplexRectLog');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectLog <> nil);
  {$ENDIF}
    @SDA_ComplexRectExp := GetProcAddress(DLLHandle,'SDA_ComplexRectExp');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectExp <> nil);
  {$ENDIF}
    @SDA_ComplexRectExpj := GetProcAddress(DLLHandle,'SDA_ComplexRectExpj');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectExpj <> nil);
  {$ENDIF}
    @SDA_ComplexRectPow := GetProcAddress(DLLHandle,'SDA_ComplexRectPow');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectPow <> nil);
  {$ENDIF}
    @SDA_ComplexRectAddScalar := GetProcAddress(DLLHandle,'SDA_ComplexRectAddScalar');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectAddScalar <> nil);
  {$ENDIF}
    @SDA_ComplexRectSubtractScalar := GetProcAddress(DLLHandle,'SDA_ComplexRectSubtractScalar');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectSubtractScalar <> nil);
  {$ENDIF}
    @SDA_ComplexRectMultiplyScalar := GetProcAddress(DLLHandle,'SDA_ComplexRectMultiplyScalar');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectMultiplyScalar <> nil);
  {$ENDIF}
    @SDA_ComplexRectDivideScalar := GetProcAddress(DLLHandle,'SDA_ComplexRectDivideScalar');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectDivideScalar <> nil);
  {$ENDIF}
    @SDA_ComplexScalarSubtractRect := GetProcAddress(DLLHandle,'SDA_ComplexScalarSubtractRect');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexScalarSubtractRect <> nil);
  {$ENDIF}
    @SDA_ComplexRectLinearInterpolate := GetProcAddress(DLLHandle,'SDA_ComplexRectLinearInterpolate');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexRectLinearInterpolate <> nil);
  {$ENDIF}
    @SDA_ComplexPolarLinearInterpolate := GetProcAddress(DLLHandle,'SDA_ComplexPolarLinearInterpolate');
  {$IFDEF WIN32}
    Assert(@SDA_ComplexPolarLinearInterpolate <> nil);
  {$ENDIF}
    @SMX_Transpose := GetProcAddress(DLLHandle,'SMX_Transpose');
  {$IFDEF WIN32}
    Assert(@SMX_Transpose <> nil);
  {$ENDIF}
    @SMX_Multiply := GetProcAddress(DLLHandle,'SMX_Multiply');
  {$IFDEF WIN32}
    Assert(@SMX_Multiply <> nil);
  {$ENDIF}
    @SMX_CreateIdentity := GetProcAddress(DLLHandle,'SMX_CreateIdentity');
  {$IFDEF WIN32}
    Assert(@SMX_CreateIdentity <> nil);
  {$ENDIF}
    @SMX_Inverse2x2 := GetProcAddress(DLLHandle,'SMX_Inverse2x2');
  {$IFDEF WIN32}
    Assert(@SMX_Inverse2x2 <> nil);
  {$ENDIF}
    @SMX_ComplexInverse2x2 := GetProcAddress(DLLHandle,'SMX_ComplexInverse2x2');
  {$IFDEF WIN32}
    Assert(@SMX_ComplexInverse2x2 <> nil);
  {$ENDIF}
    @SMX_Inverse := GetProcAddress(DLLHandle,'SMX_Inverse');
  {$IFDEF WIN32}
    Assert(@SMX_Inverse <> nil);
  {$ENDIF}
    @SMX_LuDecompose := GetProcAddress(DLLHandle,'SMX_LuDecompose');
  {$IFDEF WIN32}
    Assert(@SMX_LuDecompose <> nil);
  {$ENDIF}
    @SMX_LuSolve := GetProcAddress(DLLHandle,'SMX_LuSolve');
  {$IFDEF WIN32}
    Assert(@SMX_LuSolve <> nil);
  {$ENDIF}
    @SMX_Determinant := GetProcAddress(DLLHandle,'SMX_Determinant');
  {$IFDEF WIN32}
    Assert(@SMX_Determinant <> nil);
  {$ENDIF}
    @SMX_LuDeterminant := GetProcAddress(DLLHandle,'SMX_LuDeterminant');
  {$IFDEF WIN32}
    Assert(@SMX_LuDeterminant <> nil);
  {$ENDIF}
    @SMX_RotateClockwise := GetProcAddress(DLLHandle,'SMX_RotateClockwise');
  {$IFDEF WIN32}
    Assert(@SMX_RotateClockwise <> nil);
  {$ENDIF}
    @SMX_RotateAntiClockwise := GetProcAddress(DLLHandle,'SMX_RotateAntiClockwise');
  {$IFDEF WIN32}
    Assert(@SMX_RotateAntiClockwise <> nil);
  {$ENDIF}
    @SMX_Reflect := GetProcAddress(DLLHandle,'SMX_Reflect');
  {$IFDEF WIN32}
    Assert(@SMX_Reflect <> nil);
  {$ENDIF}
    @SMX_Flip := GetProcAddress(DLLHandle,'SMX_Flip');
  {$IFDEF WIN32}
    Assert(@SMX_Flip <> nil);
  {$ENDIF}
    @SMX_InsertRow := GetProcAddress(DLLHandle,'SMX_InsertRow');
  {$IFDEF WIN32}
    Assert(@SMX_InsertRow <> nil);
  {$ENDIF}
    @SMX_ExtractRow := GetProcAddress(DLLHandle,'SMX_ExtractRow');
  {$IFDEF WIN32}
    Assert(@SMX_ExtractRow <> nil);
  {$ENDIF}
    @SMX_InsertColumn := GetProcAddress(DLLHandle,'SMX_InsertColumn');
  {$IFDEF WIN32}
    Assert(@SMX_InsertColumn <> nil);
  {$ENDIF}
    @SMX_ExtractColumn := GetProcAddress(DLLHandle,'SMX_ExtractColumn');
  {$IFDEF WIN32}
    Assert(@SMX_ExtractColumn <> nil);
  {$ENDIF}
    @SMX_InsertNewRow := GetProcAddress(DLLHandle,'SMX_InsertNewRow');
  {$IFDEF WIN32}
    Assert(@SMX_InsertNewRow <> nil);
  {$ENDIF}
    @SMX_DeleteOldRow := GetProcAddress(DLLHandle,'SMX_DeleteOldRow');
  {$IFDEF WIN32}
    Assert(@SMX_DeleteOldRow <> nil);
  {$ENDIF}
    @SMX_InsertNewColumn := GetProcAddress(DLLHandle,'SMX_InsertNewColumn');
  {$IFDEF WIN32}
    Assert(@SMX_InsertNewColumn <> nil);
  {$ENDIF}
    @SMX_DeleteOldColumn := GetProcAddress(DLLHandle,'SMX_DeleteOldColumn');
  {$IFDEF WIN32}
    Assert(@SMX_DeleteOldColumn <> nil);
  {$ENDIF}
    @SMX_InsertRegion := GetProcAddress(DLLHandle,'SMX_InsertRegion');
  {$IFDEF WIN32}
    Assert(@SMX_InsertRegion <> nil);
  {$ENDIF}
    @SMX_ExtractRegion := GetProcAddress(DLLHandle,'SMX_ExtractRegion');
  {$IFDEF WIN32}
    Assert(@SMX_ExtractRegion <> nil);
  {$ENDIF}
    @SMX_InsertDiagonal := GetProcAddress(DLLHandle,'SMX_InsertDiagonal');
  {$IFDEF WIN32}
    Assert(@SMX_InsertDiagonal <> nil);
  {$ENDIF}
    @SMX_ExtractDiagonal := GetProcAddress(DLLHandle,'SMX_ExtractDiagonal');
  {$IFDEF WIN32}
    Assert(@SMX_ExtractDiagonal <> nil);
  {$ENDIF}
    @SMX_SwapRows := GetProcAddress(DLLHandle,'SMX_SwapRows');
  {$IFDEF WIN32}
    Assert(@SMX_SwapRows <> nil);
  {$ENDIF}
    @SMX_SwapColumns := GetProcAddress(DLLHandle,'SMX_SwapColumns');
  {$IFDEF WIN32}
    Assert(@SMX_SwapColumns <> nil);
  {$ENDIF}
    @SMX_Sum := GetProcAddress(DLLHandle,'SMX_Sum');
  {$IFDEF WIN32}
    Assert(@SMX_Sum <> nil);
  {$ENDIF}
    @SMX_ShuffleColumns := GetProcAddress(DLLHandle,'SMX_ShuffleColumns');
  {$IFDEF WIN32}
    Assert(@SMX_ShuffleColumns <> nil);
  {$ENDIF}
    @SMX_ShuffleRows := GetProcAddress(DLLHandle,'SMX_ShuffleRows');
  {$IFDEF WIN32}
    Assert(@SMX_ShuffleRows <> nil);
  {$ENDIF}
    @SMX_ExtractCategoricalColumn := GetProcAddress(DLLHandle,'SMX_ExtractCategoricalColumn');
  {$IFDEF WIN32}
    Assert(@SMX_ExtractCategoricalColumn <> nil);
  {$ENDIF}
    @+, := GetProcAddress(DLLHandle,'+,');
  {$IFDEF WIN32}
    Assert(@+, <> nil);
  {$ENDIF}
    @-, := GetProcAddress(DLLHandle,'-,');
  {$IFDEF WIN32}
    Assert(@-, <> nil);
  {$ENDIF}
    @, := GetProcAddress(DLLHandle,',');
  {$IFDEF WIN32}
    Assert(@, <> nil);
  {$ENDIF}
    @OPtr := GetProcAddress(DLLHandle,'OPtr');
  {$IFDEF WIN32}
    Assert(@OPtr <> nil);
  {$ENDIF}
    @SDA_TwoLayer2CategoryNetworkFit := GetProcAddress(DLLHandle,'SDA_TwoLayer2CategoryNetworkFit');
  {$IFDEF WIN32}
    Assert(@SDA_TwoLayer2CategoryNetworkFit <> nil);
  {$ENDIF}
    @SDA_TwoLayer2CategoryNetworkPredict := GetProcAddress(DLLHandle,'SDA_TwoLayer2CategoryNetworkPredict');
  {$IFDEF WIN32}
    Assert(@SDA_TwoLayer2CategoryNetworkPredict <> nil);
  {$ENDIF}
    @SDA_TwoLayerNCategoryNetworkFit := GetProcAddress(DLLHandle,'SDA_TwoLayerNCategoryNetworkFit');
  {$IFDEF WIN32}
    Assert(@SDA_TwoLayerNCategoryNetworkFit <> nil);
  {$ENDIF}
    @SDA_TwoLayerNCategoryNetworkPredict := GetProcAddress(DLLHandle,'SDA_TwoLayerNCategoryNetworkPredict');
  {$IFDEF WIN32}
    Assert(@SDA_TwoLayerNCategoryNetworkPredict <> nil);
  {$ENDIF}
    @SDS_ActivationReLU := GetProcAddress(DLLHandle,'SDS_ActivationReLU');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationReLU <> nil);
  {$ENDIF}
    @SDA_ActivationReLU := GetProcAddress(DLLHandle,'SDA_ActivationReLU');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationReLU <> nil);
  {$ENDIF}
    @SDS_ActivationReLUDerivative := GetProcAddress(DLLHandle,'SDS_ActivationReLUDerivative');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationReLUDerivative <> nil);
  {$ENDIF}
    @SDA_ActivationReLUDerivative := GetProcAddress(DLLHandle,'SDA_ActivationReLUDerivative');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationReLUDerivative <> nil);
  {$ENDIF}
    @SDS_ActivationLeakyReLU := GetProcAddress(DLLHandle,'SDS_ActivationLeakyReLU');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationLeakyReLU <> nil);
  {$ENDIF}
    @SDA_ActivationLeakyReLU := GetProcAddress(DLLHandle,'SDA_ActivationLeakyReLU');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationLeakyReLU <> nil);
  {$ENDIF}
    @SDS_ActivationLeakyReLUDerivative := GetProcAddress(DLLHandle,'SDS_ActivationLeakyReLUDerivative');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationLeakyReLUDerivative <> nil);
  {$ENDIF}
    @SDA_ActivationLeakyReLUDerivative := GetProcAddress(DLLHandle,'SDA_ActivationLeakyReLUDerivative');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationLeakyReLUDerivative <> nil);
  {$ENDIF}
    @SDS_ActivationLogistic := GetProcAddress(DLLHandle,'SDS_ActivationLogistic');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationLogistic <> nil);
  {$ENDIF}
    @SDA_ActivationLogistic := GetProcAddress(DLLHandle,'SDA_ActivationLogistic');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationLogistic <> nil);
  {$ENDIF}
    @SDS_ActivationLogisticDerivative := GetProcAddress(DLLHandle,'SDS_ActivationLogisticDerivative');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationLogisticDerivative <> nil);
  {$ENDIF}
    @SDA_ActivationLogisticDerivative := GetProcAddress(DLLHandle,'SDA_ActivationLogisticDerivative');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationLogisticDerivative <> nil);
  {$ENDIF}
    @SDS_ActivationTanH := GetProcAddress(DLLHandle,'SDS_ActivationTanH');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationTanH <> nil);
  {$ENDIF}
    @SDA_ActivationTanH := GetProcAddress(DLLHandle,'SDA_ActivationTanH');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationTanH <> nil);
  {$ENDIF}
    @SDS_ActivationTanHDerivative := GetProcAddress(DLLHandle,'SDS_ActivationTanHDerivative');
  {$IFDEF WIN32}
    Assert(@SDS_ActivationTanHDerivative <> nil);
  {$ENDIF}
    @SDA_ActivationTanHDerivative := GetProcAddress(DLLHandle,'SDA_ActivationTanHDerivative');
  {$IFDEF WIN32}
    Assert(@SDA_ActivationTanHDerivative <> nil);
  {$ENDIF}
  end
  else
  begin
    DLLLoaded := False;
    { Error: SIGLIB.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.

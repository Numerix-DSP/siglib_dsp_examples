/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package siglib_wrap;

public class siglib_wrap implements siglib_wrapConstants {
  public static SWIGTYPE_p_double new_doubleArray(int nelements) {
    long cPtr = siglib_wrapJNI.new_doubleArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void delete_doubleArray(SWIGTYPE_p_double ary) {
    siglib_wrapJNI.delete_doubleArray(SWIGTYPE_p_double.getCPtr(ary));
  }

  public static double doubleArray_getitem(SWIGTYPE_p_double ary, int index) {
    return siglib_wrapJNI.doubleArray_getitem(SWIGTYPE_p_double.getCPtr(ary), index);
  }

  public static void doubleArray_setitem(SWIGTYPE_p_double ary, int index, double value) {
    siglib_wrapJNI.doubleArray_setitem(SWIGTYPE_p_double.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_long new_longArray(int nelements) {
    long cPtr = siglib_wrapJNI.new_longArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_long(cPtr, false);
  }

  public static void delete_longArray(SWIGTYPE_p_long ary) {
    siglib_wrapJNI.delete_longArray(SWIGTYPE_p_long.getCPtr(ary));
  }

  public static int longArray_getitem(SWIGTYPE_p_long ary, int index) {
    return siglib_wrapJNI.longArray_getitem(SWIGTYPE_p_long.getCPtr(ary), index);
  }

  public static void longArray_setitem(SWIGTYPE_p_long ary, int index, int value) {
    siglib_wrapJNI.longArray_setitem(SWIGTYPE_p_long.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_double new_SLData_tArray(int nelements) {
    long cPtr = siglib_wrapJNI.new_SLData_tArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void delete_SLData_tArray(SWIGTYPE_p_double ary) {
    siglib_wrapJNI.delete_SLData_tArray(SWIGTYPE_p_double.getCPtr(ary));
  }

  public static double SLData_tArray_getitem(SWIGTYPE_p_double ary, int index) {
    return siglib_wrapJNI.SLData_tArray_getitem(SWIGTYPE_p_double.getCPtr(ary), index);
  }

  public static void SLData_tArray_setitem(SWIGTYPE_p_double ary, int index, double value) {
    siglib_wrapJNI.SLData_tArray_setitem(SWIGTYPE_p_double.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_int new_SLFixData_tArray(int nelements) {
    long cPtr = siglib_wrapJNI.new_SLFixData_tArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_SLFixData_tArray(SWIGTYPE_p_int ary) {
    siglib_wrapJNI.delete_SLFixData_tArray(SWIGTYPE_p_int.getCPtr(ary));
  }

  public static int SLFixData_tArray_getitem(SWIGTYPE_p_int ary, int index) {
    return siglib_wrapJNI.SLFixData_tArray_getitem(SWIGTYPE_p_int.getCPtr(ary), index);
  }

  public static void SLFixData_tArray_setitem(SWIGTYPE_p_int ary, int index, int value) {
    siglib_wrapJNI.SLFixData_tArray_setitem(SWIGTYPE_p_int.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_int new_SLArrayIndex_tArray(int nelements) {
    long cPtr = siglib_wrapJNI.new_SLArrayIndex_tArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_SLArrayIndex_tArray(SWIGTYPE_p_int ary) {
    siglib_wrapJNI.delete_SLArrayIndex_tArray(SWIGTYPE_p_int.getCPtr(ary));
  }

  public static int SLArrayIndex_tArray_getitem(SWIGTYPE_p_int ary, int index) {
    return siglib_wrapJNI.SLArrayIndex_tArray_getitem(SWIGTYPE_p_int.getCPtr(ary), index);
  }

  public static void SLArrayIndex_tArray_setitem(SWIGTYPE_p_int ary, int index, int value) {
    siglib_wrapJNI.SLArrayIndex_tArray_setitem(SWIGTYPE_p_int.getCPtr(ary), index, value);
  }

  public static double SUF_SiglibVersion() {
    return siglib_wrapJNI.SUF_SiglibVersion();
  }

  public static void SUF_PrintArray(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SUF_PrintArray(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SUF_PrintComplexArray(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SUF_PrintComplexArray(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SUF_PrintMatrix(SWIGTYPE_p_double arg0, int arg1, int arg2) {
    siglib_wrapJNI.SUF_PrintMatrix(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SUF_PrintPolar(SLComplexPolar_s arg0) {
    siglib_wrapJNI.SUF_PrintPolar(SLComplexPolar_s.getCPtr(arg0), arg0);
  }

  public static void SUF_PrintRectangular(SLComplexRect_s arg0) {
    siglib_wrapJNI.SUF_PrintRectangular(SLComplexRect_s.getCPtr(arg0), arg0);
  }

  public static void SUF_PrintIIRCoefficients(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SUF_PrintIIRCoefficients(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SUF_ClearDebugfprintf() {
    return siglib_wrapJNI.SUF_ClearDebugfprintf();
  }

  public static int SUF_Debugfprintf(String ArgumentType) {
    return siglib_wrapJNI.SUF_Debugfprintf(ArgumentType);
  }

  public static int SUF_Debugvfprintf(String format, SWIGTYPE_p_va_list argpointer) {
    return siglib_wrapJNI.SUF_Debugvfprintf(format, SWIGTYPE_p_va_list.getCPtr(argpointer));
  }

  public static int SUF_DebugPrintArray(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SUF_DebugPrintArray(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SUF_DebugPrintComplexArray(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SUF_DebugPrintComplexArray(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SUF_DebugPrintMatrix(SWIGTYPE_p_double arg0, int arg1, int arg2) {
    return siglib_wrapJNI.SUF_DebugPrintMatrix(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static int SUF_DebugPrintPolar(SLComplexPolar_s arg0) {
    return siglib_wrapJNI.SUF_DebugPrintPolar(SLComplexPolar_s.getCPtr(arg0), arg0);
  }

  public static int SUF_DebugPrintRectangular(SLComplexRect_s arg0) {
    return siglib_wrapJNI.SUF_DebugPrintRectangular(SLComplexRect_s.getCPtr(arg0), arg0);
  }

  public static int SUF_DebugPrintIIRCoefficients(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SUF_DebugPrintIIRCoefficients(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SUF_DebugPrintCount(String String) {
    return siglib_wrapJNI.SUF_DebugPrintCount(String);
  }

  public static String SUF_StrError(int ErrNo) {
    return siglib_wrapJNI.SUF_StrError(ErrNo);
  }

  public static void SIF_Fft(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_Fft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SDA_Rfft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_Rfft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static void SDA_Cfft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_Cfft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static void SDA_Cifft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_Cifft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static void SDA_BitReverseReorder(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SDA_BitReverseReorder(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_IndexBitReverseReorder(SWIGTYPE_p_int arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SDA_IndexBitReverseReorder(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SIF_FastBitReverseReorder(SWIGTYPE_p_int arg0, int arg1) {
    siglib_wrapJNI.SIF_FastBitReverseReorder(SWIGTYPE_p_int.getCPtr(arg0), arg1);
  }

  public static void SDA_RealRealCepstrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_RealRealCepstrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static void SDA_RealComplexCepstrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_RealComplexCepstrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static void SDA_ComplexComplexCepstrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_ComplexComplexCepstrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, arg7);
  }

  public static void SIF_FftTone(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_FftTone(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SDA_RfftTone(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_RfftTone(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), arg7, arg8);
  }

  public static int SIF_ZoomFft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_int arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_double arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, int arg16, int arg17, int arg18, int arg19) {
    return siglib_wrapJNI.SIF_ZoomFft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), arg16, arg17, arg18, arg19);
  }

  public static void SDA_ZoomFft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, double arg10, int arg11, int arg12, int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_double arg15, SWIGTYPE_p_double arg16, SWIGTYPE_p_int arg17, SWIGTYPE_p_int arg18, SWIGTYPE_p_int arg19, SWIGTYPE_p_int arg20, SWIGTYPE_p_double arg21, SWIGTYPE_p_double arg22, SWIGTYPE_p_int arg23, int arg24, int arg25, int arg26, int arg27, int arg28, int arg29, int arg30) {
    siglib_wrapJNI.SDA_ZoomFft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, arg12, arg13, SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_double.getCPtr(arg15), SWIGTYPE_p_double.getCPtr(arg16), SWIGTYPE_p_int.getCPtr(arg17), SWIGTYPE_p_int.getCPtr(arg18), SWIGTYPE_p_int.getCPtr(arg19), SWIGTYPE_p_int.getCPtr(arg20), SWIGTYPE_p_double.getCPtr(arg21), SWIGTYPE_p_double.getCPtr(arg22), SWIGTYPE_p_int.getCPtr(arg23), arg24, arg25, arg26, arg27, arg28, arg29, arg30);
  }

  public static void SIF_ZoomFftSimple(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9, int arg10, int arg11) {
    siglib_wrapJNI.SIF_ZoomFftSimple(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, arg10, arg11);
  }

  public static void SDA_ZoomFftSimple(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, double arg10, int arg11, int arg12, int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, int arg16, int arg17, int arg18) {
    siglib_wrapJNI.SDA_ZoomFftSimple(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, arg12, arg13, SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), arg16, arg17, arg18);
  }

  public static void SIF_FdHilbert(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_FdHilbert(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_FdHilbert(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_FdHilbert(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6, arg7);
  }

  public static void SIF_FdAnalytic(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_FdAnalytic(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_FdAnalytic(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_FdAnalytic(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6, arg7);
  }

  public static void SDA_InstantFreq(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_InstantFreq(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Rft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Rft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Rift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Rift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Cft(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_Cft(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_Cift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_Cift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_FftShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_FftShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_CfftShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_CfftShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_FftExtend(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_FftExtend(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_CfftExtend(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_CfftExtend(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_FftArb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_SLArbitraryFFT_t arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, int arg13) {
    siglib_wrapJNI.SIF_FftArb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_SLArbitraryFFT_t.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13);
  }

  public static int SUF_FftArbAllocLength(int arg0) {
    return siglib_wrapJNI.SUF_FftArbAllocLength(arg0);
  }

  public static void SDA_RfftArb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, SLArbitraryFFT_t arg13, int arg14, int arg15, double arg16, double arg17, int arg18) {
    siglib_wrapJNI.SDA_RfftArb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), arg13.swigValue(), arg14, arg15, arg16, arg17, arg18);
  }

  public static void SDA_CfftArb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_int arg13, SLArbitraryFFT_t arg14, int arg15, int arg16, double arg17, double arg18, int arg19) {
    siglib_wrapJNI.SDA_CfftArb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_int.getCPtr(arg13), arg14.swigValue(), arg15, arg16, arg17, arg18, arg19);
  }

  public static void SDA_CifftArb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_int arg13, SLArbitraryFFT_t arg14, int arg15, int arg16, int arg17) {
    siglib_wrapJNI.SDA_CifftArb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_int.getCPtr(arg13), arg14.swigValue(), arg15, arg16, arg17);
  }

  public static void SIF_FastAutoCrossPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_FastAutoCrossPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_FastAutoPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5, double arg6) {
    siglib_wrapJNI.SDA_FastAutoPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_FastCrossPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, int arg7, double arg8) {
    siglib_wrapJNI.SDA_FastCrossPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, arg7, arg8);
  }

  public static void SIF_ArbAutoCrossPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_SLArbitraryFFT_t arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, int arg13) {
    siglib_wrapJNI.SIF_ArbAutoCrossPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_SLArbitraryFFT_t.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13);
  }

  public static void SDA_ArbAutoPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SLArbitraryFFT_t arg12, int arg13, int arg14, double arg15, double arg16, int arg17) {
    siglib_wrapJNI.SDA_ArbAutoPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), arg12.swigValue(), arg13, arg14, arg15, arg16, arg17);
  }

  public static void SDA_ArbCrossPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_int arg13, SLArbitraryFFT_t arg14, int arg15, int arg16, double arg17, double arg18, int arg19) {
    siglib_wrapJNI.SDA_ArbCrossPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_int.getCPtr(arg13), arg14.swigValue(), arg15, arg16, arg17, arg18, arg19);
  }

  public static int SIF_WelchPowerSpectrum(SWIGTYPE_p_int arg0, SWIGTYPE_p_double arg1, SLWindow_t arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, int arg7, SWIGTYPE_p_double arg8, int arg9) {
    return siglib_wrapJNI.SIF_WelchPowerSpectrum(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2.swigValue(), arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), arg7, SWIGTYPE_p_double.getCPtr(arg8), arg9);
  }

  public static void SDA_WelchRealPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, int arg10, int arg11, double arg12, int arg13, double arg14, int arg15) {
    siglib_wrapJNI.SDA_WelchRealPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, arg12, arg13, arg14, arg15);
  }

  public static void SDA_WelchComplexPowerSpectrum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, int arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, int arg12, int arg13, double arg14, int arg15, double arg16, int arg17) {
    siglib_wrapJNI.SDA_WelchComplexPowerSpectrum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), arg8, SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), arg12, arg13, arg14, arg15, arg16, arg17);
  }

  public static void SIF_MagnitudeSquaredCoherence(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_MagnitudeSquaredCoherence(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_MagnitudeSquaredCoherence(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, int arg10, int arg11, double arg12) {
    siglib_wrapJNI.SDA_MagnitudeSquaredCoherence(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, arg12);
  }

  public static void SIF_FirOverlapAdd(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, int arg7, int arg8, int arg9) {
    siglib_wrapJNI.SIF_FirOverlapAdd(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), arg7, arg8, arg9);
  }

  public static void SDA_FirOverlapAdd(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, double arg8, int arg9, int arg10, int arg11, int arg12) {
    siglib_wrapJNI.SDA_FirOverlapAdd(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), arg8, arg9, arg10, arg11, arg12);
  }

  public static void SIF_FirOverlapSave(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, int arg7, int arg8, int arg9) {
    siglib_wrapJNI.SIF_FirOverlapSave(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), arg7, arg8, arg9);
  }

  public static void SDA_FirOverlapSave(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, double arg8, int arg9, int arg10, int arg11, int arg12) {
    siglib_wrapJNI.SDA_FirOverlapSave(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), arg8, arg9, arg10, arg11, arg12);
  }

  public static void SIF_FftConvolvePre(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6, int arg7) {
    siglib_wrapJNI.SIF_FftConvolvePre(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6, arg7);
  }

  public static void SDA_FftConvolvePre(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8, int arg9, int arg10, double arg11) {
    siglib_wrapJNI.SDA_FftConvolvePre(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8, arg9, arg10, arg11);
  }

  public static void SDA_FftConvolveArb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8, int arg9, int arg10, double arg11) {
    siglib_wrapJNI.SDA_FftConvolveArb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8, arg9, arg10, arg11);
  }

  public static void SIF_FftCorrelatePre(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6, int arg7) {
    siglib_wrapJNI.SIF_FftCorrelatePre(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6, arg7);
  }

  public static void SDA_FftCorrelatePre(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8, int arg9, int arg10, double arg11) {
    siglib_wrapJNI.SDA_FftCorrelatePre(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8, arg9, arg10, arg11);
  }

  public static void SDA_FftCorrelateArb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8, int arg9, int arg10, double arg11) {
    siglib_wrapJNI.SDA_FftCorrelateArb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8, arg9, arg10, arg11);
  }

  public static void SIF_Czt(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, double arg8, double arg9, double arg10, double arg11, double arg12, int arg13, int arg14, int arg15, int arg16) {
    siglib_wrapJNI.SIF_Czt(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
  }

  public static void SIF_Awn(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, SLComplexRect_s arg4, int arg5) {
    siglib_wrapJNI.SIF_Awn(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, SLComplexRect_s.getCPtr(arg4), arg4, arg5);
  }

  public static void SIF_Vl(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SIF_Vl(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6);
  }

  public static void SIF_Wm(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, int arg4) {
    siglib_wrapJNI.SIF_Wm(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4);
  }

  public static int SIF_Window(SWIGTYPE_p_double arg0, SLWindow_t arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SIF_Window(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2, arg3);
  }

  public static int SIF_TableTopWindow(SWIGTYPE_p_double arg0, SLWindow_t arg1, double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SIF_TableTopWindow(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2, arg3, arg4);
  }

  public static void SDA_Window(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Window(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_ComplexWindow(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_ComplexWindow(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static double SDA_WindowInverseCoherentGain(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_WindowInverseCoherentGain(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDS_I0Bessel(double arg0) {
    return siglib_wrapJNI.SDS_I0Bessel(arg0);
  }

  public static void SIF_Fir(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_Fir(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static double SDS_Fir(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_Fir(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SDA_Fir(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_Fir(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static void SDS_FirAddSample(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SDS_FirAddSample(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_FirAddSamples(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_FirAddSamples(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4);
  }

  public static void SIF_Comb(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_Comb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static double SDS_Comb(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, int arg4) {
    return siglib_wrapJNI.SDS_Comb(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_Comb(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_Comb(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6);
  }

  public static void SIF_FirComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SIF_FirComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDS_FirComplex(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9) {
    siglib_wrapJNI.SDS_FirComplex(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9);
  }

  public static void SDA_FirComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9, int arg10) {
    siglib_wrapJNI.SDA_FirComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, arg10);
  }

  public static void SIF_FirWithStore(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_FirWithStore(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDS_FirWithStore(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    return siglib_wrapJNI.SDS_FirWithStore(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_FirWithStore(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_FirWithStore(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_FirComplexWithStore(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_FirComplexWithStore(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDS_FirComplexWithStore(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, int arg8) {
    siglib_wrapJNI.SDS_FirComplexWithStore(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), arg8);
  }

  public static void SDA_FirComplexWithStore(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, int arg8, int arg9) {
    siglib_wrapJNI.SDA_FirComplexWithStore(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), arg8, arg9);
  }

  public static void SDS_FirWithStoreAddSample(double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDS_FirWithStoreAddSample(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_FirWithStoreAddSamples(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_FirWithStoreAddSamples(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_FirExtendedArray(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4) {
    siglib_wrapJNI.SIF_FirExtendedArray(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static double SDS_FirExtendedArray(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_FirExtendedArray(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SDA_FirExtendedArray(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_FirExtendedArray(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static void SIF_FirComplexExtendedArray(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7) {
    siglib_wrapJNI.SIF_FirComplexExtendedArray(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7);
  }

  public static void SDS_FirComplexExtendedArray(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9) {
    siglib_wrapJNI.SDS_FirComplexExtendedArray(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9);
  }

  public static void SDA_FirComplexExtendedArray(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9, int arg10) {
    siglib_wrapJNI.SDA_FirComplexExtendedArray(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, arg10);
  }

  public static void SDS_FirExtendedArrayAddSample(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SDS_FirExtendedArrayAddSample(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_FirExtendedArrayAddSamples(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_FirExtendedArrayAddSamples(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4);
  }

  public static int SIF_FirLowPassFilter(SWIGTYPE_p_double arg0, double arg1, SLWindow_t arg2, int arg3) {
    return siglib_wrapJNI.SIF_FirLowPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2.swigValue(), arg3);
  }

  public static int SIF_FirHighPassFilter(SWIGTYPE_p_double arg0, double arg1, SLWindow_t arg2, int arg3) {
    return siglib_wrapJNI.SIF_FirHighPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2.swigValue(), arg3);
  }

  public static int SIF_FirBandPassFilter(SWIGTYPE_p_double arg0, double arg1, double arg2, SLWindow_t arg3, int arg4) {
    return siglib_wrapJNI.SIF_FirBandPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3.swigValue(), arg4);
  }

  public static void SIF_FirLowPassFilterWindow(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_FirLowPassFilterWindow(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SIF_FirHighPassFilterWindow(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_FirHighPassFilterWindow(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SIF_FirBandPassFilterWindow(SWIGTYPE_p_double arg0, double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SIF_FirBandPassFilterWindow(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static int SUF_FirKaiserApproximation(double arg0, double arg1, double arg2, double arg3, double arg4) {
    return siglib_wrapJNI.SUF_FirKaiserApproximation(arg0, arg1, arg2, arg3, arg4);
  }

  public static void SIF_FirMatchedFilter(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_FirMatchedFilter(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_FirFilterInverseCoherentGain(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_FirFilterInverseCoherentGain(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SIF_TappedDelayLine(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_TappedDelayLine(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static double SDS_TappedDelayLine(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, int arg5, int arg6) {
    return siglib_wrapJNI.SDS_TappedDelayLine(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6);
  }

  public static void SDA_TappedDelayLine(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_TappedDelayLine(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, arg8);
  }

  public static void SIF_TappedDelayLineComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SIF_TappedDelayLineComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDS_TappedDelayLineComplex(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10, int arg11) {
    siglib_wrapJNI.SDS_TappedDelayLineComplex(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10, arg11);
  }

  public static void SDA_TappedDelayLineComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10, int arg11, int arg12) {
    siglib_wrapJNI.SDA_TappedDelayLineComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10, arg11, arg12);
  }

  public static void SIF_TappedDelayLineIQ(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SIF_TappedDelayLineIQ(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDS_TappedDelayLineIQ(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10, int arg11) {
    siglib_wrapJNI.SDS_TappedDelayLineIQ(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10, arg11);
  }

  public static void SDA_TappedDelayLineIQ(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10, int arg11, int arg12) {
    siglib_wrapJNI.SDA_TappedDelayLineIQ(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10, arg11, arg12);
  }

  public static void SIF_FirPolyPhaseGenerate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SIF_FirPolyPhaseGenerate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_Iir(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_Iir(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDS_Iir(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    return siglib_wrapJNI.SDS_Iir(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Iir(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_Iir(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static double SDS_IirMac(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    return siglib_wrapJNI.SDS_IirMac(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_IirMac(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_IirMac(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_IirOrder(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_IirOrder(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static double SDS_IirOrder(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_IirOrder(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SDA_IirOrder(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int NumberOfPoles, int arg6) {
    siglib_wrapJNI.SDA_IirOrder(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), NumberOfPoles, arg6);
  }

  public static void SIF_IirNc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_IirNc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_IirNc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_IirNc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6);
  }

  public static void SDA_BilinearTransform(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, double arg4, double arg5, int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_BilinearTransform(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6, arg7, arg8);
  }

  public static double SDS_PreWarp(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_PreWarp(arg0, arg1);
  }

  public static void SDA_MatchedZTransform(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_MatchedZTransform(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6);
  }

  public static void SDA_IirZplaneToCoeffs(SLComplexRect_s arg0, SLComplexRect_s arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_IirZplaneToCoeffs(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_IirZplanePolarToCoeffs(SLComplexPolar_s arg0, SLComplexPolar_s arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_IirZplanePolarToCoeffs(SLComplexPolar_s.getCPtr(arg0), arg0, SLComplexPolar_s.getCPtr(arg1), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_IirZplaneLpfToLpf(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, double arg4, double arg5, double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_IirZplaneLpfToLpf(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6, arg7, arg8);
  }

  public static void SDA_IirZplaneLpfToHpf(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, double arg4, double arg5, double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_IirZplaneLpfToHpf(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6, arg7, arg8);
  }

  public static void SDA_IirZplaneLpfToBpf(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, double arg4, double arg5, double arg6, double arg7, int arg8, int arg9) {
    siglib_wrapJNI.SDA_IirZplaneLpfToBpf(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6, arg7, arg8, arg9);
  }

  public static void SDA_IirZplaneLpfToBsf(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, double arg4, double arg5, double arg6, double arg7, int arg8, int arg9) {
    siglib_wrapJNI.SDA_IirZplaneLpfToBsf(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, arg4, arg5, arg6, arg7, arg8, arg9);
  }

  public static double SDA_IirModifyFilterGain(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4) {
    return siglib_wrapJNI.SDA_IirModifyFilterGain(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SIF_IirLowPassFilter(SWIGTYPE_p_double arg0, double arg1, double arg2) {
    siglib_wrapJNI.SIF_IirLowPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_IirHighPassFilter(SWIGTYPE_p_double arg0, double arg1, double arg2) {
    siglib_wrapJNI.SIF_IirHighPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_IirAllPassFilter(SWIGTYPE_p_double arg0, double arg1, double arg2) {
    siglib_wrapJNI.SIF_IirAllPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_IirBandPassFilter(SWIGTYPE_p_double arg0, double arg1, double arg2) {
    siglib_wrapJNI.SIF_IirBandPassFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_IirNotchFilter(SWIGTYPE_p_double arg0, double arg1, double arg2) {
    siglib_wrapJNI.SIF_IirNotchFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_IirPeakingFilter(SWIGTYPE_p_double arg0, double arg1, double arg2, double arg3) {
    siglib_wrapJNI.SIF_IirPeakingFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static void SIF_IirLowShelfFilter(SWIGTYPE_p_double arg0, double arg1, double arg2, double arg3) {
    siglib_wrapJNI.SIF_IirLowShelfFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static void SIF_IirHighShelfFilter(SWIGTYPE_p_double arg0, double arg1, double arg2, double arg3) {
    siglib_wrapJNI.SIF_IirHighShelfFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static double SDS_IirRemoveDC(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3) {
    return siglib_wrapJNI.SDS_IirRemoveDC(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_IirRemoveDC(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDA_IirRemoveDC(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_OnePole(SWIGTYPE_p_double arg0) {
    siglib_wrapJNI.SIF_OnePole(SWIGTYPE_p_double.getCPtr(arg0));
  }

  public static double SDS_OnePole(double arg0, double arg1, SWIGTYPE_p_double arg2) {
    return siglib_wrapJNI.SDS_OnePole(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2));
  }

  public static void SDA_OnePole(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_OnePole(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static double SDS_OnePoleNormalized(double arg0, double arg1, SWIGTYPE_p_double arg2) {
    return siglib_wrapJNI.SDS_OnePoleNormalized(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2));
  }

  public static void SDA_OnePoleNormalized(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_OnePoleNormalized(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_OnePolePerSample(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_OnePolePerSample(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static double SDS_OnePoleTimeConstantToFilterCoeff(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_OnePoleTimeConstantToFilterCoeff(arg0, arg1);
  }

  public static double SDS_OnePoleCutOffFrequencyToFilterCoeff(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_OnePoleCutOffFrequencyToFilterCoeff(arg0, arg1);
  }

  public static void SIF_AllPole(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_AllPole(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static double SDS_AllPole(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_AllPole(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SDA_AllPole(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_AllPole(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static void SDA_ZDomainCoefficientReorg(SWIGTYPE_p_double arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ZDomainCoefficientReorg(SWIGTYPE_p_double.getCPtr(arg0), SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static int SIF_IirNotchFilter2(SWIGTYPE_p_double arg0, double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SIF_IirNotchFilter2(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static int SIF_IirNormalizedCoefficients(SWIGTYPE_p_double arg0, SLIIRNormalizedCoeffs_t arg1, int arg2) {
    return siglib_wrapJNI.SIF_IirNormalizedCoefficients(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2);
  }

  public static int SIF_IirNormalizedSPlaneCoefficients(SLComplexRect_s arg0, SLIIRNormalizedCoeffs_t arg1, int arg2) {
    return siglib_wrapJNI.SIF_IirNormalizedSPlaneCoefficients(SLComplexRect_s.getCPtr(arg0), arg0, arg1.swigValue(), arg2);
  }

  public static void SDA_TranslateSPlaneCutOffFrequency(SLComplexRect_s arg0, SLComplexRect_s arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_TranslateSPlaneCutOffFrequency(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2, arg3);
  }

  public static double SDA_IirLpLpShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, double arg4, int arg5) {
    return siglib_wrapJNI.SDA_IirLpLpShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static double SDA_IirLpHpShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, double arg4, int arg5) {
    return siglib_wrapJNI.SDA_IirLpHpShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SIF_Iir2PoleLpf(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3) {
    siglib_wrapJNI.SIF_Iir2PoleLpf(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDS_Iir2Pole(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2) {
    return siglib_wrapJNI.SDS_Iir2Pole(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2));
  }

  public static void SDA_Iir2Pole(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_Iir2Pole(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_IirNegateAlphaCoeffs(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_IirNegateAlphaCoeffs(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Integrate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_Integrate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_Differentiate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Differentiate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SIF_LeakyIntegrator(SWIGTYPE_p_double arg0) {
    siglib_wrapJNI.SIF_LeakyIntegrator(SWIGTYPE_p_double.getCPtr(arg0));
  }

  public static double SDS_LeakyIntegrator1(double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3) {
    return siglib_wrapJNI.SDS_LeakyIntegrator1(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDS_LeakyIntegrator2(double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3) {
    return siglib_wrapJNI.SDS_LeakyIntegrator2(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_HilbertTransformer(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_HilbertTransformer(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SIF_GoertzelFilter(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SIF_GoertzelFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_GoertzelFilter(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_GoertzelFilter(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static double SDS_GoertzelFilter(double arg0, SWIGTYPE_p_double arg1, double arg2) {
    return siglib_wrapJNI.SDS_GoertzelFilter(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SIF_GoertzelDetect(double arg0, int arg1) {
    return siglib_wrapJNI.SIF_GoertzelDetect(arg0, arg1);
  }

  public static double SDA_GoertzelDetect(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_GoertzelDetect(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static SLComplexRect_s SIF_GoertzelDetectComplex(double arg0, int arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SIF_GoertzelDetectComplex(arg0, arg1), true);
  }

  public static SLComplexRect_s SDA_GoertzelDetectComplex(SWIGTYPE_p_double arg0, SLComplexRect_s arg1, int arg2) {
    return new SLComplexRect_s(siglib_wrapJNI.SDA_GoertzelDetectComplex(SWIGTYPE_p_double.getCPtr(arg0), SLComplexRect_s.getCPtr(arg1), arg1, arg2), true);
  }

  public static void SIF_GaussianFilter(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    siglib_wrapJNI.SIF_GaussianFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_GaussianFilter2(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    siglib_wrapJNI.SIF_GaussianFilter2(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SIF_RaisedCosineFilter(SWIGTYPE_p_double arg0, double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SIF_RaisedCosineFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static void SIF_RootRaisedCosineFilter(SWIGTYPE_p_double arg0, double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SIF_RootRaisedCosineFilter(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static double SDS_ZTransform(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDS_ZTransform(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3, arg4);
  }

  public static double SDS_ZTransformDB(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDS_ZTransformDB(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3, arg4);
  }

  public static int SUF_EstimateBPFilterLength(double arg0, double arg1, int arg2, int arg3) {
    return siglib_wrapJNI.SUF_EstimateBPFilterLength(arg0, arg1, arg2, arg3);
  }

  public static void SUF_EstimateBPFilterError(double arg0, double arg1, int arg2, int arg3, SWIGTYPE_p_double arg4) {
    siglib_wrapJNI.SUF_EstimateBPFilterError(arg0, arg1, arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4));
  }

  public static void SDA_LinearMicrophoneArrayBeamPattern(int arg0, double arg1, double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, double arg5, double arg6, int arg7) {
    siglib_wrapJNI.SDA_LinearMicrophoneArrayBeamPattern(arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6, arg7);
  }

  public static void SDA_MicrophoneArrayCalculateDelays(int arg0, SLMicrophone_s arg1, double arg2) {
    siglib_wrapJNI.SDA_MicrophoneArrayCalculateDelays(arg0, SLMicrophone_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_MicrophoneArrayBeamPattern(int arg0, SLMicrophone_s arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, double arg6, double arg7, int arg8, double arg9) {
    siglib_wrapJNI.SDA_MicrophoneArrayBeamPattern(arg0, SLMicrophone_s.getCPtr(arg1), arg1, arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, arg8, arg9);
  }

  public static void SIF_Lms(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, int arg4) {
    siglib_wrapJNI.SIF_Lms(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static double SDS_Lms(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_Lms(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SDA_LmsUpdate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double SIGLIB_INOPUT_PTR_DECL, SWIGTYPE_p_int arg2, int arg3, double arg4, double arg5) {
    siglib_wrapJNI.SDA_LmsUpdate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(SIGLIB_INOPUT_PTR_DECL), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SDA_LeakyLmsUpdate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3, double arg4, double arg5, double arg6) {
    siglib_wrapJNI.SDA_LeakyLmsUpdate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4, arg5, arg6);
  }

  public static void SDA_NormalizedLmsUpdate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, double arg6) {
    siglib_wrapJNI.SDA_NormalizedLmsUpdate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_SignErrorLmsUpdate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3, double arg4, double arg5) {
    siglib_wrapJNI.SDA_SignErrorLmsUpdate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SDA_SignDataLmsUpdate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3, double arg4, double arg5) {
    siglib_wrapJNI.SDA_SignDataLmsUpdate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SDA_SignSignLmsUpdate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3, double arg4, double arg5) {
    siglib_wrapJNI.SDA_SignSignLmsUpdate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SDA_ConvolveLinear(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_ConvolveLinear(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_ConvolvePartial(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_ConvolvePartial(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_ConvolveCircular(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_ConvolveCircular(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_ConvolveLinearComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_ConvolveLinearComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7);
  }

  public static void SDA_ConvolvePartialComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_ConvolvePartialComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7);
  }

  public static void SDA_ConvolveCircularComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_ConvolveCircularComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SDA_Deconvolution(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_Deconvolution(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8);
  }

  public static void SDA_CorrelateLinear(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_CorrelateLinear(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SDA_CorrelatePartial(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_CorrelatePartial(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_CorrelateCircular(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_CorrelateCircular(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Covariance(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, int arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_Covariance(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5, arg6, arg7);
  }

  public static void SDA_CovariancePartial(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_CovariancePartial(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5, arg6);
  }

  public static void SDA_CorrelateLinearReturnPeak(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_CorrelateLinearReturnPeak(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SIF_FixedDelay(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_FixedDelay(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static double SDS_FixedDelay(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    return siglib_wrapJNI.SDS_FixedDelay(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_FixedDelay(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_FixedDelay(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_FixedDelayComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SIF_FixedDelayComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDS_FixedDelayComplex(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7) {
    siglib_wrapJNI.SDS_FixedDelayComplex(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7);
  }

  public static void SDA_FixedDelayComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_FixedDelayComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8);
  }

  public static void SDA_ShortFixedDelay(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_ShortFixedDelay(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static int SIF_VariableDelay(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    return siglib_wrapJNI.SIF_VariableDelay(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static double SDS_VariableDelay(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_VariableDelay(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SDA_VariableDelay(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_VariableDelay(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static int SIF_VariableDelayComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    return siglib_wrapJNI.SIF_VariableDelayComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static void SDS_VariableDelayComplex(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, int arg8) {
    siglib_wrapJNI.SDS_VariableDelayComplex(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), arg8);
  }

  public static void SDA_VariableDelayComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_int arg7, int arg8, int arg9) {
    siglib_wrapJNI.SDA_VariableDelayComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), arg8, arg9);
  }

  public static int SUF_IncreaseVariableDelay(SWIGTYPE_p_int arg0, SWIGTYPE_p_int arg1, int arg2) {
    return siglib_wrapJNI.SUF_IncreaseVariableDelay(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static int SUF_DecreaseVariableDelay(SWIGTYPE_p_int arg0, SWIGTYPE_p_int arg1, int arg2) {
    return siglib_wrapJNI.SUF_DecreaseVariableDelay(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static int SDA_Align(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SLAlign_t arg4, int arg5, int arg6) {
    return siglib_wrapJNI.SDA_Align(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4.swigValue(), arg5, arg6);
  }

  public static void SIM_Fft2d(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_unsigned_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, double arg6, SWIGTYPE_p_int arg7, int arg8, int arg9) {
    siglib_wrapJNI.SIM_Fft2d(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_unsigned_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, SWIGTYPE_p_int.getCPtr(arg7), arg8, arg9);
  }

  public static void SIF_Fft2d(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_Fft2d(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SIM_Conv3x3(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SIM_Conv3x3(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SIM_Sobel3x3(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_unsigned_int arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIM_Sobel3x3(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), arg2, arg3);
  }

  public static void SIM_SobelVertical3x3(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_unsigned_int arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIM_SobelVertical3x3(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), arg2, arg3);
  }

  public static void SIM_SobelHorizontal3x3(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_unsigned_int arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIM_SobelHorizontal3x3(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), arg2, arg3);
  }

  public static void SIM_Median3x3(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_unsigned_int arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIM_Median3x3(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), arg2, arg3);
  }

  public static int SIF_ConvCoefficients3x3(SWIGTYPE_p_double arg0, SL3x3Coeffs_t arg1) {
    return siglib_wrapJNI.SIF_ConvCoefficients3x3(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue());
  }

  public static long SIM_Max(SWIGTYPE_p_unsigned_int arg0, int arg1) {
    return siglib_wrapJNI.SIM_Max(SWIGTYPE_p_unsigned_int.getCPtr(arg0), arg1);
  }

  public static long SIM_Min(SWIGTYPE_p_unsigned_int arg0, int arg1) {
    return siglib_wrapJNI.SIM_Min(SWIGTYPE_p_unsigned_int.getCPtr(arg0), arg1);
  }

  public static void SIF_Dct8x8() {
    siglib_wrapJNI.SIF_Dct8x8();
  }

  public static void SIM_Dct8x8(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1) {
    siglib_wrapJNI.SIM_Dct8x8(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1));
  }

  public static void SIM_Idct8x8(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1) {
    siglib_wrapJNI.SIM_Idct8x8(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1));
  }

  public static void SIM_ZigZagScan(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIM_ZigZagScan(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SIM_ZigZagDescan(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIM_ZigZagDescan(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SDA_SignalGenerate(SWIGTYPE_p_double arg0, SLSignal_t arg1, double arg2, SLSignalFillMode_t arg3, double arg4, double arg5, double arg6, double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10) {
    return siglib_wrapJNI.SDA_SignalGenerate(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2, arg3.swigValue(), arg4, arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10);
  }

  public static int SDS_SignalGenerate(SWIGTYPE_p_double arg0, SLSignal_t arg1, double arg2, SLSignalFillMode_t arg3, double arg4, double arg5, double arg6, double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9) {
    return siglib_wrapJNI.SDS_SignalGenerate(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2, arg3.swigValue(), arg4, arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9));
  }

  public static void SIF_Resonator(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3) {
    siglib_wrapJNI.SIF_Resonator(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3));
  }

  public static void SDA_Resonator(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDA_Resonator(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SIF_Resonator1(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4) {
    siglib_wrapJNI.SIF_Resonator1(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4));
  }

  public static void SDA_Resonator1(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, double arg4, double arg5, int arg6) {
    siglib_wrapJNI.SDA_Resonator1(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_Resonator1Add(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, double arg4, double arg5, int arg6) {
    siglib_wrapJNI.SDA_Resonator1Add(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_SignalGeneratePolarWhiteNoise(SLComplexRect_s arg0, double arg1, SLSignalFillMode_t arg2, int arg3) {
    siglib_wrapJNI.SDA_SignalGeneratePolarWhiteNoise(SLComplexRect_s.getCPtr(arg0), arg0, arg1, arg2.swigValue(), arg3);
  }

  public static SLComplexRect_s SDS_SignalGeneratePolarWhiteNoise(double Peak) {
    return new SLComplexRect_s(siglib_wrapJNI.SDS_SignalGeneratePolarWhiteNoise(Peak), true);
  }

  public static void SDA_SignalGeneratePolarGaussianNoise(SLComplexRect_s arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SLSignalFillMode_t arg4, int arg5) {
    siglib_wrapJNI.SDA_SignalGeneratePolarGaussianNoise(SLComplexRect_s.getCPtr(arg0), arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4.swigValue(), arg5);
  }

  public static SLComplexRect_s SDS_SignalGeneratePolarGaussianNoise(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2) {
    return new SLComplexRect_s(siglib_wrapJNI.SDS_SignalGeneratePolarGaussianNoise(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2)), true);
  }

  public static void SDA_SignalAddPolarJitterAndGaussianNoise(SLComplexRect_s arg0, SLComplexRect_s arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, int arg8) {
    siglib_wrapJNI.SDA_SignalAddPolarJitterAndGaussianNoise(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), arg8);
  }

  public static SLComplexRect_s SDS_SignalAddPolarJitterAndGaussianNoise(SLComplexRect_s arg0, double arg1, double arg2, SWIGTYPE_p_double arg3, double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6) {
    return new SLComplexRect_s(siglib_wrapJNI.SDS_SignalAddPolarJitterAndGaussianNoise(SLComplexRect_s.getCPtr(arg0), arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6)), true);
  }

  public static double SDA_BitErrorRate(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_BitErrorRate(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_Interleave(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_Interleave(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_Deinterleave(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_Deinterleave(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SCV_EuclideanDistance(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return siglib_wrapJNI.SCV_EuclideanDistance(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1);
  }

  public static double SCV_EuclideanDistanceSquared(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return siglib_wrapJNI.SCV_EuclideanDistanceSquared(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1);
  }

  public static short SDS_ManchesterEncode(short arg0) {
    return siglib_wrapJNI.SDS_ManchesterEncode(arg0);
  }

  public static short SDS_ManchesterDecode(short arg0) {
    return siglib_wrapJNI.SDS_ManchesterDecode(arg0);
  }

  public static int SDS_ManchesterEncodeByte(short arg0) {
    return siglib_wrapJNI.SDS_ManchesterEncodeByte(arg0);
  }

  public static int SDS_ManchesterDecodeByte(int arg0) {
    return siglib_wrapJNI.SDS_ManchesterDecodeByte(arg0);
  }

  public static void SIF_DetectNumericalWordSequence(SWIGTYPE_p_int arg0, SWIGTYPE_p_int arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIF_DetectNumericalWordSequence(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2, arg3);
  }

  public static int SDS_DetectNumericalWordSequence(int arg0, SWIGTYPE_p_int arg1, int arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_DetectNumericalWordSequence(arg0, SWIGTYPE_p_int.getCPtr(arg1), arg2, SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SIF_DetectNumericalBitSequence(SWIGTYPE_p_int arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_DetectNumericalBitSequence(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static int SDS_DetectNumericalBitSequence(int arg0, int arg1, int arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_DetectNumericalBitSequence(arg0, arg1, arg2, SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SIF_DetectCharacterSequence(SWIGTYPE_p_unsigned_char arg0, int arg1) {
    siglib_wrapJNI.SIF_DetectCharacterSequence(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
  }

  public static int SDS_DetectCharacterSequence(short arg0, SWIGTYPE_p_unsigned_char arg1, SWIGTYPE_p_unsigned_char arg2, int arg3) {
    return siglib_wrapJNI.SDS_DetectCharacterSequence(arg0, SWIGTYPE_p_unsigned_char.getCPtr(arg1), SWIGTYPE_p_unsigned_char.getCPtr(arg2), arg3);
  }

  public static double SDS_ErrorVector(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return siglib_wrapJNI.SDS_ErrorVector(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1);
  }

  public static double SDS_ErrorVectorMagnitudePercent(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return siglib_wrapJNI.SDS_ErrorVectorMagnitudePercent(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1);
  }

  public static double SDS_ErrorVectorMagnitudeDecibels(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return siglib_wrapJNI.SDS_ErrorVectorMagnitudeDecibels(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1);
  }

  public static int SDS_ReverseDiBits(int arg0) {
    return siglib_wrapJNI.SDS_ReverseDiBits(arg0);
  }

  public static void SDS_QpskBitErrorCount(int arg0, int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3) {
    siglib_wrapJNI.SDS_QpskBitErrorCount(arg0, arg1, SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3));
  }

  public static double SDS_BitErrorRate(int arg0, int arg1) {
    return siglib_wrapJNI.SDS_BitErrorRate(arg0, arg1);
  }

  public static void SIF_PhaseLockedLoop(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, int arg11, SWIGTYPE_p_double arg12) {
    siglib_wrapJNI.SIF_PhaseLockedLoop(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), arg11, SWIGTYPE_p_double.getCPtr(arg12));
  }

  public static double SDS_PhaseLockedLoop(double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, int arg13, SWIGTYPE_p_double arg14) {
    return siglib_wrapJNI.SDS_PhaseLockedLoop(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14));
  }

  public static void SDA_PhaseLockedLoop(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, SWIGTYPE_p_double arg4, int arg5, double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_int arg13, int arg14, SWIGTYPE_p_double arg15, int arg16) {
    siglib_wrapJNI.SDA_PhaseLockedLoop(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_int.getCPtr(arg13), arg14, SWIGTYPE_p_double.getCPtr(arg15), arg16);
  }

  public static int SIF_CostasLoop(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11) {
    return siglib_wrapJNI.SIF_CostasLoop(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), arg9, SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11));
  }

  public static double SDS_CostasLoop(double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, int arg11, SWIGTYPE_p_double arg12, double arg13, SLCostasLoopFeedbackMode_t arg14, SWIGTYPE_p_double arg15) {
    return siglib_wrapJNI.SDS_CostasLoop(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, SWIGTYPE_p_double.getCPtr(arg12), arg13, arg14.swigValue(), SWIGTYPE_p_double.getCPtr(arg15));
  }

  public static void SDA_CostasLoop(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, SWIGTYPE_p_double arg4, int arg5, double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, int arg12, SWIGTYPE_p_double arg13, double arg14, SLCostasLoopFeedbackMode_t arg15, SWIGTYPE_p_double arg16, int arg17) {
    siglib_wrapJNI.SDA_CostasLoop(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), arg12, SWIGTYPE_p_double.getCPtr(arg13), arg14, arg15.swigValue(), SWIGTYPE_p_double.getCPtr(arg16), arg17);
  }

  public static void SRF_CostasLoop(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7) {
    siglib_wrapJNI.SRF_CostasLoop(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7));
  }

  public static void SIF_180DegreePhaseDetect(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, SWIGTYPE_p_int arg8) {
    siglib_wrapJNI.SIF_180DegreePhaseDetect(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, SWIGTYPE_p_int.getCPtr(arg8));
  }

  public static int SDA_180DegreePhaseDetect(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9, SWIGTYPE_p_int arg10, int arg11) {
    return siglib_wrapJNI.SDA_180DegreePhaseDetect(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, SWIGTYPE_p_int.getCPtr(arg10), arg11);
  }

  public static void SIF_TriggerReverberator(SWIGTYPE_p_int arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2) {
    siglib_wrapJNI.SIF_TriggerReverberator(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2));
  }

  public static void SDA_TriggerReverberator(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_TriggerReverberator(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, arg6);
  }

  public static double SDS_TriggerReverberator(double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, int arg4) {
    return siglib_wrapJNI.SDS_TriggerReverberator(arg0, SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static int SDA_TriggerSelector(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    return siglib_wrapJNI.SDA_TriggerSelector(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static int SIF_EarlyLateGate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, int arg10, double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, SWIGTYPE_p_int arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, SLELGTriggerTiming_t arg17, SWIGTYPE_p_int arg18, int arg19) {
    return siglib_wrapJNI.SIF_EarlyLateGate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), SWIGTYPE_p_int.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), arg17.swigValue(), SWIGTYPE_p_int.getCPtr(arg18), arg19);
  }

  public static void SDA_EarlyLateGate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, int arg11, double arg12, SWIGTYPE_p_int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, SWIGTYPE_p_int arg17, int arg18, int arg19) {
    siglib_wrapJNI.SDA_EarlyLateGate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), arg11, arg12, SWIGTYPE_p_int.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), SWIGTYPE_p_int.getCPtr(arg17), arg18, arg19);
  }

  public static void SDA_EarlyLateGateDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, int arg11, double arg12, SWIGTYPE_p_int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, SWIGTYPE_p_int arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_double arg19, int arg20, int arg21) {
    siglib_wrapJNI.SDA_EarlyLateGateDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), arg11, arg12, SWIGTYPE_p_int.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), SWIGTYPE_p_int.getCPtr(arg17), SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_double.getCPtr(arg19), arg20, arg21);
  }

  public static double SDS_EarlyLateGate(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, int arg10, double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, SWIGTYPE_p_int arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, int arg17) {
    return siglib_wrapJNI.SDS_EarlyLateGate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), SWIGTYPE_p_int.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), arg17);
  }

  public static int SIF_EarlyLateGateSquarePulse(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, int arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, int arg9, double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_int arg13, SWIGTYPE_p_int arg14, SWIGTYPE_p_int arg15, SLELGTriggerTiming_t arg16, SWIGTYPE_p_int arg17, int arg18) {
    return siglib_wrapJNI.SIF_EarlyLateGateSquarePulse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, arg10, SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_int.getCPtr(arg13), SWIGTYPE_p_int.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), arg16.swigValue(), SWIGTYPE_p_int.getCPtr(arg17), arg18);
  }

  public static void SDA_EarlyLateGateSquarePulse(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, int arg11, double arg12, SWIGTYPE_p_int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, SWIGTYPE_p_int arg17, int arg18, int arg19) {
    siglib_wrapJNI.SDA_EarlyLateGateSquarePulse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), arg11, arg12, SWIGTYPE_p_int.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), SWIGTYPE_p_int.getCPtr(arg17), arg18, arg19);
  }

  public static void SDA_EarlyLateGateSquarePulseDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, int arg11, double arg12, SWIGTYPE_p_int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, SWIGTYPE_p_int arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_double arg19, int arg20, int arg21) {
    siglib_wrapJNI.SDA_EarlyLateGateSquarePulseDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), arg11, arg12, SWIGTYPE_p_int.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), SWIGTYPE_p_int.getCPtr(arg17), SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_double.getCPtr(arg19), arg20, arg21);
  }

  public static double SDS_EarlyLateGateSquarePulse(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, int arg10, double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, SWIGTYPE_p_int arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_int arg16, int arg17) {
    return siglib_wrapJNI.SDS_EarlyLateGateSquarePulse(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), arg10, arg11, SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), SWIGTYPE_p_int.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), arg17);
  }

  public static int SDS_ConvEncoderK3(short arg0, SWIGTYPE_p_int arg1) {
    return siglib_wrapJNI.SDS_ConvEncoderK3(arg0, SWIGTYPE_p_int.getCPtr(arg1));
  }

  public static void SIF_ViterbiDecoderK3(SWIGTYPE_p_int arg0, SWIGTYPE_p_unsigned_char arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_int arg5, int arg6) {
    siglib_wrapJNI.SIF_ViterbiDecoderK3(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6);
  }

  public static short SDS_ViterbiDecoderK3(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_unsigned_char arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_int arg6, int arg7) {
    return siglib_wrapJNI.SDS_ViterbiDecoderK3(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_unsigned_char.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7);
  }

  public static SLComplexRect_s SDS_ConvEncoderV32(short arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2) {
    return new SLComplexRect_s(siglib_wrapJNI.SDS_ConvEncoderV32(arg0, SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2)), true);
  }

  public static void SIF_ViterbiDecoderV32(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, int arg4) {
    siglib_wrapJNI.SIF_ViterbiDecoderV32(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static short SDS_ViterbiDecoderV32(SLComplexRect_s arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_int arg6, int arg7) {
    return siglib_wrapJNI.SDS_ViterbiDecoderV32(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7);
  }

  public static void SIF_AmplitudeModulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SIF_AmplitudeModulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SDA_AmplitudeModulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_AmplitudeModulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static double SDS_AmplitudeModulate(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    return siglib_wrapJNI.SDS_AmplitudeModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SIF_AmplitudeModulate2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_AmplitudeModulate2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_AmplitudeModulate2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_AmplitudeModulate2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static double SDS_AmplitudeModulate2(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    return siglib_wrapJNI.SDS_AmplitudeModulate2(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static int SIF_ComplexShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8) {
    return siglib_wrapJNI.SIF_ComplexShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8);
  }

  public static void SDA_ComplexShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_int arg8, double arg9, int arg10, int arg11, int arg12) {
    siglib_wrapJNI.SDA_ComplexShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_int.getCPtr(arg8), arg9, arg10, arg11, arg12);
  }

  public static void SIF_FrequencyModulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_FrequencyModulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDS_FrequencyModulate(double arg0, double arg1, double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5) {
    return siglib_wrapJNI.SDS_FrequencyModulate(arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_FrequencyModulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_FrequencyModulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7);
  }

  public static void SDA_FrequencyDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDA_FrequencyDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_FrequencyModulateComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_FrequencyModulateComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDS_FrequencyModulateComplex(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, int arg7) {
    siglib_wrapJNI.SDS_FrequencyModulateComplex(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), arg7);
  }

  public static void SDA_FrequencyModulateComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_FrequencyModulateComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), arg7, arg8);
  }

  public static void SDA_DeltaModulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_DeltaModulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_DeltaDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_DeltaDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_DeltaModulate2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_DeltaModulate2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static int SIF_CostasQamDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_int arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_double arg15, SWIGTYPE_p_int arg16, int arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_double arg19, SWIGTYPE_p_int arg20, int arg21, double arg22, SWIGTYPE_p_int arg23, SWIGTYPE_p_double arg24, SWIGTYPE_p_int arg25, SWIGTYPE_p_int arg26, SWIGTYPE_p_int arg27, SWIGTYPE_p_int arg28, int arg29, SWIGTYPE_p_double arg30, SWIGTYPE_p_double arg31, SWIGTYPE_p_int arg32) {
    return siglib_wrapJNI.SIF_CostasQamDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), arg9, SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_int.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_double.getCPtr(arg15), SWIGTYPE_p_int.getCPtr(arg16), arg17, SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_double.getCPtr(arg19), SWIGTYPE_p_int.getCPtr(arg20), arg21, arg22, SWIGTYPE_p_int.getCPtr(arg23), SWIGTYPE_p_double.getCPtr(arg24), SWIGTYPE_p_int.getCPtr(arg25), SWIGTYPE_p_int.getCPtr(arg26), SWIGTYPE_p_int.getCPtr(arg27), SWIGTYPE_p_int.getCPtr(arg28), arg29, SWIGTYPE_p_double.getCPtr(arg30), SWIGTYPE_p_double.getCPtr(arg31), SWIGTYPE_p_int.getCPtr(arg32));
  }

  public static int SDS_CostasQamDemodulate(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, SWIGTYPE_p_double arg5, int arg6, double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, SWIGTYPE_p_double arg14, double arg15, SLCostasLoopFeedbackMode_t arg16, SWIGTYPE_p_double arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_int arg19, SWIGTYPE_p_double arg20, SWIGTYPE_p_double arg21, SWIGTYPE_p_int arg22, int arg23, SWIGTYPE_p_double arg24, SWIGTYPE_p_double arg25, SWIGTYPE_p_int arg26, int arg27, double arg28, SWIGTYPE_p_int arg29, SWIGTYPE_p_double arg30, SWIGTYPE_p_int arg31, SWIGTYPE_p_int arg32, SWIGTYPE_p_int arg33, int arg34, SWIGTYPE_p_double arg35, SWIGTYPE_p_double arg36, SWIGTYPE_p_int arg37, int arg38) {
    return siglib_wrapJNI.SDS_CostasQamDemodulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), arg15, arg16.swigValue(), SWIGTYPE_p_double.getCPtr(arg17), SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_int.getCPtr(arg19), SWIGTYPE_p_double.getCPtr(arg20), SWIGTYPE_p_double.getCPtr(arg21), SWIGTYPE_p_int.getCPtr(arg22), arg23, SWIGTYPE_p_double.getCPtr(arg24), SWIGTYPE_p_double.getCPtr(arg25), SWIGTYPE_p_int.getCPtr(arg26), arg27, arg28, SWIGTYPE_p_int.getCPtr(arg29), SWIGTYPE_p_double.getCPtr(arg30), SWIGTYPE_p_int.getCPtr(arg31), SWIGTYPE_p_int.getCPtr(arg32), SWIGTYPE_p_int.getCPtr(arg33), arg34, SWIGTYPE_p_double.getCPtr(arg35), SWIGTYPE_p_double.getCPtr(arg36), SWIGTYPE_p_int.getCPtr(arg37), arg38);
  }

  public static int SDS_CostasQamDemodulateDebug(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, SWIGTYPE_p_double arg5, int arg6, double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, SWIGTYPE_p_double arg14, double arg15, SLCostasLoopFeedbackMode_t arg16, SWIGTYPE_p_double arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_int arg19, SWIGTYPE_p_double arg20, SWIGTYPE_p_double arg21, SWIGTYPE_p_int arg22, int arg23, SWIGTYPE_p_double arg24, SWIGTYPE_p_double arg25, SWIGTYPE_p_int arg26, int arg27, double arg28, SWIGTYPE_p_int arg29, SWIGTYPE_p_double arg30, SWIGTYPE_p_int arg31, SWIGTYPE_p_int arg32, SWIGTYPE_p_int arg33, int arg34, SWIGTYPE_p_double arg35, SWIGTYPE_p_double arg36, SWIGTYPE_p_int arg37, int arg38, SWIGTYPE_p_double arg39, SWIGTYPE_p_double arg40, SWIGTYPE_p_double arg41, SWIGTYPE_p_int arg42) {
    return siglib_wrapJNI.SDS_CostasQamDemodulateDebug(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), arg15, arg16.swigValue(), SWIGTYPE_p_double.getCPtr(arg17), SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_int.getCPtr(arg19), SWIGTYPE_p_double.getCPtr(arg20), SWIGTYPE_p_double.getCPtr(arg21), SWIGTYPE_p_int.getCPtr(arg22), arg23, SWIGTYPE_p_double.getCPtr(arg24), SWIGTYPE_p_double.getCPtr(arg25), SWIGTYPE_p_int.getCPtr(arg26), arg27, arg28, SWIGTYPE_p_int.getCPtr(arg29), SWIGTYPE_p_double.getCPtr(arg30), SWIGTYPE_p_int.getCPtr(arg31), SWIGTYPE_p_int.getCPtr(arg32), SWIGTYPE_p_int.getCPtr(arg33), arg34, SWIGTYPE_p_double.getCPtr(arg35), SWIGTYPE_p_double.getCPtr(arg36), SWIGTYPE_p_int.getCPtr(arg37), arg38, SWIGTYPE_p_double.getCPtr(arg39), SWIGTYPE_p_double.getCPtr(arg40), SWIGTYPE_p_double.getCPtr(arg41), SWIGTYPE_p_int.getCPtr(arg42));
  }

  public static int SDA_CostasQamDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, SWIGTYPE_p_double arg5, int arg6, double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, SWIGTYPE_p_double arg14, double arg15, SLCostasLoopFeedbackMode_t arg16, SWIGTYPE_p_double arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_int arg19, SWIGTYPE_p_double arg20, SWIGTYPE_p_double arg21, SWIGTYPE_p_int arg22, int arg23, SWIGTYPE_p_double arg24, SWIGTYPE_p_double arg25, SWIGTYPE_p_int arg26, int arg27, double arg28, SWIGTYPE_p_int arg29, SWIGTYPE_p_double arg30, SWIGTYPE_p_int arg31, SWIGTYPE_p_int arg32, SWIGTYPE_p_int arg33, int arg34, SWIGTYPE_p_double arg35, SWIGTYPE_p_double arg36, SWIGTYPE_p_int arg37, int arg38, int arg39) {
    return siglib_wrapJNI.SDA_CostasQamDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), arg15, arg16.swigValue(), SWIGTYPE_p_double.getCPtr(arg17), SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_int.getCPtr(arg19), SWIGTYPE_p_double.getCPtr(arg20), SWIGTYPE_p_double.getCPtr(arg21), SWIGTYPE_p_int.getCPtr(arg22), arg23, SWIGTYPE_p_double.getCPtr(arg24), SWIGTYPE_p_double.getCPtr(arg25), SWIGTYPE_p_int.getCPtr(arg26), arg27, arg28, SWIGTYPE_p_int.getCPtr(arg29), SWIGTYPE_p_double.getCPtr(arg30), SWIGTYPE_p_int.getCPtr(arg31), SWIGTYPE_p_int.getCPtr(arg32), SWIGTYPE_p_int.getCPtr(arg33), arg34, SWIGTYPE_p_double.getCPtr(arg35), SWIGTYPE_p_double.getCPtr(arg36), SWIGTYPE_p_int.getCPtr(arg37), arg38, arg39);
  }

  public static int SDA_CostasQamDemodulateDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, SWIGTYPE_p_double arg5, int arg6, double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, SWIGTYPE_p_double arg14, double arg15, SLCostasLoopFeedbackMode_t arg16, SWIGTYPE_p_double arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_int arg19, SWIGTYPE_p_double arg20, SWIGTYPE_p_double arg21, SWIGTYPE_p_int arg22, int arg23, SWIGTYPE_p_double arg24, SWIGTYPE_p_double arg25, SWIGTYPE_p_int arg26, int arg27, double arg28, SWIGTYPE_p_int arg29, SWIGTYPE_p_double arg30, SWIGTYPE_p_int arg31, SWIGTYPE_p_int arg32, SWIGTYPE_p_int arg33, int arg34, SWIGTYPE_p_double arg35, SWIGTYPE_p_double arg36, SWIGTYPE_p_int arg37, int arg38, int arg39, SWIGTYPE_p_double arg40, SWIGTYPE_p_double arg41, SWIGTYPE_p_double arg42) {
    return siglib_wrapJNI.SDA_CostasQamDemodulateDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), arg15, arg16.swigValue(), SWIGTYPE_p_double.getCPtr(arg17), SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_int.getCPtr(arg19), SWIGTYPE_p_double.getCPtr(arg20), SWIGTYPE_p_double.getCPtr(arg21), SWIGTYPE_p_int.getCPtr(arg22), arg23, SWIGTYPE_p_double.getCPtr(arg24), SWIGTYPE_p_double.getCPtr(arg25), SWIGTYPE_p_int.getCPtr(arg26), arg27, arg28, SWIGTYPE_p_int.getCPtr(arg29), SWIGTYPE_p_double.getCPtr(arg30), SWIGTYPE_p_int.getCPtr(arg31), SWIGTYPE_p_int.getCPtr(arg32), SWIGTYPE_p_int.getCPtr(arg33), arg34, SWIGTYPE_p_double.getCPtr(arg35), SWIGTYPE_p_double.getCPtr(arg36), SWIGTYPE_p_int.getCPtr(arg37), arg38, arg39, SWIGTYPE_p_double.getCPtr(arg40), SWIGTYPE_p_double.getCPtr(arg41), SWIGTYPE_p_double.getCPtr(arg42));
  }

  public static void SIF_QpskModulate(SWIGTYPE_p_double arg0, double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, double arg11, double arg12, int arg13, int arg14) {
    siglib_wrapJNI.SIF_QpskModulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, arg12, arg13, arg14);
  }

  public static void SDA_QpskModulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SLComplexRect_s arg6, int arg7, int arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, int arg14, int arg15) {
    siglib_wrapJNI.SDA_QpskModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SLComplexRect_s.getCPtr(arg6), arg6, arg7, arg8, SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), arg14, arg15);
  }

  public static void SIF_QpskDemodulate(SWIGTYPE_p_double arg0, double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, double arg11, double arg12, int arg13, int arg14) {
    siglib_wrapJNI.SIF_QpskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, arg12, arg13, arg14);
  }

  public static int SDA_QpskDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, int arg14) {
    return siglib_wrapJNI.SDA_QpskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, arg14);
  }

  public static int SDA_QpskDemodulateDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, int arg14, SWIGTYPE_p_double arg15, SLComplexRect_s arg16) {
    return siglib_wrapJNI.SDA_QpskDemodulateDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, arg14, SWIGTYPE_p_double.getCPtr(arg15), SLComplexRect_s.getCPtr(arg16), arg16);
  }

  public static int SDA_QpskDifferentialEncode(int arg0, SWIGTYPE_p_int arg1) {
    return siglib_wrapJNI.SDA_QpskDifferentialEncode(arg0, SWIGTYPE_p_int.getCPtr(arg1));
  }

  public static int SDA_QpskDifferentialDecode(int arg0, SWIGTYPE_p_int arg1) {
    return siglib_wrapJNI.SDA_QpskDifferentialDecode(arg0, SWIGTYPE_p_int.getCPtr(arg1));
  }

  public static void SIF_FskModulate(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    siglib_wrapJNI.SIF_FskModulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_FskModulateByte(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, double arg5, double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_FskModulateByte(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6, arg7, arg8);
  }

  public static int SDA_FskDemodulateByte(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_FskDemodulateByte(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_CpfskModulateByte(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_CpfskModulateByte(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6, arg7);
  }

  public static void SDA_FskModulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, double arg5, double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_FskModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6, arg7, arg8);
  }

  public static int SDA_FskDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_FskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_CpfskModulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, double arg5, int arg6, int arg7) {
    siglib_wrapJNI.SDA_CpfskModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6, arg7);
  }

  public static void SIF_Qam16Modulate(SWIGTYPE_p_double arg0, double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, double arg11, double arg12, int arg13, int arg14) {
    siglib_wrapJNI.SIF_Qam16Modulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, arg12, arg13, arg14);
  }

  public static void SDA_Qam16Modulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SLComplexRect_s arg6, int arg7, int arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, int arg14, int arg15) {
    siglib_wrapJNI.SDA_Qam16Modulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SLComplexRect_s.getCPtr(arg6), arg6, arg7, arg8, SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), arg14, arg15);
  }

  public static void SIF_Qam16Demodulate(SWIGTYPE_p_double arg0, double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, double arg11, double arg12, int arg13, int arg14) {
    siglib_wrapJNI.SIF_Qam16Demodulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, arg12, arg13, arg14);
  }

  public static int SDA_Qam16Demodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, int arg14) {
    return siglib_wrapJNI.SDA_Qam16Demodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, arg14);
  }

  public static int SDA_Qam16DemodulateDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, int arg6, int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, int arg13, int arg14, SWIGTYPE_p_double arg15, SLComplexRect_s arg16) {
    return siglib_wrapJNI.SDA_Qam16DemodulateDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), arg13, arg14, SWIGTYPE_p_double.getCPtr(arg15), SLComplexRect_s.getCPtr(arg16), arg16);
  }

  public static int SDA_Qam16DifferentialEncode(int arg0, SWIGTYPE_p_int arg1) {
    return siglib_wrapJNI.SDA_Qam16DifferentialEncode(arg0, SWIGTYPE_p_int.getCPtr(arg1));
  }

  public static int SDA_Qam16DifferentialDecode(int arg0, SWIGTYPE_p_int arg1) {
    return siglib_wrapJNI.SDA_Qam16DifferentialDecode(arg0, SWIGTYPE_p_int.getCPtr(arg1));
  }

  public static void SIF_BpskModulate(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SIF_BpskModulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_BpskModulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, int arg6) {
    siglib_wrapJNI.SDA_BpskModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_BpskModulateByte(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, int arg6) {
    siglib_wrapJNI.SDA_BpskModulateByte(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SIF_BpskDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13) {
    siglib_wrapJNI.SIF_BpskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), arg9, SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13));
  }

  public static int SDA_BpskDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, int arg11, SWIGTYPE_p_double arg12, double arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_double arg16, int arg17) {
    return siglib_wrapJNI.SDA_BpskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_double.getCPtr(arg16), arg17);
  }

  public static int SDA_BpskDemodulateDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, int arg11, SWIGTYPE_p_double arg12, double arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_double arg16, int arg17, SWIGTYPE_p_double arg18) {
    return siglib_wrapJNI.SDA_BpskDemodulateDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_double.getCPtr(arg16), arg17, SWIGTYPE_p_double.getCPtr(arg18));
  }

  public static void SIF_DpskModulate(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3, SWIGTYPE_p_double arg4) {
    siglib_wrapJNI.SIF_DpskModulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3, SWIGTYPE_p_double.getCPtr(arg4));
  }

  public static void SDA_DpskModulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, int arg6, SWIGTYPE_p_double arg7) {
    siglib_wrapJNI.SDA_DpskModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6, SWIGTYPE_p_double.getCPtr(arg7));
  }

  public static void SDA_DpskModulateByte(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, int arg6, SWIGTYPE_p_double arg7) {
    siglib_wrapJNI.SDA_DpskModulateByte(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6, SWIGTYPE_p_double.getCPtr(arg7));
  }

  public static void SIF_DpskDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, SWIGTYPE_p_double arg14) {
    siglib_wrapJNI.SIF_DpskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), arg9, SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), SWIGTYPE_p_double.getCPtr(arg14));
  }

  public static int SDA_DpskDemodulate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, int arg11, SWIGTYPE_p_double arg12, double arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_double arg16, int arg17, SWIGTYPE_p_double arg18) {
    return siglib_wrapJNI.SDA_DpskDemodulate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_double.getCPtr(arg16), arg17, SWIGTYPE_p_double.getCPtr(arg18));
  }

  public static int SDA_DpskDemodulateDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, int arg11, SWIGTYPE_p_double arg12, double arg13, SWIGTYPE_p_double arg14, SWIGTYPE_p_int arg15, SWIGTYPE_p_double arg16, int arg17, SWIGTYPE_p_double arg18, SWIGTYPE_p_double arg19) {
    return siglib_wrapJNI.SDA_DpskDemodulateDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, SWIGTYPE_p_double.getCPtr(arg12), arg13, SWIGTYPE_p_double.getCPtr(arg14), SWIGTYPE_p_int.getCPtr(arg15), SWIGTYPE_p_double.getCPtr(arg16), arg17, SWIGTYPE_p_double.getCPtr(arg18), SWIGTYPE_p_double.getCPtr(arg19));
  }

  public static void SIF_PiByFourDQpskModulate(SWIGTYPE_p_double arg0, double arg1, int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SLComplexRect_s arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, double arg11, double arg12, int arg13, int arg14, SWIGTYPE_p_int arg15) {
    siglib_wrapJNI.SIF_PiByFourDQpskModulate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SLComplexRect_s.getCPtr(arg5), arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), arg11, arg12, arg13, arg14, SWIGTYPE_p_int.getCPtr(arg15));
  }

  public static void SDA_PiByFourDQpskModulate(int arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, SLComplexRect_s arg6, int arg7, int arg8, SWIGTYPE_p_double arg9, SWIGTYPE_p_int arg10, SWIGTYPE_p_double arg11, SWIGTYPE_p_int arg12, SWIGTYPE_p_double arg13, int arg14, int arg15, SWIGTYPE_p_int arg16) {
    siglib_wrapJNI.SDA_PiByFourDQpskModulate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), SLComplexRect_s.getCPtr(arg6), arg6, arg7, arg8, SWIGTYPE_p_double.getCPtr(arg9), SWIGTYPE_p_int.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), SWIGTYPE_p_int.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), arg14, arg15, SWIGTYPE_p_int.getCPtr(arg16));
  }

  public static void SDS_ChannelizationCode(SWIGTYPE_p_double arg0, int arg1, int arg2) {
    siglib_wrapJNI.SDS_ChannelizationCode(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_ComplexQPSKSpread(int arg0, SLComplexRect_s arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, double arg5, SLComplexRect_s arg6, int arg7) {
    siglib_wrapJNI.SDA_ComplexQPSKSpread(arg0, SLComplexRect_s.getCPtr(arg1), arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SLComplexRect_s.getCPtr(arg6), arg6, arg7);
  }

  public static int SDA_ComplexQPSKDeSpread(SLComplexRect_s arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, SLComplexRect_s arg5, SWIGTYPE_p_double arg6, int arg7) {
    return siglib_wrapJNI.SDA_ComplexQPSKDeSpread(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, SLComplexRect_s.getCPtr(arg5), arg5, SWIGTYPE_p_double.getCPtr(arg6), arg7);
  }

  public static int SUF_AsyncCharacterLength(int arg0, SLParity_t arg1, int arg2) {
    return siglib_wrapJNI.SUF_AsyncCharacterLength(arg0, arg1.swigValue(), arg2);
  }

  public static int SDA_SyncToAsyncConverter(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, int arg2, SLParity_t arg3, int arg4, int arg5) {
    return siglib_wrapJNI.SDA_SyncToAsyncConverter(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3.swigValue(), arg4, arg5);
  }

  public static int SDA_AsyncToSyncConverter(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, int arg2, SLParity_t arg3, SWIGTYPE_p_int arg4, int arg5) {
    return siglib_wrapJNI.SDA_AsyncToSyncConverter(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3.swigValue(), SWIGTYPE_p_int.getCPtr(arg4), arg5);
  }

  public static void SIF_AsyncAddRemoveStopBits(SWIGTYPE_p_int arg0) {
    siglib_wrapJNI.SIF_AsyncAddRemoveStopBits(SWIGTYPE_p_int.getCPtr(arg0));
  }

  public static int SDA_AsyncRemoveStopBits(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, int arg2, SLParity_t arg3, int arg4, SWIGTYPE_p_int arg5, int arg6) {
    return siglib_wrapJNI.SDA_AsyncRemoveStopBits(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3.swigValue(), arg4, SWIGTYPE_p_int.getCPtr(arg5), arg6);
  }

  public static int SDA_AsyncAddStopBits(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, int arg2, SLParity_t arg3, int arg4, SWIGTYPE_p_int arg5, int arg6) {
    return siglib_wrapJNI.SDA_AsyncAddStopBits(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3.swigValue(), arg4, SWIGTYPE_p_int.getCPtr(arg5), arg6);
  }

  public static int SDA_DecreaseWordLength(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, int arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_DecreaseWordLength(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static int SDA_IncreaseWordLength(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_unsigned_char arg1, int arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_IncreaseWordLength(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static int SDS_Scrambler1417(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_Scrambler1417(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_Descrambler1417(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_Descrambler1417(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_Scrambler1417WithInversion(int arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3) {
    return siglib_wrapJNI.SDS_Scrambler1417WithInversion(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3));
  }

  public static int SDS_Descrambler1417WithInversion(int arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3) {
    return siglib_wrapJNI.SDS_Descrambler1417WithInversion(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3));
  }

  public static int SDS_Scrambler1823(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_Scrambler1823(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_Descrambler1823(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_Descrambler1823(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_Scrambler523(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_Scrambler523(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_Descrambler523(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_Descrambler523(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_ScramblerDescramblerPN9(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_ScramblerDescramblerPN9(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_SequenceGeneratorPN9(SWIGTYPE_p_unsigned_int arg0) {
    return siglib_wrapJNI.SDS_SequenceGeneratorPN9(SWIGTYPE_p_unsigned_int.getCPtr(arg0));
  }

  public static int SDS_ScramblerDescramblerPN15(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_ScramblerDescramblerPN15(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_SequenceGeneratorPN15(SWIGTYPE_p_unsigned_int arg0) {
    return siglib_wrapJNI.SDS_SequenceGeneratorPN15(SWIGTYPE_p_unsigned_int.getCPtr(arg0));
  }

  public static int SDS_ScramblerDescramblergCRC24(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_ScramblerDescramblergCRC24(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_SequenceGeneratorgCRC24(SWIGTYPE_p_unsigned_int arg0) {
    return siglib_wrapJNI.SDS_SequenceGeneratorgCRC24(SWIGTYPE_p_unsigned_int.getCPtr(arg0));
  }

  public static int SDS_ScramblerDescramblergCRC16(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_ScramblerDescramblergCRC16(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_SequenceGeneratorgCRC16(SWIGTYPE_p_unsigned_int arg0) {
    return siglib_wrapJNI.SDS_SequenceGeneratorgCRC16(SWIGTYPE_p_unsigned_int.getCPtr(arg0));
  }

  public static int SDS_ScramblerDescramblergCRC12(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_ScramblerDescramblergCRC12(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_SequenceGeneratorgCRC12(SWIGTYPE_p_unsigned_int arg0) {
    return siglib_wrapJNI.SDS_SequenceGeneratorgCRC12(SWIGTYPE_p_unsigned_int.getCPtr(arg0));
  }

  public static int SDS_ScramblerDescramblergCRC8(int arg0, SWIGTYPE_p_unsigned_int arg1) {
    return siglib_wrapJNI.SDS_ScramblerDescramblergCRC8(arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1));
  }

  public static int SDS_SequenceGeneratorgCRC8(SWIGTYPE_p_unsigned_int arg0) {
    return siglib_wrapJNI.SDS_SequenceGeneratorgCRC8(SWIGTYPE_p_unsigned_int.getCPtr(arg0));
  }

  public static void SDS_LongCodeGenerator3GPPDL(SLComplexRect_s arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_unsigned_int arg2, int arg3) {
    siglib_wrapJNI.SDS_LongCodeGenerator3GPPDL(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_unsigned_int.getCPtr(arg2), arg3);
  }

  public static void SDS_LongCodeGenerator3GPPUL(SLComplexRect_s arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_unsigned_int arg2, int arg3) {
    siglib_wrapJNI.SDS_LongCodeGenerator3GPPUL(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_unsigned_int.getCPtr(arg2), arg3);
  }

  public static void SDA_Mux2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Mux2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Demux2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Demux2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Mux3(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_Mux3(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_Demux3(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_Demux3(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_Mux4(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_Mux4(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_Demux4(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_Demux4(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_Mux5(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_Mux5(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SDA_Demux5(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_Demux5(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SIF_Decimate(SWIGTYPE_p_int arg0) {
    siglib_wrapJNI.SIF_Decimate(SWIGTYPE_p_int.getCPtr(arg0));
  }

  public static void SDA_Decimate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_int arg3, int arg4) {
    siglib_wrapJNI.SDA_Decimate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SIF_Interpolate(SWIGTYPE_p_int arg0) {
    siglib_wrapJNI.SIF_Interpolate(SWIGTYPE_p_int.getCPtr(arg0));
  }

  public static void SDA_Interpolate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_int arg3, int arg4) {
    siglib_wrapJNI.SDA_Interpolate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_int.getCPtr(arg3), arg4);
  }

  public static void SIF_FilterAndDecimate(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SIF_FilterAndDecimate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_FilterAndDecimate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_FilterAndDecimate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8);
  }

  public static void SIF_InterpolateAndFilter(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SIF_InterpolateAndFilter(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_InterpolateAndFilter(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_InterpolateAndFilter(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_int.getCPtr(arg6), arg7, arg8);
  }

  public static int SDA_ResampleLinear(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_ResampleLinear(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static int SDA_ResampleLinearNSamples(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_ResampleLinearNSamples(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static double SDA_InterpolateLinear1D(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_InterpolateLinear1D(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static double SDA_InterpolateLinear2D(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_InterpolateLinear2D(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_ResampleSinc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIF_ResampleSinc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_ResampleWindowedSinc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_double arg3, SLWindow_t arg4, double arg5, int arg6) {
    siglib_wrapJNI.SIF_ResampleWindowedSinc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4.swigValue(), arg5, arg6);
  }

  public static int SDA_ResampleSinc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, int arg5, int arg6) {
    return siglib_wrapJNI.SDA_ResampleSinc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5, arg6);
  }

  public static int SDA_ResampleSincNSamples(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, int arg5, int arg6, int arg7) {
    return siglib_wrapJNI.SDA_ResampleSincNSamples(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5, arg6, arg7);
  }

  public static void SIF_InterpolateSinc1D(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SIF_InterpolateSinc1D(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_InterpolateWindowedSinc1D(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, SWIGTYPE_p_double arg3, SLWindow_t arg4, double arg5, int arg6) {
    siglib_wrapJNI.SIF_InterpolateWindowedSinc1D(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4.swigValue(), arg5, arg6);
  }

  public static double SDA_InterpolateSinc1D(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4, int arg5) {
    return siglib_wrapJNI.SDA_InterpolateSinc1D(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SIF_ResampleLinearContiguous(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1) {
    siglib_wrapJNI.SIF_ResampleLinearContiguous(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1));
  }

  public static int SDA_ResampleLinearContiguous(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    return siglib_wrapJNI.SDA_ResampleLinearContiguous(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_ResampleSincContiguous(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SIF_ResampleSincContiguous(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_ResampleWindowedSincContiguous(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, SWIGTYPE_p_double arg5, SLWindow_t arg6, double arg7, int arg8) {
    siglib_wrapJNI.SIF_ResampleWindowedSincContiguous(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, SWIGTYPE_p_double.getCPtr(arg5), arg6.swigValue(), arg7, arg8);
  }

  public static int SDA_ResampleSincContiguous(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, double arg5, double arg6, int arg7, int arg8) {
    return siglib_wrapJNI.SDA_ResampleSincContiguous(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6, arg7, arg8);
  }

  public static void SIF_DtmfGenerate(SWIGTYPE_p_double arg0, double arg1) {
    siglib_wrapJNI.SIF_DtmfGenerate(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SDA_DtmfGenerate(SWIGTYPE_p_double arg0, int arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    return siglib_wrapJNI.SDA_DtmfGenerate(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SIF_DtmfDetect(double arg0, int arg1) {
    siglib_wrapJNI.SIF_DtmfDetect(arg0, arg1);
  }

  public static int SDA_DtmfDetect(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_DtmfDetect(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SDA_DtmfDetectAndValidate(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4, int arg5) {
    return siglib_wrapJNI.SDA_DtmfDetectAndValidate(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), arg5);
  }

  public static int SUF_AsciiToKeyCode(int arg0) {
    return siglib_wrapJNI.SUF_AsciiToKeyCode(arg0);
  }

  public static int SUF_KeyCodeToAscii(int arg0) {
    return siglib_wrapJNI.SUF_KeyCodeToAscii(arg0);
  }

  public static void SIF_PreEmphasisFilter(SWIGTYPE_p_double arg0) {
    siglib_wrapJNI.SIF_PreEmphasisFilter(SWIGTYPE_p_double.getCPtr(arg0));
  }

  public static void SDA_PreEmphasisFilter(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_PreEmphasisFilter(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SIF_DeEmphasisFilter(SWIGTYPE_p_double arg0) {
    siglib_wrapJNI.SIF_DeEmphasisFilter(SWIGTYPE_p_double.getCPtr(arg0));
  }

  public static void SDA_DeEmphasisFilter(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_DeEmphasisFilter(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_AdpcmEncoder(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_AdpcmEncoder(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_AdpcmEncoderDebug(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_AdpcmEncoderDebug(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_AdpcmDecoder(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_AdpcmDecoder(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_Max(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_Max(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_AbsMax(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_AbsMax(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_Min(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_Min(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_AbsMin(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_AbsMin(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_Middle(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_Middle(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_Range(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_Range(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SDA_MaxPos(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_MaxPos(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SDA_AbsMaxPos(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_AbsMaxPos(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SDA_MinPos(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_MinPos(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SDA_AbsMinPos(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_AbsMinPos(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDS_Max(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_Max(arg0, arg1);
  }

  public static double SDS_AbsMax(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_AbsMax(arg0, arg1);
  }

  public static double SDS_Min(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_Min(arg0, arg1);
  }

  public static double SDS_AbsMin(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_AbsMin(arg0, arg1);
  }

  public static double SDA_LocalMax(SWIGTYPE_p_double arg0, int arg1, int arg2, int arg3) {
    return siglib_wrapJNI.SDA_LocalMax(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static double SDA_LocalAbsMax(SWIGTYPE_p_double arg0, int arg1, int arg2, int arg3) {
    return siglib_wrapJNI.SDA_LocalAbsMax(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static double SDA_LocalMin(SWIGTYPE_p_double arg0, int arg1, int arg2, int arg3) {
    return siglib_wrapJNI.SDA_LocalMin(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static double SDA_LocalAbsMin(SWIGTYPE_p_double arg0, int arg1, int arg2, int arg3) {
    return siglib_wrapJNI.SDA_LocalAbsMin(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static void SDA_Max2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Max2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_AbsMax2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_AbsMax2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_SignedAbsMax2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_SignedAbsMax2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Min2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Min2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_AbsMin2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_AbsMin2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_SignedAbsMin2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_SignedAbsMin2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_PeakHold(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_PeakHold(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_PeakHoldPerSample(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_PeakHoldPerSample(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static int SDA_DetectFirstPeakOverThreshold(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_DetectFirstPeakOverThreshold(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static double SDS_Round(double arg0, SLRoundingMode_t arg1) {
    return siglib_wrapJNI.SDS_Round(arg0, arg1.swigValue());
  }

  public static void SDA_Round(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLRoundingMode_t arg2, int arg3) {
    siglib_wrapJNI.SDA_Round(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2.swigValue(), arg3);
  }

  public static void SDA_Clip(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SLClipMode_t arg3, int arg4) {
    siglib_wrapJNI.SDA_Clip(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3.swigValue(), arg4);
  }

  public static void SDA_Threshold(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SLThresholdMode_t arg3, int arg4) {
    siglib_wrapJNI.SDA_Threshold(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3.swigValue(), arg4);
  }

  public static void SDA_SoftThreshold(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_SoftThreshold(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_ThresholdAndClamp(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, SLThresholdMode_t arg4, int arg5) {
    siglib_wrapJNI.SDA_ThresholdAndClamp(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4.swigValue(), arg5);
  }

  public static int SDA_TestOverThreshold(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_TestOverThreshold(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static int SDA_TestAbsOverThreshold(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_TestAbsOverThreshold(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_Clamp(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, SLThresholdMode_t arg4, int arg5) {
    siglib_wrapJNI.SDA_Clamp(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4.swigValue(), arg5);
  }

  public static void SDA_SelectMax(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_SelectMax(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_SelectMin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_SelectMin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_SelectMagnitudeSquaredMax(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_SelectMagnitudeSquaredMax(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SDA_SelectMagnitudeSquaredMin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_SelectMagnitudeSquaredMin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SDA_SetMinValue(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_SetMinValue(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_PeakToAverageRatio(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PeakToAverageRatio(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static double SDA_PeakToAveragePowerRatio(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PeakToAveragePowerRatio(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static double SDA_PeakToAveragePowerRatioDB(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PeakToAveragePowerRatioDB(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static double SDA_PeakToAverageRatioComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_PeakToAverageRatioComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_PeakToAveragePowerRatioComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_PeakToAveragePowerRatioComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_PeakToAveragePowerRatioComplexDB(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_PeakToAveragePowerRatioComplexDB(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_MovePeakTowardsDeadBand(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_MovePeakTowardsDeadBand(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SIF_Envelope(SWIGTYPE_p_double arg0) {
    siglib_wrapJNI.SIF_Envelope(SWIGTYPE_p_double.getCPtr(arg0));
  }

  public static double SDS_Envelope(double arg0, double arg1, double arg2, SWIGTYPE_p_double arg3) {
    return siglib_wrapJNI.SDS_Envelope(arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3));
  }

  public static void SDA_Envelope(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_Envelope(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SIF_EnvelopeRMS(SWIGTYPE_p_double arg0) {
    siglib_wrapJNI.SIF_EnvelopeRMS(SWIGTYPE_p_double.getCPtr(arg0));
  }

  public static double SDS_EnvelopeRMS(double arg0, double arg1, double arg2, SWIGTYPE_p_double arg3) {
    return siglib_wrapJNI.SDS_EnvelopeRMS(arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3));
  }

  public static void SDA_EnvelopeRMS(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_EnvelopeRMS(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SIF_EnvelopeHilbert(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, int arg4, int arg5, SWIGTYPE_p_double arg6) {
    siglib_wrapJNI.SIF_EnvelopeHilbert(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6));
  }

  public static double SDS_EnvelopeHilbert(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_int arg5, int arg6, int arg7, double arg8, SWIGTYPE_p_double arg9) {
    return siglib_wrapJNI.SDS_EnvelopeHilbert(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5), arg6, arg7, arg8, SWIGTYPE_p_double.getCPtr(arg9));
  }

  public static void SDA_EnvelopeHilbert(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, int arg8, int arg9, double arg10, SWIGTYPE_p_double arg11, int arg12) {
    siglib_wrapJNI.SDA_EnvelopeHilbert(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), arg8, arg9, arg10, SWIGTYPE_p_double.getCPtr(arg11), arg12);
  }

  public static void SDA_Divide(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Divide(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Divide2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Divide2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Multiply(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Multiply(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Multiply2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Multiply2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDS_ComplexMultiply(double arg0, double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5) {
    siglib_wrapJNI.SDS_ComplexMultiply(arg0, arg1, arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5));
  }

  public static void SDS_ComplexInverse(double arg0, double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3) {
    siglib_wrapJNI.SDS_ComplexInverse(arg0, arg1, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3));
  }

  public static void SDS_ComplexDivide(double arg0, double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5) {
    siglib_wrapJNI.SDS_ComplexDivide(arg0, arg1, arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5));
  }

  public static void SDA_ComplexScalarMultiply(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_ComplexScalarMultiply(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_ComplexMultiply2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_ComplexMultiply2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SDA_ComplexScalarDivide(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_ComplexScalarDivide(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_ComplexDivide2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_ComplexDivide2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static double SDA_RealDotProduct(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_RealDotProduct(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static SLComplexRect_s SDA_ComplexDotProduct(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    return new SLComplexRect_s(siglib_wrapJNI.SDA_ComplexDotProduct(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4), true);
  }

  public static void SDA_Add2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Add2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Add3(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_Add3(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_Add4(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, int arg5) {
    siglib_wrapJNI.SDA_Add4(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5);
  }

  public static void SDA_Add5(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, int arg6) {
    siglib_wrapJNI.SDA_Add5(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static void SDA_WeightedSum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_WeightedSum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_Subtract2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Subtract2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Offset(SWIGTYPE_p_double arg0, double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Offset(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static double SDA_PositiveOffset(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PositiveOffset(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_NegativeOffset(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_NegativeOffset(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Negate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Negate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Inverse(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Inverse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Square(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Square(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Sqrt(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Sqrt(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Difference(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Difference(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static double SDA_SumOfDifferences(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_SumOfDifferences(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SDS_Roots(double arg0, double arg1, double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4) {
    return siglib_wrapJNI.SDS_Roots(arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4));
  }

  public static double SDS_Factorial(double arg0) {
    return siglib_wrapJNI.SDS_Factorial(arg0);
  }

  public static double SDS_Permutations(double n, double k) {
    return siglib_wrapJNI.SDS_Permutations(n, k);
  }

  public static double SDS_Combinations(double n, double k) {
    return siglib_wrapJNI.SDS_Combinations(n, k);
  }

  public static void SIF_OverlapAndAddLinear(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_OverlapAndAddLinear(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_OverlapAndAddLinear(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_OverlapAndAddLinear(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_OverlapAndAddLinearWithClip(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDA_OverlapAndAddLinearWithClip(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SDA_OverlapAndAddArbitrary(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_OverlapAndAddArbitrary(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_OverlapAndAddArbitraryWithClip(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDA_OverlapAndAddArbitraryWithClip(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static double SDS_DegreesToRadians(double arg0) {
    return siglib_wrapJNI.SDS_DegreesToRadians(arg0);
  }

  public static void SDA_DegreesToRadians(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_DegreesToRadians(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDS_RadiansToDegrees(double arg0) {
    return siglib_wrapJNI.SDS_RadiansToDegrees(arg0);
  }

  public static void SDA_RadiansToDegrees(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_RadiansToDegrees(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Rotate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_Rotate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_Reverse(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Reverse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_Scale(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_Scale(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_MeanSquare(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_MeanSquare(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_MeanSquareError(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_MeanSquareError(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_RootMeanSquare(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_RootMeanSquare(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_Magnitude(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Magnitude(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_MagnitudeSquared(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_MagnitudeSquared(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static double SDS_Magnitude(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_Magnitude(arg0, arg1);
  }

  public static double SDS_MagnitudeSquared(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_MagnitudeSquared(arg0, arg1);
  }

  public static double SDS_Phase(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_Phase(arg0, arg1);
  }

  public static void SDA_PhaseWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_PhaseWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_PhaseUnWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_PhaseUnWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_MagnitudeAndPhaseWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_MagnitudeAndPhaseWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_MagnitudeAndPhaseUnWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_MagnitudeAndPhaseUnWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_MagnitudeSquaredAndPhaseWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_MagnitudeSquaredAndPhaseWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_MagnitudeSquaredAndPhaseUnWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_MagnitudeSquaredAndPhaseUnWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_PhaseWrap(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_PhaseWrap(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_PhaseUnWrap(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_PhaseUnWrap(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDS_Log2(double arg0) {
    return siglib_wrapJNI.SDS_Log2(arg0);
  }

  public static void SDA_Copy(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Copy(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_CopyWithStride(SWIGTYPE_p_double arg0, int arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_CopyWithStride(SWIGTYPE_p_double.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SIF_CopyWithOverlap(SWIGTYPE_p_int arg0) {
    siglib_wrapJNI.SIF_CopyWithOverlap(SWIGTYPE_p_int.getCPtr(arg0));
  }

  public static int SDA_CopyWithOverlap(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5, int arg6) {
    return siglib_wrapJNI.SDA_CopyWithOverlap(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_20Log10(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_20Log10(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_10Log10(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_10Log10(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_LogMagnitude(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_LogMagnitude(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_LogMagnitudeAndPhaseWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_LogMagnitudeAndPhaseWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_LogMagnitudeAndPhaseUnWrapped(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_LogMagnitudeAndPhaseUnWrapped(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_Lengthen(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_Lengthen(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_Shorten(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Shorten(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SIF_ReSize(SWIGTYPE_p_int arg0) {
    siglib_wrapJNI.SIF_ReSize(SWIGTYPE_p_int.getCPtr(arg0));
  }

  public static int SDA_ReSize(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, int arg4, int arg5) {
    return siglib_wrapJNI.SDA_ReSize(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4, arg5);
  }

  public static void SDA_ReSizeInput(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SDA_ReSizeInput(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static int SDA_ReSizeOutput(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    return siglib_wrapJNI.SDA_ReSizeOutput(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static void SDA_Fill(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    siglib_wrapJNI.SDA_Fill(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_Clear(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SDA_Clear(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_Histogram(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_Histogram(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SDA_HistogramCumulative(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_HistogramCumulative(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SDA_HistogramExtended(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_HistogramExtended(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SDA_HistogramExtendedCumulative(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_HistogramExtendedCumulative(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SIF_Histogram(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_Histogram(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_HistogramEqualize(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_HistogramEqualize(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_Quantize(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_Quantize(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static double SDS_Quantize(double arg0, int arg1, double arg2) {
    return siglib_wrapJNI.SDS_Quantize(arg0, arg1, arg2);
  }

  public static void SDA_Quantize_N(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_Quantize_N(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDS_Quantise_N(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_Quantise_N(arg0, arg1);
  }

  public static void SDA_Abs(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Abs(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDS_PeakValueToBits(double arg0, SLSignalSign_t arg1) {
    return siglib_wrapJNI.SDS_PeakValueToBits(arg0, arg1.swigValue());
  }

  public static double SDS_BitsToPeakValue(double arg0, SLSignalSign_t arg1) {
    return siglib_wrapJNI.SDS_BitsToPeakValue(arg0, arg1.swigValue());
  }

  public static double SDS_LinearTodBm(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_LinearTodBm(arg0, arg1);
  }

  public static void SDA_LinearTodBm(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_LinearTodBm(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDS_dBmToLinear(double arg0, double arg1) {
    return siglib_wrapJNI.SDS_dBmToLinear(arg0, arg1);
  }

  public static void SDA_dBmToLinear(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_dBmToLinear(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static int SDS_Compare(double arg0, double arg1, double arg2) {
    return siglib_wrapJNI.SDS_Compare(arg0, arg1, arg2);
  }

  public static int SDA_Compare(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_Compare(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static int SDS_CompareComplex(double arg0, double arg1, double arg2, double arg3, double arg4) {
    return siglib_wrapJNI.SDS_CompareComplex(arg0, arg1, arg2, arg3, arg4);
  }

  public static int SDA_CompareComplex(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    return siglib_wrapJNI.SDA_CompareComplex(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static double SDS_Int(double arg0) {
    return siglib_wrapJNI.SDS_Int(arg0);
  }

  public static double SDS_Frac(double arg0) {
    return siglib_wrapJNI.SDS_Frac(arg0);
  }

  public static double SDS_AbsFrac(double arg0) {
    return siglib_wrapJNI.SDS_AbsFrac(arg0);
  }

  public static void SDA_Int(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Int(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Frac(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Frac(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_AbsFrac(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_AbsFrac(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_SetRange(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_SetRange(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SDA_SetMean(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_SetMean(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SDA_RealSpectralInverse(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_RealSpectralInverse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_ComplexSpectralInverse(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_ComplexSpectralInverse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_FdInterpolate(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_FdInterpolate(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDA_FdInterpolate2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_FdInterpolate2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static double SDS_TdPitchShift(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, double arg5, int arg6) {
    return siglib_wrapJNI.SDS_TdPitchShift(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), arg5, arg6);
  }

  public static void SDA_TdPitchShift(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, double arg6, int arg7, int arg8) {
    siglib_wrapJNI.SDA_TdPitchShift(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, arg8);
  }

  public static double SDS_EchoGenerate(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, double arg3, double arg4, SLEcho_t arg5, int arg6) {
    return siglib_wrapJNI.SDS_EchoGenerate(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3, arg4, arg5.swigValue(), arg6);
  }

  public static void SDA_Power(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_Power(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDS_Polynomial(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6) {
    return siglib_wrapJNI.SDS_Polynomial(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
  }

  public static void SDA_Polynomial(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, int arg8) {
    siglib_wrapJNI.SDA_Polynomial(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8);
  }

  public static double SDS_Modulo(double arg0, double arg1, SLModuloMode_t arg2) {
    return siglib_wrapJNI.SDS_Modulo(arg0, arg1, arg2.swigValue());
  }

  public static void SDA_Modulo(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SLModuloMode_t arg3, int arg4) {
    siglib_wrapJNI.SDA_Modulo(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3.swigValue(), arg4);
  }

  public static void SDA_AgcPeak(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, double arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_double arg7, int arg8, int arg9) {
    siglib_wrapJNI.SDA_AgcPeak(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_double.getCPtr(arg7), arg8, arg9);
  }

  public static void SIF_AgcMeanAbs(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, double arg6, double arg7, int arg8) {
    siglib_wrapJNI.SIF_AgcMeanAbs(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, arg8);
  }

  public static void SDA_AgcMeanAbs(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, double arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10, int arg11) {
    siglib_wrapJNI.SDA_AgcMeanAbs(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10, arg11);
  }

  public static void SIF_AgcMeanSquared(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, double arg6, double arg7, int arg8) {
    siglib_wrapJNI.SIF_AgcMeanSquared(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6, arg7, arg8);
  }

  public static void SDA_AgcMeanSquared(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, double arg3, double arg4, double arg5, SWIGTYPE_p_double arg6, SWIGTYPE_p_int arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_double arg9, int arg10, int arg11) {
    siglib_wrapJNI.SDA_AgcMeanSquared(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), SWIGTYPE_p_int.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_double.getCPtr(arg9), arg10, arg11);
  }

  public static void SDA_GroupDelay(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_GroupDelay(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static int SDA_ZeroCrossingDetect(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SLLevelCrossingMode_t arg3, int arg4) {
    return siglib_wrapJNI.SDA_ZeroCrossingDetect(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3.swigValue(), arg4);
  }

  public static double SDS_ZeroCrossingDetect(double arg0, SWIGTYPE_p_double arg1, SLLevelCrossingMode_t arg2) {
    return siglib_wrapJNI.SDS_ZeroCrossingDetect(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2.swigValue());
  }

  public static int SDA_FirstZeroCrossingLocation(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLLevelCrossingMode_t arg2, int arg3) {
    return siglib_wrapJNI.SDA_FirstZeroCrossingLocation(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2.swigValue(), arg3);
  }

  public static int SDA_ZeroCrossingCount(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLLevelCrossingMode_t arg2, int arg3) {
    return siglib_wrapJNI.SDA_ZeroCrossingCount(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2.swigValue(), arg3);
  }

  public static int SDA_LevelCrossingDetect(SWIGTYPE_p_double arg0, double DetectionLevel, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SLLevelCrossingMode_t arg4, int arg5) {
    return siglib_wrapJNI.SDA_LevelCrossingDetect(SWIGTYPE_p_double.getCPtr(arg0), DetectionLevel, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4.swigValue(), arg5);
  }

  public static double SDS_LevelCrossingDetect(double arg0, double DetectionLevel, SWIGTYPE_p_double arg2, SLLevelCrossingMode_t arg3) {
    return siglib_wrapJNI.SDS_LevelCrossingDetect(arg0, DetectionLevel, SWIGTYPE_p_double.getCPtr(arg2), arg3.swigValue());
  }

  public static int SDA_FirstLevelCrossingLocation(SWIGTYPE_p_double arg0, double DetectionLevel, SWIGTYPE_p_double arg2, SLLevelCrossingMode_t arg3, int arg4) {
    return siglib_wrapJNI.SDA_FirstLevelCrossingLocation(SWIGTYPE_p_double.getCPtr(arg0), DetectionLevel, SWIGTYPE_p_double.getCPtr(arg2), arg3.swigValue(), arg4);
  }

  public static int SDA_LevelCrossingCount(SWIGTYPE_p_double arg0, double DetectionLevel, SWIGTYPE_p_double arg2, SLLevelCrossingMode_t arg3, int arg4) {
    return siglib_wrapJNI.SDA_LevelCrossingCount(SWIGTYPE_p_double.getCPtr(arg0), DetectionLevel, SWIGTYPE_p_double.getCPtr(arg2), arg3.swigValue(), arg4);
  }

  public static int SDA_Trigger(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, SLLevelCrossingMode_t arg3, int arg4) {
    return siglib_wrapJNI.SDA_Trigger(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3.swigValue(), arg4);
  }

  public static void SDA_ClearLocation(SWIGTYPE_p_double arg0, int arg1, int arg2) {
    siglib_wrapJNI.SDA_ClearLocation(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_SetLocation(SWIGTYPE_p_double arg0, int arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_SetLocation(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static void SDA_SortMinToMax(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_SortMinToMax(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_SortMaxToMin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_SortMaxToMin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SDS_CountOneBits(int arg0) {
    return siglib_wrapJNI.SDS_CountOneBits(arg0);
  }

  public static int SDS_CountZeroBits(int arg0) {
    return siglib_wrapJNI.SDS_CountZeroBits(arg0);
  }

  public static int SDS_CountLeadingOneBits(int arg0) {
    return siglib_wrapJNI.SDS_CountLeadingOneBits(arg0);
  }

  public static int SDS_CountLeadingZeroBits(int arg0) {
    return siglib_wrapJNI.SDS_CountLeadingZeroBits(arg0);
  }

  public static void SDA_Sign(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Sign(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Swap(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Swap(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SUF_ModuloIncrement(int arg0, int arg1, int arg2) {
    return siglib_wrapJNI.SUF_ModuloIncrement(arg0, arg1, arg2);
  }

  public static int SUF_ModuloDecrement(int arg0, int arg1, int arg2) {
    return siglib_wrapJNI.SUF_ModuloDecrement(arg0, arg1, arg2);
  }

  public static int SUF_IndexModuloIncrement(int arg0, int arg1, int arg2) {
    return siglib_wrapJNI.SUF_IndexModuloIncrement(arg0, arg1, arg2);
  }

  public static int SUF_IndexModuloDecrement(int arg0, int arg1, int arg2) {
    return siglib_wrapJNI.SUF_IndexModuloDecrement(arg0, arg1, arg2);
  }

  public static int SDA_Find(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SLFindType_t arg3, int arg4) {
    return siglib_wrapJNI.SDA_Find(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3.swigValue(), arg4);
  }

  public static int SDA_FindValue(SWIGTYPE_p_double arg0, double DesiredValue, SWIGTYPE_p_double arg2, SWIGTYPE_p_int arg3, SLFindType_t arg4, int arg5) {
    return siglib_wrapJNI.SDA_FindValue(SWIGTYPE_p_double.getCPtr(arg0), DesiredValue, SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), arg4.swigValue(), arg5);
  }

  public static void SIF_DeGlitch(SWIGTYPE_p_int arg0, double arg1, SWIGTYPE_p_double arg2) {
    siglib_wrapJNI.SIF_DeGlitch(SWIGTYPE_p_int.getCPtr(arg0), arg1, SWIGTYPE_p_double.getCPtr(arg2));
  }

  public static double SDS_DeGlitch(double arg0, SWIGTYPE_p_int arg1, SLDeGlitchMode_t arg2, int arg3, double arg4, SWIGTYPE_p_double arg5) {
    return siglib_wrapJNI.SDS_DeGlitch(arg0, SWIGTYPE_p_int.getCPtr(arg1), arg2.swigValue(), arg3, arg4, SWIGTYPE_p_double.getCPtr(arg5));
  }

  public static void SDA_DeGlitch(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SLDeGlitchMode_t arg3, int arg4, double arg5, SWIGTYPE_p_double arg6, int arg7) {
    siglib_wrapJNI.SDA_DeGlitch(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3.swigValue(), arg4, arg5, SWIGTYPE_p_double.getCPtr(arg6), arg7);
  }

  public static int SDA_RemoveDuplicates(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_RemoveDuplicates(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SDA_FindAllDuplicates(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_FindAllDuplicates(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static int SDA_FindFirstDuplicates(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_FindFirstDuplicates(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static int SDA_FindSortAllDuplicates(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_FindSortAllDuplicates(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static int SDA_FindSortFirstDuplicates(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4) {
    return siglib_wrapJNI.SDA_FindSortFirstDuplicates(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static void SDA_SigLibDataToFix(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SDA_SigLibDataToFix(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SDA_FixToSigLibData(SWIGTYPE_p_int arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_FixToSigLibData(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_SigLibDataToImageData(SWIGTYPE_p_double arg0, SWIGTYPE_p_unsigned_int arg1, int arg2) {
    siglib_wrapJNI.SDA_SigLibDataToImageData(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), arg2);
  }

  public static void SDA_ImageDataToSigLibData(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_ImageDataToSigLibData(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_SigLibDataToFix16(SWIGTYPE_p_double arg0, SWIGTYPE_p_short arg1, int arg2) {
    siglib_wrapJNI.SDA_SigLibDataToFix16(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_short.getCPtr(arg1), arg2);
  }

  public static void SDA_Fix16ToSigLibData(SWIGTYPE_p_short arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Fix16ToSigLibData(SWIGTYPE_p_short.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_SigLibDataToFix32(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    siglib_wrapJNI.SDA_SigLibDataToFix32(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SDA_Fix32ToSigLibData(SWIGTYPE_p_int arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Fix32ToSigLibData(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static int SDS_SigLibDataToQFormatInteger(double x, int arg1, int arg2) {
    return siglib_wrapJNI.SDS_SigLibDataToQFormatInteger(x, arg1, arg2);
  }

  public static double SDS_QFormatIntegerToSigLibData(int arg0, int arg1) {
    return siglib_wrapJNI.SDS_QFormatIntegerToSigLibData(arg0, arg1);
  }

  public static void SDA_SigLibDataToQFormatInteger(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SDA_SigLibDataToQFormatInteger(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SDA_QFormatIntegerToSigLibData(SWIGTYPE_p_int arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SDA_QFormatIntegerToSigLibData(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDS_Pid(double arg0, double arg1, double arg2, double arg3, SWIGTYPE_p_double arg4, SWIGTYPE_p_double arg5, SWIGTYPE_p_double arg6) {
    siglib_wrapJNI.SDS_Pid(arg0, arg1, arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), SWIGTYPE_p_double.getCPtr(arg6));
  }

  public static void SDA_Pwm(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDA_Pwm(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static double SDA_ExtractOrder(SWIGTYPE_p_double arg0, int arg1, int arg2, double arg3, int arg4, double arg5, int arg6) {
    return siglib_wrapJNI.SDA_ExtractOrder(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2, arg3, arg4, arg5, arg6);
  }

  public static double SDA_SumLevel(SWIGTYPE_p_double arg0, SLSignalCoherenceType_t arg1, int arg2, int arg3) {
    return siglib_wrapJNI.SDA_SumLevel(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2, arg3);
  }

  public static double SDA_SumLevelWholeSpectrum(SWIGTYPE_p_double arg0, SLSignalCoherenceType_t arg1, int arg2, double arg3, int arg4) {
    return siglib_wrapJNI.SDA_SumLevelWholeSpectrum(SWIGTYPE_p_double.getCPtr(arg0), arg1.swigValue(), arg2, arg3, arg4);
  }

  public static void SIF_OrderAnalysis(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, SWIGTYPE_p_double arg4, SLWindow_t arg5, double arg6, SWIGTYPE_p_double arg7, SWIGTYPE_p_double arg8, SWIGTYPE_p_int arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_double arg11, int arg12) {
    siglib_wrapJNI.SIF_OrderAnalysis(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_double.getCPtr(arg4), arg5.swigValue(), arg6, SWIGTYPE_p_double.getCPtr(arg7), SWIGTYPE_p_double.getCPtr(arg8), SWIGTYPE_p_int.getCPtr(arg9), SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_double.getCPtr(arg11), arg12);
  }

  public static double SDA_OrderAnalysis(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, double arg5, double arg6, int arg7, SWIGTYPE_p_double arg8, double arg9, SWIGTYPE_p_double arg10, SWIGTYPE_p_int arg11, SWIGTYPE_p_double arg12, SWIGTYPE_p_double arg13, int arg14, SWIGTYPE_p_double arg15, int arg16, int arg17, int arg18, double arg19, SLSignalCoherenceType_t arg20, double arg21, int arg22, int arg23, int arg24, int arg25) {
    return siglib_wrapJNI.SDA_OrderAnalysis(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6, arg7, SWIGTYPE_p_double.getCPtr(arg8), arg9, SWIGTYPE_p_double.getCPtr(arg10), SWIGTYPE_p_int.getCPtr(arg11), SWIGTYPE_p_double.getCPtr(arg12), SWIGTYPE_p_double.getCPtr(arg13), arg14, SWIGTYPE_p_double.getCPtr(arg15), arg16, arg17, arg18, arg19, arg20.swigValue(), arg21, arg22, arg23, arg24, arg25);
  }

  public static double SDA_Sum(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_Sum(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_AbsSum(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_AbsSum(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_SumOfSquares(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_SumOfSquares(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_Mean(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_Mean(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static double SDA_AbsMean(SWIGTYPE_p_double arg0, double arg1, int arg2) {
    return siglib_wrapJNI.SDA_AbsMean(SWIGTYPE_p_double.getCPtr(arg0), arg1, arg2);
  }

  public static void SDA_SubtractMean(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_SubtractMean(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_SampleSd(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_SampleSd(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_PopulationSd(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_PopulationSd(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_UnbiasedVariance(SWIGTYPE_p_double arg0, int arg1) {
    return siglib_wrapJNI.SDA_UnbiasedVariance(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static double SDA_Median(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_Median(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LinraConstantCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_LinraConstantCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LinraRegressionCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_LinraRegressionCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LinraCorrelationCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_LinraCorrelationCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LinraEstimateX(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_LinraEstimateX(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_LinraEstimateY(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_LinraEstimateY(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_LograConstantCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_LograConstantCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LograRegressionCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_LograRegressionCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LograCorrelationCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_LograCorrelationCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_LograEstimateX(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_LograEstimateX(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_LograEstimateY(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_LograEstimateY(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_ExpraConstantCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_ExpraConstantCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_ExpraRegressionCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_ExpraRegressionCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_ExpraCorrelationCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_ExpraCorrelationCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_ExpraEstimateX(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_ExpraEstimateX(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_ExpraEstimateY(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_ExpraEstimateY(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_PowraConstantCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PowraConstantCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_PowraRegressionCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PowraRegressionCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_PowraCorrelationCoeff(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    return siglib_wrapJNI.SDA_PowraCorrelationCoeff(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDA_PowraEstimateX(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_PowraEstimateX(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static double SDA_PowraEstimateY(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDA_PowraEstimateY(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_Detrend(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_Detrend(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_ExtractTrend(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_ExtractTrend(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_Sin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Sin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Cos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Cos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Tan(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Tan(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SIF_FastSin(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_FastSin(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_FastSin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_FastSin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static double SDS_FastSin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDS_FastSin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_FastCos(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_FastCos(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_FastCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4, int arg5) {
    siglib_wrapJNI.SDA_FastCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static double SDS_FastCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    return siglib_wrapJNI.SDS_FastCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SIF_FastSinCos(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SIF_FastSinCos(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static void SDA_FastSinCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_FastSinCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDS_FastSinCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDS_FastSinCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_QuickSin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_QuickSin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_QuickSin(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_QuickSin(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static double SDS_QuickSin(double arg0, SWIGTYPE_p_double arg1, double arg2) {
    return siglib_wrapJNI.SDS_QuickSin(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SIF_QuickCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_QuickCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_QuickCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_QuickCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static double SDS_QuickCos(double arg0, SWIGTYPE_p_double arg1, double arg2) {
    return siglib_wrapJNI.SDS_QuickCos(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SIF_QuickSinCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_QuickSinCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_QuickSinCos(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5, int arg6) {
    siglib_wrapJNI.SDA_QuickSinCos(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5, arg6);
  }

  public static void SDS_QuickSinCos(double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, double arg4, int arg5) {
    siglib_wrapJNI.SDS_QuickSinCos(arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4, arg5);
  }

  public static void SIF_QuickTan(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SIF_QuickTan(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_QuickTan(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_QuickTan(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static double SDS_QuickTan(double arg0, SWIGTYPE_p_double arg1, double arg2) {
    return siglib_wrapJNI.SDS_QuickTan(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_Sinc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_Sinc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static double SDS_Sinc(double arg0) {
    return siglib_wrapJNI.SDS_Sinc(arg0);
  }

  public static void SIF_QuickSinc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, double arg2, int arg3) {
    siglib_wrapJNI.SIF_QuickSinc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SDA_QuickSinc(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, double arg3, int arg4) {
    siglib_wrapJNI.SDA_QuickSinc(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4);
  }

  public static double SDS_QuickSinc(double arg0, SWIGTYPE_p_double arg1, double arg2) {
    return siglib_wrapJNI.SDS_QuickSinc(arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static SLComplexPolar_s SCV_Polar(double arg0, double arg1) {
    return new SLComplexPolar_s(siglib_wrapJNI.SCV_Polar(arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_Rectangular(double arg0, double arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Rectangular(arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_PolarToRectangular(SLComplexPolar_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_PolarToRectangular(SLComplexPolar_s.getCPtr(arg0), arg0), true);
  }

  public static SLComplexPolar_s SCV_RectangularToPolar(SLComplexRect_s arg0) {
    return new SLComplexPolar_s(siglib_wrapJNI.SCV_RectangularToPolar(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static SLComplexRect_s SCV_Sqrt(SLComplexRect_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Sqrt(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static SLComplexRect_s SCV_Inverse(SLComplexRect_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Inverse(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static SLComplexRect_s SCV_Conjugate(SLComplexRect_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Conjugate(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static double SCV_Magnitude(SLComplexRect_s arg0) {
    return siglib_wrapJNI.SCV_Magnitude(SLComplexRect_s.getCPtr(arg0), arg0);
  }

  public static double SCV_MagnitudeSquared(SLComplexRect_s arg0) {
    return siglib_wrapJNI.SCV_MagnitudeSquared(SLComplexRect_s.getCPtr(arg0), arg0);
  }

  public static double SCV_Phase(SLComplexRect_s arg0) {
    return siglib_wrapJNI.SCV_Phase(SLComplexRect_s.getCPtr(arg0), arg0);
  }

  public static SLComplexRect_s SCV_Multiply(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Multiply(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1), true);
  }

  public static SLComplexRect_s SCV_Divide(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Divide(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1), true);
  }

  public static SLComplexRect_s SCV_Add(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Add(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1), true);
  }

  public static SLComplexRect_s SCV_Subtract(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Subtract(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1), true);
  }

  public static SLComplexRect_s SCV_Log(SLComplexRect_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Log(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static SLComplexRect_s SCV_Exp(SLComplexRect_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Exp(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static SLComplexRect_s SCV_Expj(double arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Expj(arg0), true);
  }

  public static SLComplexRect_s SCV_Pow(SLComplexRect_s arg0, double arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Pow(SLComplexRect_s.getCPtr(arg0), arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_VectorAddScalar(SLComplexRect_s arg0, double arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_VectorAddScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_VectorSubtractScalar(SLComplexRect_s arg0, double arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_VectorSubtractScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_VectorMultiplyScalar(SLComplexRect_s arg0, double arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_VectorMultiplyScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_VectorDivideScalar(SLComplexRect_s arg0, double arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_VectorDivideScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1), true);
  }

  public static SLComplexRect_s SCV_ScalarSubtractVector(double arg0, SLComplexRect_s arg1) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_ScalarSubtractVector(arg0, SLComplexRect_s.getCPtr(arg1), arg1), true);
  }

  public static void SCV_Roots(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, SLComplexRect_s arg3, SLComplexRect_s arg4) {
    siglib_wrapJNI.SCV_Roots(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, SLComplexRect_s.getCPtr(arg3), arg3, SLComplexRect_s.getCPtr(arg4), arg4);
  }

  public static SLComplexRect_s SCV_Copy(SLComplexRect_s arg0) {
    return new SLComplexRect_s(siglib_wrapJNI.SCV_Copy(SLComplexRect_s.getCPtr(arg0), arg0), true);
  }

  public static SLCompareType_t SCV_Compare(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return SLCompareType_t.swigToEnum(siglib_wrapJNI.SCV_Compare(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1));
  }

  public static void SDA_CreateComplexRect(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_CreateComplexRect(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_CreateComplexPolar(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SLComplexPolar_s arg2, int arg3) {
    siglib_wrapJNI.SDA_CreateComplexPolar(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SLComplexPolar_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ExtractComplexRect(SLComplexRect_s arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_ExtractComplexRect(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_ExtractComplexPolar(SLComplexPolar_s arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SDA_ExtractComplexPolar(SLComplexPolar_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SDA_ClearComplexRect(SLComplexRect_s arg0, int arg1) {
    siglib_wrapJNI.SDA_ClearComplexRect(SLComplexRect_s.getCPtr(arg0), arg0, arg1);
  }

  public static void SDA_ClearComplexPolar(SLComplexPolar_s arg0, int arg1) {
    siglib_wrapJNI.SDA_ClearComplexPolar(SLComplexPolar_s.getCPtr(arg0), arg0, arg1);
  }

  public static void SDA_FillComplexRect(SLComplexRect_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_FillComplexRect(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_FillComplexPolar(SLComplexPolar_s arg0, SLComplexPolar_s arg1, int arg2) {
    siglib_wrapJNI.SDA_FillComplexPolar(SLComplexPolar_s.getCPtr(arg0), arg0, SLComplexPolar_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexRectangularToPolar(SLComplexRect_s arg0, SLComplexPolar_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexRectangularToPolar(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexPolar_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexPolarToRectangular(SLComplexPolar_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexPolarToRectangular(SLComplexPolar_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_RectangularToPolar(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_RectangularToPolar(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_PolarToRectangular(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, int arg4) {
    siglib_wrapJNI.SDA_PolarToRectangular(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static void SDA_ComplexSqrt(SLComplexRect_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexSqrt(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexInverse(SLComplexRect_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexInverse(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexConjugate(SLComplexRect_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexConjugate(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexMagnitude(SLComplexRect_s arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexMagnitude(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_ComplexMagnitudeSquared(SLComplexRect_s arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexMagnitudeSquared(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_ComplexPhase(SLComplexRect_s arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexPhase(SLComplexRect_s.getCPtr(arg0), arg0, SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SDA_ComplexMultiply(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexMultiply(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexDivide(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexDivide(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexAdd(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexAdd(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexSubtract(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexSubtract(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexLog(SLComplexRect_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexLog(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexExp(SLComplexRect_s arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexExp(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexExpj(SWIGTYPE_p_double arg0, SLComplexRect_s arg1, int arg2) {
    siglib_wrapJNI.SDA_ComplexExpj(SWIGTYPE_p_double.getCPtr(arg0), SLComplexRect_s.getCPtr(arg1), arg1, arg2);
  }

  public static void SDA_ComplexPow(SLComplexRect_s arg0, SLComplexRect_s arg1, double arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexPow(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, arg2, arg3);
  }

  public static void SDA_ComplexVectorAddScalar(SLComplexRect_s arg0, double arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexVectorAddScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexVectorSubtractScalar(SLComplexRect_s arg0, double arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexVectorSubtractScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexVectorMultiplyScalar(SLComplexRect_s arg0, double arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexVectorMultiplyScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexVectorDivideScalar(SLComplexRect_s arg0, double arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexVectorDivideScalar(SLComplexRect_s.getCPtr(arg0), arg0, arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexScalarSubtractVector(double arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexScalarSubtractVector(arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexRectangularLinearInterpolate(SLComplexRect_s arg0, SLComplexRect_s arg1, SLComplexRect_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexRectangularLinearInterpolate(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1, SLComplexRect_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SDA_ComplexPolarLinearInterpolate(SLComplexPolar_s arg0, SLComplexPolar_s arg1, SLComplexPolar_s arg2, int arg3) {
    siglib_wrapJNI.SDA_ComplexPolarLinearInterpolate(SLComplexPolar_s.getCPtr(arg0), arg0, SLComplexPolar_s.getCPtr(arg1), arg1, SLComplexPolar_s.getCPtr(arg2), arg2, arg3);
  }

  public static void SMX_Transpose(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_Transpose(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SMX_Multiply(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_Multiply(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SMX_CreateIdentity(SWIGTYPE_p_double arg0, int arg1) {
    siglib_wrapJNI.SMX_CreateIdentity(SWIGTYPE_p_double.getCPtr(arg0), arg1);
  }

  public static int SMX_Inverse2x2(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1) {
    return siglib_wrapJNI.SMX_Inverse2x2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1));
  }

  public static int SMX_ComplexInverse2x2(SLComplexRect_s arg0, SLComplexRect_s arg1) {
    return siglib_wrapJNI.SMX_ComplexInverse2x2(SLComplexRect_s.getCPtr(arg0), arg0, SLComplexRect_s.getCPtr(arg1), arg1);
  }

  public static int SMX_Inverse(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3, SWIGTYPE_p_int arg4, SWIGTYPE_p_double arg5, int arg6) {
    return siglib_wrapJNI.SMX_Inverse(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4), SWIGTYPE_p_double.getCPtr(arg5), arg6);
  }

  public static int SMX_LuDecompose(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_double arg2, int arg3) {
    return siglib_wrapJNI.SMX_LuDecompose(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SMX_LuSolve(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, int arg3) {
    siglib_wrapJNI.SMX_LuSolve(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), arg3);
  }

  public static double SMX_Determinant(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_double arg3, int arg4) {
    return siglib_wrapJNI.SMX_Determinant(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3), arg4);
  }

  public static double SMX_LuDeterminant(SWIGTYPE_p_double arg0, SWIGTYPE_p_int arg1, int arg2) {
    return siglib_wrapJNI.SMX_LuDeterminant(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), arg2);
  }

  public static void SMX_RotateClockwise(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_RotateClockwise(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SMX_RotateAntiClockwise(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_RotateAntiClockwise(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SMX_Reflect(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_Reflect(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SMX_Flip(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_Flip(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SMX_InsertRow(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_InsertRow(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SMX_ExtractRow(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_ExtractRow(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

  public static void SMX_InsertColumn(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_InsertColumn(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SMX_ExtractColumn(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SMX_ExtractColumn(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SMX_InsertNewRow(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_InsertNewRow(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SMX_DeleteOldRow(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SMX_DeleteOldRow(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SMX_InsertNewColumn(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_InsertNewColumn(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5);
  }

  public static void SMX_DeleteOldColumn(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4) {
    siglib_wrapJNI.SMX_DeleteOldColumn(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static void SMX_InsertRegion(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) {
    siglib_wrapJNI.SMX_InsertRegion(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3, arg4, arg5, arg6, arg7, arg8);
  }

  public static void SMX_ExtractRegion(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
    siglib_wrapJNI.SMX_ExtractRegion(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5, arg6);
  }

  public static void SMX_InsertDiagonal(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, int arg3) {
    siglib_wrapJNI.SMX_InsertDiagonal(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), arg3);
  }

  public static void SMX_ExtractDiagonal(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2) {
    siglib_wrapJNI.SMX_ExtractDiagonal(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
  }

  public static void SMX_SwapRows(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_SwapRows(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SMX_SwapColumns(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3, int arg4, int arg5) {
    siglib_wrapJNI.SMX_SwapColumns(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public static void SMX_Sum(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, int arg2, int arg3) {
    siglib_wrapJNI.SMX_Sum(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2, arg3);
  }

}
